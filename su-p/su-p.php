<?php
// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Register su_p Dashboard Shortcode
function su_p_dashboard_shortcode() {
    if (!is_user_logged_in() || !current_user_can('su_p')) {
        return '<p>You must be logged to view this dashboard.</p>';
    }

    ob_start();
    $current_user = wp_get_current_user();
    ?>
    <div class="su_p-wrapper" style="display: flex; min-height: 100vh; background: #f5f7fa;">
        <?php
        echo render_su_p_header($current_user);
        $section = isset($_GET['section']) ? sanitize_text_field($_GET['section']) : 'overview';
        $action = isset($_GET['action']) ? sanitize_text_field($_GET['action']) : '';
     
        // $active_section = isset($_GET['section']) ? sanitize_text_field($_GET['section']) : 'overview';
        // $section = isset($_GET['section']) ? sanitize_text_field($_GET['section']) : 'overview';
       
        $active_section = $section;
        $active_action = $action; // Pass action to sidebar
     
        
        include(plugin_dir_path(__FILE__) . 'su-p-sidebar.php');
        ?>
        <div class="su_p-content-wrapper" style="flex: 1; padding: 20px; width: calc(100% - 250px); margin-top:60px;">
            <?php
            switch ($active_section) {
                case 'overview':
                    echo render_instituto_dashboard();
                    break;
                case 'centers':
                    echo render_su_p_centers();
                    break;
                // case 'teacher':
                //     echo render_su_p_teachers();

                //     break;
                    case 'teacher':
                        if ($action === 'add-teacher') {
                            echo render_su_p_add_teachers();
                        } 
                        elseif ($action === 'edit-teacher') {
                            echo render_su_p_edit_teachers();
                        } 
                        elseif ($action === 'delete-teacher') {
                            echo render_su_p_delete_teachers();
                        } 
                         else {
                            echo render_su_p_teachers_management();
                        }
                        break;
                    case 'students':
                        if ($action === 'add-students') {
                            echo render_su_p_add_students();
                        } 
                        elseif ($action === 'edit-students') {
                            echo render_su_p_edit_students();
                        } 
                        elseif ($action === 'delete-students') {
                            echo render_su_p_delete_students();
                        } 
                         else {
                            echo render_su_p_students_management();
                        }
                        break;
                // case 'students':
                //     echo render_su_p_students();
                //     break;
                case 'staff':
                    echo render_su_p_staff();
                    break;
                case 'roles':
                    echo render_su_p_roles();
                    break;
                case 'classes':
                    if ($action === 'add-class') {
                        echo render_su_p_add_class_form();
                    } elseif ($action === 'edit-class') {
                        echo render_su_p_edit_class_form();
                    } 
                    elseif ($action === 'delete-class') {
                        echo render_su_p_delete_class_form();
                    }
                    elseif ($action === 'student-count') {
                        echo render_su_p_student_count();
                    }
                     else {
                       echo render_su_p_class_management();
                    }
                    break;
                case 'exams':
                    if ($action === 'add-exams') {
                        echo render_su_p_add_exam();
                    } elseif ($action === 'edit-exams') {
                        echo render_su_p_edit_exam();
                    } 
                    elseif ($action === 'delete-exams') {
                        echo render_su_p_delete_exam();
                    }
                     else {
                       echo render_su_p_exam_management();
                    }
                    break;
                case 'results':
                       echo render_su_p_exam_results();
                    break;

                // case 'attendance':
                //     echo render_su_p_student_attendance();
                //     break;
                    case 'attendance':
                        if ($action === 'teachers-attendance') {
                            echo render_su_p_teacher_attendance();
                        } elseif ($action === 'staff-attendance') {
                            echo 
                            render_su_p_staff_attendance();
                        } 
                        // elseif ($action === 'bulk-import') {
                        //     echo bulk_import_attendance_shortcode($user_id);
                        // }
                         else {
                            echo render_su_p_student_attendance();
                        }
                        break;
                    case 'library':
                        if ($action === 'add-library') {
                            echo render_su_p_library_add_form();
                        } 
                        elseif ($action === 'edit-library') {
                            echo render_su_p_library_edit_form();
                        } 
                        elseif ($action === 'delete-library') {
                            echo render_su_p_library_delete_form();
                        } 
                        elseif ($action === 'transaction-library') {
                            echo render_su_p_library_transaction_form();
                        } 
                        elseif ($action === 'overdue-library') {
                            echo su_p_library_overdue_shortcode();
                        } 
                         else {
                            echo su_p_library_management_dashboard_shortcode();
                        }
                        break;
                    case 'timetable':
                        if ($action === 'add-timetable') {
                            echo render_su_p_add_timetable();
                        } 
                        elseif ($action === 'edit-timetable') {
                            echo render_su_p_edit_timetable();
                        } 
                        elseif ($action === 'delete-timetable') {
                            echo render_su_p_delete_timetable();
                        } 
                         else {
                            echo render_su_p_timetable_management();
                        }
                        break;
                    case 'subjects':
                        if ($action === 'add-subjects') {
                            echo render_su_p_add_subjects();
                        } 
                        elseif ($action === 'edit-subjects') {
                            echo render_su_p_edit_subjects();
                        } 
                        elseif ($action === 'delete-subjects') {
                            echo render_su_p_delete_subjects();
                        } 
                         else {
                            echo render_su_p_subjects_management();
                        }
                        break;
                    case 'homework':
                        if ($action === 'add-homework') {
                            echo render_su_p_add_homework();
                        } 
                        elseif ($action === 'edit-homework') {
                            echo render_su_p_edit_homework();
                        } 
                        elseif ($action === 'delete-homework') {
                            echo render_su_p_delete_homework();
                        } 
                         else {
                            echo render_su_p_homework_management();
                        }
                        break;
                    case 'department':
                        if ($action === 'add-department') {
                            echo render_su_p_add_department();
                        } 
                        elseif ($action === 'edit-department') {
                            echo render_su_p_edit_department();
                        } 
                        elseif ($action === 'delete-department') {
                            echo render_su_p_delete_department();
                        } 
                         else {
                            echo render_su_p_department_management();
                        }
                        break;
                    case 'parents':
                        if ($action === 'add-parents') {
                            echo render_su_p_add_parents();
                        } 
                        elseif ($action === 'edit-parents') {
                            echo render_su_p_edit_parents();
                        } 
                        elseif ($action === 'delete-parents') {
                            echo render_su_p_delete_parents();
                        } 
                         else {
                            echo render_su_p_parents_management();
                        }
                        break;
                        case 'inventory':
                            if ($action === 'add-inventory') {
                                echo render_su_p_library_add_form();
                            } 
                            elseif ($action === 'edit-inventory') {
                                echo render_su_p_edit_inventory();
                            } 
                            elseif ($action === 'delete-inventory') {
                                echo render_su_p_delete_inventory();
                            } 
                            elseif ($action === 'transaction-inventory') {
                                echo render_su_p_transaction_management();
                            } 
                            elseif ($action === 'add-transaction-inventory') {
                                echo render_su_p_add_transaction();
                            } 
                            elseif ($action === 'edit-transaction-inventory') {
                                echo render_su_p_edit_transaction();
                            } 
                            elseif ($action === 'delete-transaction-inventory') {
                                echo render_su_p_delete_transaction();
                            } 
                            elseif ($action === 'view-transaction-inventory') {
                                echo render_su_p_view_transactions();
                            } 
                            
                             else {
                                echo render_su_p_inventory_management();
                            }
                            break;
                            case 'fees':
                               if ($action === 'add-fees') {
                                    echo render_enigma_add_fees_form();
                                } 
                                elseif ($action === 'edit-fees') {
                                    echo render_enigma_edit_fees_form();
                                } 
                                elseif ($action === 'delete-fees') {
                                    echo render_enigma_delete_fees_form();
                                } 
                                 else {
                                    echo render_enigma_fees_management();
                                }
                                break;
                            case 'fee_templates':
                               if ($action === 'add-fee_templates') {
                                    echo render_enigma_add_fee_template_form();
                                } 
                                elseif ($action === 'edit-fee_templates') {
                                    echo render_enigma_edit_fee_template_form();
                                } 
                                elseif ($action === 'delete-fee_templates') {
                                    echo render_enigma_delete_fee_template_form();
                                } 
                                 else {
                                    echo render_enigma_view_fee_templates_form();
                                }
                                break;
                            case 'transport_fees':
                               if ($action === 'add-transport_fees') {
                                    echo render_edit_transport_fees();
                                } 
                                elseif ($action === 'edit-transport_fees') {
                                    echo render_edit_transport_fees();
                                } 
                                elseif ($action === 'delete-transport_fees') {
                                    echo render_delete_transport_fees();
                                } 
                                 else {
                                    echo render_view_transport_fees();
                                }
                                break;
                            case 'transport_enrollments':
                               if ($action === 'add-transport_enrollments') {
                                    echo render_add_transport_enrollments();
                                } 
                                elseif ($action === 'edit-transport_enrollments') {
                                    echo render_edit_transport_enrollments();
                                } 
                                elseif ($action === 'delete-transport_enrollments') {
                                    echo render_delete_transport_enrollments();
                                } 
                                 else {
                                    echo render_view_transport_enrollments();
                                }
                                break;

                            case 'message':
                                if ($action === 'add-parents') {
                                    echo render_su_p_add_parents();
                                } 
                                elseif ($action === 'edit-parents') {
                                    echo render_su_p_edit_parents();
                                } 
                                elseif ($action === 'delete-parents') {
                                    echo render_su_p_delete_parents();
                                } 
                                 else {
                                    echo render_eo_chat();
                                }
                                break;
                            case 'notice_board':
                              
                                    echo enigma_notice_board_page();
                                
                                break;
                // case 'timetable':
                //     echo render_su_p_timetable_management();
                //     break;
                case 'reports':
                    echo su_p_reports_dashboard_shortcode();
                    break;
                case 'notifications':
                    echo render_su_p_notifications();
                    break;
                    case 'subscription':
                        if ($action === 'add-subscription') {
                            echo render_enigma_add_subscription_form();
                        } 
                        elseif ($action === 'edit-subscription') {
                            echo render_enigma_edit_subscription_form();
                        } 
                        elseif ($action === 'delete-subscription') {
                            echo render_enigma_delete_subscription_form();
                        } 
                         else {
                            echo render_subscription_management();
                        }
                        break;  
                       case 'subscription_plans':
                            if ($action === 'add-subscription_plans') {
                                echo render_enigma_add_subscription_plan_form();
                            } 
                            elseif ($action === 'edit-subscription_plans') {
                                echo render_enigma_edit_subscription_plan_form();
                            } 
                            elseif ($action === 'delete-subscription_plans') {
                                echo render_enigma_delete_subscription_plan_form();
                            } 
                             else {
                                echo render_subscription_plans_page();
                            }
                            break;        
                       
                        case 'payment_methods':
                            if ($action === 'add-payment_methods') {
                                echo render_enigma_add_payment_method_form();
                            } 
                            elseif ($action === 'edit-payment_methods') {
                                echo render_enigma_edit_payment_method_form();
                            } 
                            elseif ($action === 'delete-payment_methods') {
                                echo render_enigma_delete_payment_method_form();
                            } 
                             else {
                                echo render_payment_methods_page();
                            }
                            break;        

                case 'settings':
                    echo render_su_p_settings();
                    break;
                case 'audit':
                    echo render_su_p_audit_logs();
                    break;
                case 'support':
                    echo render_su_p_support();
                    break;

                    case 'change_password':
                        echo render_change_password($current_user);
                       break;
                   
                default:
                    echo render_instituto_dashboard();
            }
            ?>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('su_p_dashboard', 'su_p_dashboard_shortcode');

// su_p Header
function render_su_p_header($su_p_user) {
    global $wpdb;
    $user_name = $su_p_user->display_name;
    $user_email = $su_p_user->user_email;
    $avatar_url =  plugin_dir_url(__FILE__) . '../logo instituto.jpg';

    $dashboard_link = esc_url(home_url('/su_p-dashboard'));
    $notifications_link = esc_url(home_url('/su_p-dashboard?section=notifications'));
    $settings_link = esc_url(home_url('/su_p-dashboard?section=change_password'));
    $logout_link = wp_logout_url(home_url()); // Assuming get_secure_logout_url_by_role() isn't defined yet
    $communication_link = esc_url(home_url('/su_p-dashboard?section=communication'));

    $seven_days_ago = date('Y-m-d H:i:s', strtotime('-7 days'));
    $notifications_table = $wpdb->prefix . 'aspire_announcements';
    $notifications_count = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $notifications_table WHERE receiver_id = 'su_p' AND timestamp > %s",
        $seven_days_ago
    ));

    $unread_notifications = $wpdb->get_results($wpdb->prepare(
        "SELECT sender_id, message, timestamp FROM $notifications_table WHERE receiver_id = 'su_p' AND timestamp > %s ORDER BY timestamp DESC LIMIT 5",
        $seven_days_ago
    ));

    // Messages count and data (assuming su_p receives system-wide messages)
    $messages_table = $wpdb->prefix . 'aspire_messages';
    $messages_count = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) 
         FROM $messages_table 
         WHERE (receiver_id = 'su_p' OR receiver_id = 'all') 
         AND status = 'sent' 
         AND timestamp > %s",
        $seven_days_ago
    ));

    $unread_messages = $wpdb->get_results($wpdb->prepare(
        "SELECT sender_id, message, timestamp 
         FROM $messages_table 
         WHERE (receiver_id = 'su_p' OR receiver_id = 'all') 
         AND status = 'sent' 
         AND timestamp > %s 
         ORDER BY timestamp DESC 
         LIMIT 5",
        $seven_days_ago
    ));

    ob_start();
    ?>
    <header class="su_p-header">
        <div class="header-container">
            <div class="header-left">
                <a href="<?php echo $dashboard_link; ?>" class="header-logo">
                    <img decoding="async" class="logo-image" src="<?php echo  esc_url($avatar_url); ?>" alt="su_p Logo">
                    <span class="logo-text">Super Admin</span>
                </a>
                <div class="header-search">
                    <input type="text" placeholder="Search" class="search-input" id="header-search-input" aria-label="Search">
                    <div class="search-dropdown" id="search-results">
                        <ul class="results-list" id="search-results-list"></ul>
                    </div>
                </div>
            </div>
            <div class="header-right">
                <nav class="header-nav">
                    <a href="<?php echo $dashboard_link; ?>" class="nav-item active">Dashboard</a>
                    <a href="<?php echo esc_url(home_url('/su_p-dashboard?section=centers')); ?>" class="nav-item">Centers</a>
                    <a href="<?php echo esc_url(home_url('/su_p-dashboard?section=users')); ?>" class="nav-item">Users</a>
                    <a href="<?php echo $communication_link; ?>" class="nav-item">Messages</a>
                </nav>
                <div class="header-actions">
                    <!-- Quick Links Dropdown -->
                    <div class="header-quick-links">
                        <a href="#" class="action-btn" id="quick-links-toggle">
                            <i class="fas fa-link fa-lg"></i>
                        </a>
                        <div class="dropdown quick-links-dropdown" id="quick-links-dropdown">
                            <div class="dropdown-header">
                                <span>Quick Links</span>
                            </div>
                            <ul class="dropdown-list">
                                <li><a href="<?php echo esc_url(home_url('/su_p-dashboard?section=reports')); ?>" class="dropdown-link">Reports</a></li>
                                <li><a href="<?php echo esc_url(home_url('/su_p-dashboard?section=audit')); ?>" class="dropdown-link">Audit Logs</a></li>
                                <li><a href="https://support.instituto.edu" target="_blank" class="dropdown-link">Support</a></li>
                            </ul>
                        </div>
                    </div>

                    <!-- Messages Dropdown -->
                    <div class="header-messages">
                        <a href="<?php echo $communication_link; ?>" class="action-btn" id="messages-toggle">
                            <i class="fas fa-envelope fa-lg"></i>
                            <span class="action-badge <?php echo $messages_count ? '' : 'd-none'; ?>" id="messages-count">
                                <?php echo esc_html($messages_count ?: 0); ?>
                            </span>
                        </a>
                        <div class="dropdown messages-dropdown" id="messages-dropdown">
                            <div class="dropdown-header">
                                <span>Messages (Last 7 Days)</span>
                            </div>
                            <ul class="dropdown-list">
                                <?php if (!empty($unread_messages)): ?>
                                    <?php foreach ($unread_messages as $msg): ?>
                                        <li>
                                            <span class="msg-content">
                                                <span class="msg-sender"><?php echo esc_html($msg->sender_id); ?></span>:
                                                <span class="msg-preview"><?php echo esc_html(wp_trim_words($msg->message, 5, '...')); ?></span>
                                            </span>
                                            <span class="msg-time"><?php echo esc_html(date('M d, Y', strtotime($msg->timestamp))); ?></span>
                                        </li>
                                    <?php endforeach; ?>
                                <?php else: ?>
                                    <li><span class="msg-preview">No new messages</span></li>
                                <?php endif; ?>
                            </ul>
                            <?php if (!empty($unread_messages)): ?>
                                <a href="<?php echo $communication_link; ?>" class="dropdown-footer">View All Messages</a>
                            <?php endif; ?>
                        </div>
                    </div>

                    <!-- Notifications Dropdown -->
                    <div class="header-notifications">
                        <a href="<?php echo $notifications_link; ?>" class="action-btn" id="notifications-toggle">
                            <i class="fas fa-bell fa-lg"></i>
                            <span class="action-badge <?php echo $notifications_count ? '' : 'd-none'; ?>" id="notifications-count">
                                <?php echo esc_html($notifications_count ?: 0); ?>
                            </span>
                        </a>
                        <div class="dropdown notifications-dropdown" id="notifications-dropdown">
                            <div class="dropdown-header">
                                <span>Notifications (Last 7 Days)</span>
                            </div>
                            <ul class="dropdown-list">
                                <?php if (!empty($unread_notifications)): ?>
                                    <?php foreach ($unread_notifications as $ann): ?>
                                        <li>
                                            <span class="msg-content">
                                                <span class="msg-sender"><?php echo esc_html($ann->sender_id); ?></span>:
                                                <span class="notif-text"><?php echo esc_html(wp_trim_words($ann->message, 5, '...')); ?></span>
                                            </span>
                                            <span class="notif-time"><?php echo esc_html(date('M d, Y', strtotime($ann->timestamp))); ?></span>
                                        </li>
                                    <?php endforeach; ?>
                                <?php else: ?>
                                    <li><span class="notif-text">No new notifications</span></li>
                                <?php endif; ?>
                            </ul>
                            <?php if (!empty($unread_notifications)): ?>
                                <a href="<?php echo $notifications_link; ?>" class="dropdown-footer">View All</a>
                            <?php endif; ?>
                        </div>
                    </div>

                    <!-- Settings -->
                    <div class="header-settings">
                        <a href="<?php echo $settings_link; ?>" class="action-btn" id="settings-toggle">
                            <i class="fas fa-cog fa-lg"></i>
                        </a>
                    </div>

                    <!-- Help/Support -->
                    <div class="header-help">
                        <a href="https://support.instituto.edu" target="_blank" class="action-btn" id="help-toggle">
                            <i class="fas fa-question-circle fa-lg"></i>
                        </a>
                    </div>

                    <!-- Dark Mode Toggle -->
                    <div class="header-dark-mode">
                        <button class="action-btn" id="dark-mode-toggle">
                            <i class="fas fa-moon fa-lg"></i>
                        </button>
                    </div>

                    <!-- Profile Dropdown -->
                    <div class="header-profile">
                        <div class="profile-toggle" id="profile-toggle">
                            <img decoding="async" src="<?php echo esc_url($avatar_url); ?>" alt="Profile" class="profile-img">
                            <i class="fas fa-caret-down profile-arrow"></i>
                        </div>
                        <div class="action-dropdown profile-dropdown" id="profile-dropdown">
                            <div class="profile-info">
                                <img decoding="async" src="<?php echo esc_url($avatar_url); ?>" alt="Profile" class="profile-img-large">
                                <div>
                                    <span class="profile-name"><?php echo esc_html($user_name); ?></span><br>
                                    <span class="profile-email"><?php echo esc_html($user_email); ?></span>
                                </div>
                            </div>
                            <ul class="dropdown-list">
                                <li><a href="<?php echo $settings_link; ?>" class="profile-link">Change Password</a></li>
                                <li><a href="<?php echo $logout_link; ?>" class="profile-link logout">Logout</a></li>
                            </ul>
                        </div>
                    </div>

                    <button class="nav-toggle" id="nav-toggle" aria-label="Toggle Navigation">
                        <i class="fas fa-bars"></i>
                    </button>
                </div>
            </div>
        </div>
    </header>
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        const fontAwesomeLink = document.createElement('link');
        fontAwesomeLink.rel = 'stylesheet';
        fontAwesomeLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css';
        fontAwesomeLink.crossOrigin = 'anonymous';
        fontAwesomeLink.onload = () => console.log('Font Awesome loaded');
        fontAwesomeLink.onerror = () => console.error('Failed to load Font Awesome');
        document.head.appendChild(fontAwesomeLink);

        const searchInput = document.getElementById('header-search-input');
        const searchResults = document.getElementById('search-results');
        const navToggle = document.getElementById('nav-toggle');
        const headerNav = document.querySelector('.header-nav');
        const messagesToggle = document.getElementById('messages-toggle');
        const messagesDropdown = document.getElementById('messages-dropdown');
        const notificationsToggle = document.getElementById('notifications-toggle');
        const notificationsDropdown = document.getElementById('notifications-dropdown');
        const quickLinksToggle = document.getElementById('quick-links-toggle');
        const quickLinksDropdown = document.getElementById('quick-links-dropdown');
        const settingsToggle = document.getElementById('settings-toggle');
        const helpToggle = document.getElementById('help-toggle');
        const darkModeToggle = document.getElementById('dark-mode-toggle');
        const profileToggle = document.getElementById('profile-toggle');
        const profileDropdown = document.getElementById('profile-dropdown');

        let activeDropdown = null;

        function toggleDropdown(toggle, dropdown, isLink = false) {
            toggle.addEventListener('mouseenter', () => {
                closeAllDropdowns();
                dropdown.classList.add('visible');
                activeDropdown = dropdown;
            });

            dropdown.addEventListener('mouseenter', () => {
                dropdown.classList.add('visible');
                activeDropdown = dropdown;
            });

            toggle.addEventListener('mouseleave', () => {
                dropdown.addEventListener('mouseleave', () => {
                    dropdown.classList.remove('visible');
                    activeDropdown = null;
                });
            });

            if (!isLink) {
                toggle.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    if (dropdown.classList.contains('visible')) {
                        dropdown.classList.remove('visible');
                        activeDropdown = null;
                    } else {
                        closeAllDropdowns();
                        dropdown.classList.add('visible');
                        activeDropdown = dropdown;
                    }
                });
            }
        }

        function closeAllDropdowns() {
            [messagesDropdown, notificationsDropdown, quickLinksDropdown, profileDropdown, searchResults].forEach(dropdown => {
                if (dropdown) dropdown.classList.remove('visible');
            });
            activeDropdown = null;
        }

        if (searchInput && searchResults) {
            let debounceTimer;
            searchInput.addEventListener('input', function() {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => {
                    const query = this.value.trim();
                    if (query.length < 2) {
                        searchResults.classList.remove('visible');
                        return;
                    }

                    searchResults.querySelector('.results-list').innerHTML = '<li>Loading...</li>';
                    searchResults.classList.add('visible');

                    fetch('<?php echo admin_url('admin-ajax.php'); ?>', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({
                            action: 'search_su_p_sections',
                            query: query
                        }).toString()
                    })
                    .then(response => response.json())
                    .then(data => {
                        const resultsList = searchResults.querySelector('.results-list');
                        resultsList.innerHTML = '';
                        if (data.success && data.data.length > 0) {
                            data.data.forEach(item => {
                                resultsList.innerHTML += `<li><a href="${item.url}">${item.title}</a></li>`;
                            });
                        } else {
                            resultsList.innerHTML = '<li>No results found</li>';
                        }
                    })
                    .catch(error => {
                        console.error('Search error:', error);
                        searchResults.querySelector('.results-list').innerHTML = '<li>Error fetching results</li>';
                    });
                }, 150);
            });
        }

        if (navToggle && headerNav) {
            navToggle.addEventListener('click', () => {
                headerNav.classList.toggle('visible');
            });
        }

        if (messagesToggle && messagesDropdown) {
            toggleDropdown(messagesToggle, messagesDropdown, true);
        }

        if (notificationsToggle && notificationsDropdown) {
            toggleDropdown(notificationsToggle, notificationsDropdown, true);
        }

        if (quickLinksToggle && quickLinksDropdown) {
            toggleDropdown(quickLinksToggle, quickLinksDropdown);
        }

        if (darkModeToggle) {
            darkModeToggle.addEventListener('click', () => {
                document.body.classList.toggle('dark-mode');
                const isDark = document.body.classList.contains('dark-mode');
                darkModeToggle.querySelector('i').classList.toggle('fa-moon', !isDark);
                darkModeToggle.querySelector('i').classList.toggle('fa-sun', isDark);
            });
        }

        if (profileToggle && profileDropdown) {
            toggleDropdown(profileToggle, profileDropdown);
        }

        document.addEventListener('click', (e) => {
            if (searchInput && searchResults && !searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                searchResults.classList.remove('visible');
            }
            if (activeDropdown && !activeDropdown.contains(e.target) && !e.target.closest('.action-btn, .profile-toggle')) {
                activeDropdown.classList.remove('visible');
                activeDropdown = null;
            }
        });
    });

    jQuery(document).ready(function($) {
        $('a[href*="section=communication"]').on('click', function(e) {
            e.preventDefault();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'aspire_su_p_mark_messages_read',
                    nonce: '<?php echo wp_create_nonce('aspire_su_p_header_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $('#messages-count').text('0').addClass('d-none');
                        $('#messages-dropdown .dropdown-list').html('<li><span class="msg-preview">No new messages</span></li>');
                        $('#messages-dropdown .dropdown-footer').remove();
                        window.location.href = '<?php echo $communication_link; ?>';
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error marking messages as read:', error);
                }
            });
        });

        $('a[href*="section=notifications"]').on('click', function(e) {
            e.preventDefault();
            $('#notifications-count').text('0').addClass('d-none');
            $('#notifications-dropdown .dropdown-list').html('<li><span class="notif-text">No new notifications</span></li>');
            $('#notifications-dropdown .dropdown-footer').remove();
            window.location.href = '<?php echo $notifications_link; ?>';
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Search
add_action('wp_ajax_search_su_p_sections', 'search_su_p_sections_callback');
function search_su_p_sections_callback() {
    $query = isset($_POST['query']) ? sanitize_text_field($_POST['query']) : '';
    $sections = [
        ['title' => 'Dashboard', 'url' => esc_url(home_url('/su_p-dashboard')), 'keywords' => ['dashboard', 'home']],
        ['title' => 'Centers', 'url' => esc_url(home_url('/su_p-dashboard?section=centers')), 'keywords' => ['centers', 'institutes']],
        ['title' => 'Users', 'url' => esc_url(home_url('/su_p-dashboard?section=users')), 'keywords' => ['users', 'accounts']],
        ['title' => 'Messages', 'url' => esc_url(home_url('/su_p-dashboard?section=communication')), 'keywords' => ['messages', 'communication']],
        ['title' => 'Notifications', 'url' => esc_url(home_url('/su_p-dashboard?section=notifications')), 'keywords' => ['notifications', 'alerts']],
        ['title' => 'Reports', 'url' => esc_url(home_url('/su_p-dashboard?section=reports')), 'keywords' => ['reports', 'analytics']],
        ['title' => 'Settings', 'url' => esc_url(home_url('/su_p-dashboard?section=settings')), 'keywords' => ['settings', 'configuration']]
    ];

    $results = [];
    if (!empty($query)) {
        foreach ($sections as $section) {
            if (stripos($section['title'], $query) !== false || array_reduce($section['keywords'], fn($carry, $kw) => $carry || stripos($kw, $query) !== false, false)) {
                $results[] = ['title' => $section['title'], 'url' => $section['url']];
            }
        }
    }
    wp_send_json_success($results);
    wp_die();
}

// AJAX Handler for Marking Messages Read
add_action('wp_ajax_aspire_su_p_mark_messages_read', 'aspire_su_p_mark_messages_read');
function aspire_su_p_mark_messages_read() {
    check_ajax_referer('aspire_su_p_header_nonce', 'nonce');

    global $wpdb;
    $seven_days_ago = date('Y-m-d H:i:s', strtotime('-7 days'));
    $messages_table = $wpdb->prefix . 'aspire_messages';
    $wpdb->query($wpdb->prepare(
        "UPDATE $messages_table 
         SET status = 'read' 
         WHERE (receiver_id = 'su_p' OR receiver_id = 'all') 
         AND status = 'sent' 
         AND timestamp > %s",
        $seven_days_ago
    ));

    wp_send_json_success();
    wp_die();
}

// Overview Section
function render_instituto_dashboard() {
    global $wpdb;

    // Fetch educational centers with their custom education_center_id
    $centers = $wpdb->get_results("SELECT ID, post_title FROM {$wpdb->posts} WHERE post_type = 'educational-center' AND post_status = 'publish'");
    ob_start();
    ?>
    <div class="wrap instituto-dashboard">
        <!-- Loader -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>

        <!-- Header -->
        <div class="dashboard-header">
            <h1 class="dashboard-title">Instituto Dashboard</h1>
            <p class="dashboard-subtitle">Your Educational Insights</p>
            <select id="center-selector" class="center-dropdown">
                <option value="">All Centers</option>
                <?php foreach ($centers as $center) : 
                    $education_center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID; // Fallback to post ID if meta not set
                ?>
                    <option value="<?php echo esc_attr($education_center_id); ?>"><?php echo esc_html($center->post_title); ?></option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- Dashboard Content -->
        <div id="dashboard-content">
            <!-- Quick Stats -->
            <div class="stats-grid" id="stats-grid"></div>

            <!-- Financial Overview -->
            <div class="financial-overview">
                <h2 class="section-title">Financial Snapshot</h2>
                <div class="snapshot-grid" id="snapshot-grid"></div>
            </div>

            <!-- Operational Insights -->
            <div class="operational-insights">
                <h2 class="section-title">Operational Insights</h2>
                <div class="insights-grid" id="insights-grid"></div>
            </div>

            <!-- Quick Links -->
            <div class="quick-links">
                <a href="<?php echo admin_url('admin.php?page=reports'); ?>" class="btn">Reports</a>
                <a href="<?php echo admin_url('admin.php?page=transport_fees'); ?>" class="btn">Transport</a>
                <a href="<?php echo admin_url('admin.php?page=exams'); ?>" class="btn">Exams</a>
            </div>
        </div>
    </div>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const nonce = '<?php echo wp_create_nonce('instituto_dashboard_nonce'); ?>';
        let charts = {};

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function destroyCharts() {
            Object.values(charts).forEach(chart => chart.destroy());
            charts = {};
        }

        function updateDashboard(centerId) {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'fetch_instituto_dashboard_data',
                    center_id: centerId,
                    nonce: nonce
                },
                dataType: 'json',
                success: function(response) {
                    console.log('AJAX Response:', response);
                    if (response.success) {
                        $('#stats-grid').html(response.data.stats_html || '<p>No stats data</p>');
                        $('#snapshot-grid').html(response.data.snapshot_html || '<p>No financial data</p>');
                        $('#insights-grid').html(response.data.insights_html || '<p>No insights data</p>');

                        destroyCharts();

                        const chartConfigs = [
                            { id: 'revenueChart', type: 'bar', labels: ['Fees', 'Transport'], data: [response.data.paid_fees || 0, response.data.paid_transport_fees || 0], label: 'Revenue' },
                            { id: 'feesChart', type: 'doughnut', labels: ['Paid', 'Unpaid'], data: [response.data.paid_fees || 0, response.data.unpaid_fees || 0], label: 'Fees' },
                            { id: 'transportChart', type: 'doughnut', labels: ['Paid', 'Unpaid'], data: [response.data.paid_transport_fees || 0, response.data.unpaid_transport_fees || 0], label: 'Transport' },
                            { id: 'attendanceChart', type: 'bar', labels: ['Teachers', 'Students'], data: [response.data.teacher_attendance || 0, response.data.student_attendance || 0], label: 'Attendance' },
                            { id: 'examsChart', type: 'bar', labels: ['Avg. Marks'], data: [response.data.avg_marks || 0], label: 'Exams' }
                        ];

                        chartConfigs.forEach(config => {
                            const canvas = document.getElementById(config.id);
                            if (canvas) {
                                const ctx = canvas.getContext('2d');
                                charts[config.id] = new Chart(ctx, {
                                    type: config.type,
                                    data: {
                                        labels: config.labels,
                                        datasets: [{
                                            label: config.label,
                                            data: config.data,
                                            backgroundColor: config.type === 'doughnut' ? ['var(--success-bg)', 'var(--error-bg)'] : 'var(--primary-color)',
                                            borderColor: config.type === 'doughnut' ? ['var(--success)', 'var(--error)'] : 'var(--primary-dark)',
                                            borderWidth: 1
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: true,
                                        aspectRatio: 2,
                                        scales: config.type === 'bar' ? { y: { beginAtZero: true } } : {},
                                        plugins: {
                                            legend: { position: 'bottom', labels: { font: { size: 12 } } },
                                            tooltip: { enabled: true }
                                        }
                                    }
                                });
                            } else {
                                console.error(`Canvas #${config.id} not found`);
                            }
                        });
                    } else {
                        console.error('Response not successful:', response.data.message);
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                    hideLoader();
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', status, error, 'Response Text:', xhr.responseText);
                    alert('Failed to fetch dashboard data. Check console for details.');
                    hideLoader();
                }
            });
        }

        updateDashboard('');
        $('#center-selector').on('change', function() {
            updateDashboard($(this).val());
        });
    });
    </script>
    <?php
    wp_enqueue_style('instituto-dashboard-style', plugin_dir_url(__FILE__) . 'instituto_dashboard.css');
    return ob_get_clean();
}

// AJAX Handler
add_action('wp_ajax_fetch_instituto_dashboard_data', 'fetch_instituto_dashboard_data');
function fetch_instituto_dashboard_data() {
    global $wpdb;
    while (ob_get_level() > 0) {
        ob_end_clean();
    }
    $wpdb->suppress_errors(true);

    check_ajax_referer('instituto_dashboard_nonce', 'nonce');

    $center_id = !empty($_POST['center_id']) ? sanitize_text_field($_POST['center_id']) : '';
    $where_args = [];
    if ($center_id) {
        $where_args['education_center_id'] = $center_id;
    }

    // Helper function to build WHERE clause
    function build_where_clause($base_query, $args) {
        global $wpdb;
        $where = " WHERE 1=1";
        $params = [];
        foreach ($args as $key => $value) {
            $where .= " AND $key = %s";
            $params[] = $value;
        }
        $query = !empty($params) ? $wpdb->prepare($base_query . $where, $params) : $base_query . $where;
        error_log("Query: $query"); // Debug: Log each query
        return $query;
    }

 // Counts (Modified to use post types and custom field)
// Counts (Using get_posts with meta_query)
if ($center_id) {
    $centers_count = 1;
} else {
    $centers = get_posts([
        'post_type' => 'educational-center',
        'post_status' => 'publish',
        'numberposts' => -1 // Get all posts
    ]);
    $centers_count = count($centers);
}

if ($center_id) {
    $teachers = get_posts([
        'post_type' => 'teacher',
        'post_status' => 'publish',
        'numberposts' => -1,
        'meta_query' => [
            [
                'key' => 'educational_center_id',
                'value' => $center_id,
                'compare' => '='
            ]
        ]
    ]);
    $teachers_count = count($teachers);
} else {
    $teachers = get_posts([
        'post_type' => 'teacher',
        'post_status' => 'publish',
        'numberposts' => -1
    ]);
    $teachers_count = count($teachers);
}

if ($center_id) {
    $students = get_posts([
        'post_type' => 'students',
        'post_status' => 'publish',
        'numberposts' => -1,
        'meta_query' => [
            [
                'key' => 'educational_center_id',
                'value' => $center_id,
                'compare' => '='
            ]
        ]
    ]);
    $students_count = count($students);
} else {
    $students = get_posts([
        'post_type' => 'students',
        'post_status' => 'publish',
        'numberposts' => -1
    ]);
    $students_count = count($students);
}

if ($center_id) {
    $parents = get_posts([
        'post_type' => 'parent',
        'post_status' => 'publish',
        'numberposts' => -1,
        'meta_query' => [
            [
                'key' => 'educational_center_id',
                'value' => $center_id,
                'compare' => '='
            ]
        ]
    ]);
    $parents_count = count($parents);
} else {
    $parents = get_posts([
        'post_type' => 'parent',
        'post_status' => 'publish',
        'numberposts' => -1
    ]);
    $parents_count = count($parents);
}

    $staff_count = $wpdb->get_var(build_where_clause("SELECT COUNT(*) FROM {$wpdb->prefix}staff", $where_args)) ?: 0;

    // Fees
    $total_fees = $wpdb->get_var(build_where_clause("SELECT SUM(amount) FROM {$wpdb->prefix}student_fees", $where_args)) ?: 0;
    $where_args['status'] = 'paid';
    $paid_fees = $wpdb->get_var(build_where_clause("SELECT SUM(amount) FROM {$wpdb->prefix}student_fees", $where_args)) ?: 0;
    unset($where_args['status']);
    $unpaid_fees = $total_fees - $paid_fees;

    // Transport Fees
    $total_transport_fees = $wpdb->get_var(build_where_clause("SELECT SUM(amount) FROM {$wpdb->prefix}transport_fees", $where_args)) ?: 0;
    $where_args['status'] = 'paid';
    $paid_transport_fees = $wpdb->get_var(build_where_clause("SELECT SUM(amount) FROM {$wpdb->prefix}transport_fees", $where_args)) ?: 0;
    unset($where_args['status']);
    $unpaid_transport_fees = $total_transport_fees - $paid_transport_fees;

    $total_revenue = $paid_fees + $paid_transport_fees;
    $total_salaries = ($wpdb->get_var(build_where_clause("SELECT SUM(salary_base) FROM {$wpdb->prefix}staff", $where_args)) ?: 0) * 12;

    // Exams
    $exams_count = $wpdb->get_var(build_where_clause("SELECT COUNT(*) FROM {$wpdb->prefix}exams", $where_args)) ?: 0;
    $avg_marks = $wpdb->get_var(build_where_clause("SELECT AVG(marks) FROM {$wpdb->prefix}exam_results", $where_args)) ?: 0;

    // Attendance
    $teacher_where = $where_args;
    $teacher_where['status'] = 'Present';
    $teacher_where['date >='] = 'DATE_SUB(CURDATE(), INTERVAL 30 DAY)';
    $teacher_attendance = $wpdb->get_var(build_where_clause("SELECT COUNT(*) FROM {$wpdb->prefix}staff_attendance", $teacher_where)) ?: 0;

    $student_where = $where_args;
    $student_where['status'] = 'Present';
    $student_where['date >='] = 'DATE_SUB(CURDATE(), INTERVAL 30 DAY)';
    $student_attendance = $wpdb->get_var(build_where_clause("SELECT COUNT(*) FROM {$wpdb->prefix}student_attendance", $student_where)) ?: 0;

    // Resources
    $inventory_where = $where_args;
    $inventory_where['quantity <='] = 'low_stock_threshold';
    $inventory_where['status'] = 'Available';
    $low_stock_items = $wpdb->get_var(build_where_clause("SELECT COUNT(*) FROM {$wpdb->prefix}inventory", $inventory_where)) ?: 0;

    if ($center_id) {
        $overdue_books = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$wpdb->prefix}library_transactions lt
             JOIN {$wpdb->prefix}library l ON lt.book_id = l.book_id
             WHERE l.education_center_id = %s AND lt.return_date IS NULL AND lt.due_date < CURDATE()",
            $center_id
        )) ?: 0;
    } else {
        $overdue_books = $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}library_transactions WHERE return_date IS NULL AND due_date < CURDATE()") ?: 0;
    }

    // Debug: Log all calculated values
    error_log("Center ID: $center_id");
    error_log("Centers: $centers_count, Teachers: $teachers_count, Students: $students_count, Parents: $parents_count, Staff: $staff_count");
    error_log("Total Fees: $total_fees, Paid Fees: $paid_fees, Unpaid Fees: $unpaid_fees");
    error_log("Total Transport: $total_transport_fees, Paid Transport: $paid_transport_fees, Unpaid Transport: $unpaid_transport_fees");
    error_log("Revenue: $total_revenue, Salaries: $total_salaries");
    error_log("Exams: $exams_count, Avg Marks: $avg_marks");
    error_log("Teacher Attendance: $teacher_attendance, Student Attendance: $student_attendance");
    error_log("Low Stock: $low_stock_items, Overdue Books: $overdue_books");

    // HTML Output
    ob_start();
    ?>
    <div class="stat-card" data-tooltip="Educational Centers"><span class="dashicons dashicons-building"></span><p><?php echo esc_html($centers_count); ?></p><h3>Centers</h3></div>
    <div class="stat-card" data-tooltip="Total Teachers"><span class="dashicons dashicons-groups"></span><p><?php echo esc_html($teachers_count); ?></p><h3>Teachers</h3></div>
    <div class="stat-card" data-tooltip="Total Students"><span class="dashicons dashicons-admin-users"></span><p><?php echo esc_html($students_count); ?></p><h3>Students</h3></div>
    <div class="stat-card" data-tooltip="Total Parents"><span class="dashicons dashicons-networking"></span><p><?php echo esc_html($parents_count); ?></p><h3>Parents</h3></div>
    <div class="stat-card" data-tooltip="Total Staff"><span class="dashicons dashicons-businessperson"></span><p><?php echo esc_html($staff_count); ?></p><h3>Staff</h3></div>
    <?php
    $stats_html = ob_get_clean();

    ob_start();
    ?>
    <div class="snapshot-card">
        <h3>Revenue</h3><p class="highlight">$<?php echo number_format($total_revenue, 2); ?></p>
        <div class="chart-container"><canvas id="revenueChart"></canvas></div>
    </div>
    <div class="snapshot-card">
        <h3>Fees</h3><p>Total: $<?php echo number_format($total_fees, 2); ?></p><p class="success">Paid: $<?php echo number_format($paid_fees, 2); ?></p><p class="error">Unpaid: $<?php echo number_format($unpaid_fees, 2); ?></p>
        <div class="chart-container"><canvas id="feesChart"></canvas></div>
    </div>
    <div class="snapshot-card">
        <h3>Transport Fees</h3><p>Total: $<?php echo number_format($total_transport_fees, 2); ?></p><p class="success">Paid: $<?php echo number_format($paid_transport_fees, 2); ?></p><p class="error">Unpaid: $<?php echo number_format($unpaid_transport_fees, 2); ?></p>
        <div class="chart-container"><canvas id="transportChart"></canvas></div>
    </div>
    <div class="snapshot-card">
        <h3>Salaries (Annual)</h3><p class="highlight">$<?php echo number_format($total_salaries, 2); ?></p>
    </div>
    <?php
    $snapshot_html = ob_get_clean();

    ob_start();
    ?>
    <div class="insight-card">
        <h3>Exams</h3><p>Total: <?php echo esc_html($exams_count); ?></p><p>Avg. Marks: <?php echo number_format($avg_marks, 2); ?></p>
        <div class="chart-container"><canvas id="examsChart"></canvas></div>
    </div>
    <div class="insight-card">
        <h3>Attendance (30 Days)</h3><p>Teachers: <?php echo esc_html($teacher_attendance); ?></p><p>Students: <?php echo esc_html($student_attendance); ?></p>
        <div class="chart-container"><canvas id="attendanceChart"></canvas></div>
    </div>
    <div class="insight-card">
        <h3>Resources</h3><p>Low Stock: <?php echo esc_html($low_stock_items); ?></p><p>Overdue Books: <?php echo esc_html($overdue_books); ?></p>
    </div>
    <?php
    $insights_html = ob_get_clean();

    $last_error = $wpdb->last_error;
    $wpdb->suppress_errors(false);

    header('Content-Type: application/json');
    if ($last_error) {
        wp_send_json_error(['message' => 'Database error: ' . $last_error]);
    } else {
        wp_send_json_success([
            'stats_html' => $stats_html,
            'snapshot_html' => $snapshot_html,
            'insights_html' => $insights_html,
            'paid_fees' => $paid_fees,
            'paid_transport_fees' => $paid_transport_fees,
            'unpaid_fees' => $unpaid_fees,
            'unpaid_transport_fees' => $unpaid_transport_fees,
            'teacher_attendance' => $teacher_attendance,
            'student_attendance' => $student_attendance,
            'avg_marks' => $avg_marks
        ]);
    }
    exit;
}


// Educational Centers Management
function render_su_p_centers() {
    global $wpdb;
    ob_start();
    ?>
    <div class="edu-centers-container" style="margin-top: 80px;">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2 class="edu-centers-title">Educational Centers Management</h2>
        <div class="edu-centers-actions">
            <button class="edu-button edu-button-primary" id="add-center-btn">Add New Center</button>
            <input type="text" id="center-search" class="edu-search-input" placeholder="Search Centers..." style="margin-left: 20px; padding: 8px; width: 300px;">
        </div>
        <div class="edu-pagination" style="margin: 20px 0;">
            <label for="centers-per-page">Show:</label>
            <select id="centers-per-page" class="edu-select" style="margin-right: 20px;">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
            <button class="edu-button edu-button-nav" id="prev-page" disabled>Previous</button>
            <span id="page-info" style="margin: 0 10px;"></span>
            <button class="edu-button edu-button-nav" id="next-page">Next</button>
        </div>
        <div class="edu-table-wrapper">
            <div class="export-tools" id="export-tools" style="margin-bottom: 10px;"></div>
            <table class="edu-table" id="centers-table">
                <thead>
                    <tr>
                        <th>Educational Center ID</th>
                        <th>Name</th>
                        <th>Admin ID</th>
                        <th>Logo</th>
                        <th>Location</th>
                        <th>Mobile</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="centers-table-body">
                    <!-- Populated via AJAX -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Center Modal -->
    <div class="edu-modal" id="add-center-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-center-modal">×</span>
            <h3>Add New Center</h3>
            <form id="add-center-form" class="edu-form">
                <div class="edu-form-group">
                    <label class="edu-form-label" for="center-name">Center Name</label>
                    <input type="text" class="edu-form-input" id="center-name" name="center_name" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="center-admin-id">Admin ID</label>
                    <input type="text" class="edu-form-input" id="center-admin-id" name="admin_id" readonly placeholder="Assigned when adding new admin">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="center-edu-id">Educational Center ID</label>
                    <input type="text" class="edu-form-input" id="center-edu-id" name="educational_center_id" readonly placeholder="Generated on save">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="center-logo">Institute Logo</label>
                    <input type="file" class="edu-form-input" id="center-logo" name="institute_logo" accept="image/*">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="center-location">Location</label>
                    <input type="text" class="edu-form-input" id="center-location" name="location">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="center-mobile">Mobile Number</label>
                    <input type="number" class="edu-form-input" id="center-mobile" name="mobile_number" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="center-email">Email ID</label>
                    <input type="email" class="edu-form-input" id="center-email" name="email_id" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_center_nonce'); ?>">
                <button type="button" class="edu-button edu-button-primary" id="save-center">Save Center</button>
            </form>
            <div class="edu-form-message" id="add-center-message"></div>
        </div>
    </div>

    <!-- Edit Center Modal -->
    <div class="edu-modal" id="edit-center-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-center-modal">×</span>
            <h3>Edit Center</h3>
            <form id="edit-center-form" class="edu-form">
                <input type="hidden" id="edit-center-id" name="center_id">
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-center-name">Center Name</label>
                    <input type="text" class="edu-form-input" id="edit-center-name" name="center_name" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-center-admin-id">Admin ID</label>
                    <input type="text" class="edu-form-input" id="edit-center-admin-id" name="admin_id" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-center-edu-id">Educational Center ID</label>
                    <input type="text" class="edu-form-input" id="edit-center-edu-id" name="educational_center_id" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-center-logo">Institute Logo</label>
                    <input type="file" class="edu-form-input" id="edit-center-logo" name="institute_logo" accept="image/*">
                    <img id="edit-center-logo-preview" src="" alt="Current Logo" class="edu-logo-preview" style="display: none;">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-center-location">Location</label>
                    <input type="text" class="edu-form-input" id="edit-center-location" name="location">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-center-mobile">Mobile Number</label>
                    <input type="number" class="edu-form-input" id="edit-center-mobile" name="mobile_number" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-center-email">Email ID</label>
                    <input type="email" class="edu-form-input" id="edit-center-email" name="email_id" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_center_nonce'); ?>">
                <button type="button" class="edu-button edu-button-primary" id="update-center">Update Center</button>
            </form>
            <div class="edu-form-message" id="edit-center-message"></div>
        </div>
    </div>

    <!-- Change Password Modal -->
    <div class="edu-modal" id="change-password-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="change-password-modal">×</span>
            <h3>Change Institute Admin Password</h3>
            <form id="change-password-form" class="edu-form">
                <input type="hidden" id="change-center-id" name="center_id">
                <p>Send a password reset email to the institute admin.</p>
                <button type="button" class="edu-button edu-button-primary" id="send-reset-link">Send Reset Link</button>
            </form>
            <div class="edu-form-message" id="change-password-message"></div>
        </div>
    </div>

    <!-- Add New Admin Modal -->
    <div class="edu-modal" id="add-new-admin-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-new-admin-modal">×</span>
            <h3>Add New Institute Admin</h3>
            <form id="add-new-admin-form" class="edu-form">
                <input type="hidden" id="new-admin-center-id" name="center_id">
                <input type="hidden" id="new-admin-educational-center-id" name="educational_center_id">
                <div class="edu-form-group">
                    <label class="edu-form-label" for="new-admin-id">Admin ID</label>
                    <input type="text" class="edu-form-input" id="new-admin-id" name="admin_id" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="new-admin-name">Admin Name</label>
                    <input type="text" class="edu-form-input" id="new-admin-name" name="admin_name" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="new-admin-email">Email ID</label>
                    <input type="email" class="edu-form-input" id="new-admin-email" name="email_id" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="new-admin-password">Password</label>
                    <input type="password" class="edu-form-input" id="new-admin-password" name="password" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="new-admin-mobile">Mobile Number</label>
                    <input type="number" class="edu-form-input" id="new-admin-mobile" name="mobile_number" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_center_nonce'); ?>">
                <button type="button" class="edu-button edu-button-primary" id="save-new-admin">Save New Admin</button>
            </form>
            <div class="edu-form-message" id="add-new-admin-message"></div>
        </div>
    </div>

    <!-- Dependencies -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <script>
    jQuery(document).ready(function($) {
        let currentPage = 1;
        let perPage = 10;
        let searchQuery = '';

        function showLoader() {
            $('#edu-loader').show();
        }
        function hideLoader() {
            $('#edu-loader').hide();
        }

        function openModal(modalId) {
            showLoader();
            $(modalId).css('display', 'block');
            setTimeout(hideLoader, 100);
        }
        function closeModal(modalId) {
            $(modalId).css('display', 'none');
            $(modalId + ' .edu-form-message').removeClass('edu-success edu-error').text('');
            hideLoader();
        }

        function getTableData() {
            const table = $('#centers-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim()).slice(0, -1); // Exclude Actions
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {
                const cells = Array.from(row.querySelectorAll('td')).slice(0, -1); // Exclude Actions
                return cells.map(td => td.textContent.trim());
            });
            return [headers, ...rows];
        }

        function exportToCSV() {
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `centers_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
        }

        function exportToExcel() {
            if (!window.XLSX) {
                console.error('XLSX library not loaded');
                return;
            }
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Centers');
            XLSX.writeFile(wb, `centers_${new Date().toISOString().slice(0,10)}.xlsx`);
        }
        function generatePDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF({ unit: 'mm', format: 'a4' });
    const data = getTableData();
    const instituteName = 'Istituto';
    const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo instituto.jpg'); ?>'; // Your logo path
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 10;
    const borderColor = [70, 131, 180]; // #4683b4

    // Page border
    doc.setDrawColor(...borderColor);
    doc.setLineWidth(1);
    doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);

    // Header
    if (instituteLogo) {
        try {
            doc.addImage(instituteLogo, 'JPEG', (pageWidth - 24) / 2, 15, 24, 24); // Changed to 'JPEG' for .jpg
        } catch (e) {
            console.log('Logo loading failed:', e);
            doc.setFontSize(10);
            doc.text('No logo available', (pageWidth - 20) / 2, 20, { align: 'center' });
        }
    }
    doc.setFontSize(18);
    doc.setTextColor(...borderColor);
    doc.text(instituteName.toUpperCase(), pageWidth / 2, 45, { align: 'center' });
    doc.setFontSize(12);
    doc.setTextColor(102); // #666
    doc.text('Educational Centers List', pageWidth / 2, 55, { align: 'center' });
    doc.setDrawColor(...borderColor);
    doc.line(margin + 5, 60, pageWidth - margin - 5, 60);

    // Details
    const details = [
        ['Date', new Date().toLocaleDateString()],
        ['Total Centers', String(data.length - 1)]
    ];
    let y = 70;
    details.forEach(([label, value]) => {
        doc.setFillColor(245, 245, 245); // #f5f5f5
        doc.rect(margin + 5, y, 50, 6, 'F');
        doc.setTextColor(...borderColor);
        doc.setFont('helvetica', 'bold');
        doc.text(label, margin + 7, y + 4);
        doc.setTextColor(51); // #333
        doc.setFont('helvetica', 'normal');
        doc.text(String(value), margin + 60, y + 4);
        y += 6;
    });

    // Table
    if (typeof doc.autoTable === 'function' && data.length > 1) {
        doc.autoTable({
            startY: y + 10,
            head: [data[0]],
            body: data.slice(1),
            theme: 'striped',
            styles: {
                fontSize: 11,
                cellPadding: 2,
                overflow: 'linebreak',
                halign: 'center',
                textColor: [51, 51, 51]
            },
            headStyles: {
                fillColor: borderColor,
                textColor: [255, 255, 255],
                fontStyle: 'bold'
            },
            alternateRowStyles: { fillColor: [249, 249, 249] }
        });

        // Footer
        const finalY = doc.lastAutoTable.finalY || y + 10;
        doc.setFontSize(9);
        doc.setTextColor(102); // #666
        doc.text(`This is an Online Generated Centers List issued by ${instituteName}`, pageWidth / 2, finalY + 20, { align: 'center' });
        doc.text(`Generated on ${new Date().toISOString().slice(0, 10)}`, pageWidth / 2, finalY + 25, { align: 'center' });
        doc.text('___________________________', pageWidth / 2, finalY + 35, { align: 'center' });
        doc.text('Registrar / Authorized Signatory', pageWidth / 2, finalY + 40, { align: 'center' });
        doc.text('Managed by Instituto Educational Center Management System', pageWidth / 2, finalY + 45, { align: 'center' });

        doc.save(`centers_${new Date().toISOString().slice(0,10)}.pdf`);
    } else {
        console.error('jsPDF autoTable plugin not loaded or no data');
        alert('PDF generation failed');
    }
    }
    function printCenters() {
    const printWindow = window.open('', '_blank');
    const data = getTableData();
    const instituteName = 'Istituto';
    const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . '/../logo instituto.jpg'); ?>'; // Your logo path

    printWindow.document.write(`
        <html>
        <head>
            <title>Educational Centers List</title>
            <style>
                @media print {
                    body { 
                        font-family: Helvetica, sans-serif; 
                        margin: 10mm; 
                        width: 190mm;
                    }
                    .page { 
                        border: 4px solid #4683b4; 
                        padding: 5mm; 
                        box-sizing: border-box; 
                        width: 100%; 
                        max-width: 190mm;
                    }
                    .header { 
                        text-align: center; 
                        border-bottom: 2px solid #4683b4; 
                        margin-bottom: 10mm; 
                    }
                    .header img { 
                        width: 60px; 
                        height: 60px; 
                        margin-bottom: 5mm; 
                    }
                    .header h1 { 
                        font-size: 18pt; 
                        color: #4683b4; 
                        margin: 0; 
                        text-transform: uppercase; 
                    }
                    .header .subtitle { 
                        font-size: 12pt; 
                        color: #666; 
                        margin: 0; 
                    }
                    table { 
                        width: 100%; 
                        max-width: 100%; 
                        border-collapse: collapse; 
                        margin: 10mm 0; 
                        table-layout: fixed;
                    }
                    th, td { 
                        border: 1px solid #e5e5e5; 
                        padding: 8px; 
                        text-align: center; 
                        word-wrap: break-word; 
                        font-size: 10pt;
                    }
                    th { 
                        background: #4683b4; 
                        color: white; 
                        font-weight: bold; 
                    }
                    tr:nth-child(even) { 
                        background: #f9f9f9; 
                    }
                    .footer { 
                        text-align: center; 
                        font-size: 9pt; 
                        color: #666; 
                        margin-top: 10mm; 
                    }
                    @page { 
                        size: A4; 
                        margin: 10mm;
                    }
                }
            </style>
        </head>
        <body>
            <div class="page">
                <div class="header">
                    ${instituteLogo ? `<img src="${instituteLogo}" alt="Logo" onerror="this.style.display='none';this.nextSibling.style.display='block';"><p style="display:none;"></p>` : '<p></p>'}
                    <h1>${instituteName.toUpperCase()}</h1>
                    <p class="subtitle">Educational Centers List</p>
                </div>
                <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                <p><strong>Total Centers:</strong> ${data.length - 1}</p>
                <table>
                    <thead>
                        <tr>${data[0].map(header => `<th>${header}</th>`).join('')}</tr>
                    </thead>
                    <tbody>
                        ${data.slice(1).map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}
                    </tbody>
                </table>
                <div class="footer">
                    <p>This is an Online Generated Centers List issued by ${instituteName}</p>
                    <p>Generated on ${new Date().toISOString().slice(0, 10)}</p>
                    <p>___________________________</p>
                    <p>Registrar / Authorized Signatory</p>
                    <p>Managed by Instituto Educational Center Management System</p>
                </div>
            </div>
        </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    }
        function copyToClipboard() {
            const data = getTableData();
            const text = data.map(row => row.join('\t')).join('\n');
            navigator.clipboard.writeText(text).then(() => alert('Centers copied to clipboard!'));
        }

        function printCenters() {
    const printWindow = window.open('', '_blank');
    const data = getTableData();
    const instituteName = 'Instituto';
    const instituteLogo = '<?php echo esc_js(get_option('custom_logo_url', '')); ?>';

    printWindow.document.write(`
        <html>
        <head>
            <title>Educational Centers List</title>
            <style>
                @media print {
                    body { 
                        font-family: Helvetica, sans-serif; 
                        margin: 10mm; 
                        width: 190mm; /* Adjusted to fit A4 with margins */
                    }
                    .page { 
                        border: 4px solid #4683b4; 
                        padding: 5mm; 
                        box-sizing: border-box; 
                        width: 100%; 
                        max-width: 190mm; /* Matches body width */
                    }
                    .header { 
                        text-align: center; 
                        border-bottom: 2px solid #4683b4; 
                        margin-bottom: 10mm; 
                    }
                    .header img { 
                        width: 60px; 
                        height: 60px; 
                        margin-bottom: 5mm; 
                    }
                    .header h1 { 
                        font-size: 18pt; 
                        color: #4683b4; 
                        margin: 0; 
                        text-transform: uppercase; 
                    }
                    .header .subtitle { 
                        font-size: 12pt; 
                        color: #666; 
                        margin: 0; 
                    }
                    table { 
                        width: 100%; 
                        max-width: 100%; /* Prevents overflow */
                        border-collapse: collapse; 
                        margin: 10mm 0; 
                        table-layout: fixed; /* Forces column width control */
                    }
                    th, td { 
                        border: 1px solid #e5e5e5; 
                        padding: 8px; 
                        text-align: center; 
                        word-wrap: break-word; /* Wraps long content */
                        font-size: 10pt; /* Smaller font to fit more */
                    }
                    th { 
                        background: #4683b4; 
                        color: white; 
                        font-weight: bold; 
                    }
                    tr:nth-child(even) { 
                        background: #f9f9f9; 
                    }
                    .footer { 
                        text-align: center; 
                        font-size: 9pt; 
                        color: #666; 
                        margin-top: 10mm; 
                    }
                    @page { 
                        size: A4; 
                        margin: 10mm; /* Matches body margin */
                    }
                }
            </style>
        </head>
        <body>
            <div class="page">
                <div class="header">
                    ${instituteLogo ? `<img src="${instituteLogo}" alt="Logo" onerror="this.style.display='none';this.nextSibling.style.display='block';"><p style="display:none;">No logo available</p>` : '<p>No logo available</p>'}
                    <h1>${instituteName.toUpperCase()}</h1>
                    <p class="subtitle">Educational Centers List</p>
                </div>
                <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                <p><strong>Total Centers:</strong> ${data.length - 1}</p>
                <table>
                    <thead>
                        <tr>${data[0].map(header => `<th>${header}</th>`).join('')}</tr>
                    </thead>
                    <tbody>
                        ${data.slice(1).map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}
                    </tbody>
                </table>
                <div class="footer">
                    <p>This is an Online Generated Centers List issued by ${instituteName}</p>
                    <p>Generated on ${new Date().toISOString().slice(0, 10)}</p>
                    <p>___________________________</p>
                    <p>Registrar / Authorized Signatory</p>
                    <p>Managed by Instituto Educational Center Management System</p>
                </div>
            </div>
        </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
    }
        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                <button class="export-btn export-copy" aria-label="Copy to Clipboard"><i class="fas fa-copy"></i><span class="tooltip">Copy to Clipboard</span></button>
                <button class="export-btn export-print" aria-label="Print"><i class="fas fa-print"></i><span class="tooltip">Print</span></button>
            `);

            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
            tools.find('.export-copy').on('click', copyToClipboard);
            tools.find('.export-print').on('click', printCenters);
        }

        function loadCenters(page, limit, query) {
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_fetch_centers',
                    page: page,
                    per_page: limit,
                    search: query,
                    nonce: '<?php echo wp_create_nonce('su_p_center_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const centers = response.data.centers;
                        const total = response.data.total;
                        let html = '';
                        centers.forEach(center => {
                            html += `
                                <tr data-center-id="${center.ID}">
                                    <td>${center.educational_center_id || 'N/A'}</td>
                                    <td>${center.educational_center_name || center.post_title}</td>
                                    <td>${center.admin_id || 'Unassigned'}</td>
                                    <td><img src="${center.institute_logo || 'https://via.placeholder.com/50'}" alt="Logo" class="edu-logo"></td>
                                    <td>${center.location || 'N/A'}</td>
                                    <td>${center.mobile_number || 'N/A'}</td>
                                    <td>${center.email_id || 'N/A'}</td>
                                    <td>
                                        <button class="edu-button edu-button-edit edit-center" data-center-id="${center.ID}">Edit</button>
                                        <button class="edu-button edu-button-delete delete-center" data-center-id="${center.ID}">Delete</button>
                                        <button class="edu-button edu-button-password change-password" data-center-id="${center.ID}" data-admin-id="${center.admin_id || ''}">Change Password</button>
                                        <button class="edu-button edu-button-add-admin add-new-admin" data-center-id="${center.ID}">Add New Admin</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#centers-table-body').html(html);
                        setupExportButtons();

                        const totalPages = Math.ceil(total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages}`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                    } else {
                        $('#centers-table-body').html('<tr><td colspan="8">No centers found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#centers-table-body').html('<tr><td colspan="8">Error loading centers: ' + error + '</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        // Initial load
        loadCenters(currentPage, perPage, searchQuery);

        // Search
        $('#center-search').on('input', function() {
            searchQuery = $(this).val();
            currentPage = 1;
            loadCenters(currentPage, perPage, searchQuery);
        });

        // Pagination
        $('#centers-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadCenters(currentPage, perPage, searchQuery);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadCenters(currentPage, perPage, searchQuery);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadCenters(currentPage, perPage, searchQuery);
        });

        // Add Center
        $('#add-center-btn').on('click', function() { openModal('#add-center-modal'); });
        $('#save-center').on('click', function() {
            const formData = new FormData($('#add-center-form')[0]);
            formData.append('action', 'su_p_add_center');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-center-message').addClass('edu-success').text('Center added successfully!');
                        $('#center-edu-id').val(response.data.educational_center_id);
                        setTimeout(() => {
                            closeModal('#add-center-modal');
                            loadCenters(currentPage, perPage, searchQuery);
                        }, 1000);
                    } else {
                        $('#add-center-message').addClass('edu-error').text('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#add-center-message').addClass('edu-error').text('Error adding center: ' + error);
                }
            });
        });

        // Edit Center
        $(document).on('click', '.edit-center', function() {
            const centerId = $(this).data('center-id');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_get_center',
                    center_id: centerId,
                    nonce: '<?php echo wp_create_nonce('su_p_center_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const center = response.data;
                        $('#edit-center-id').val(center.ID);
                        $('#edit-center-name').val(center.educational_center_name);
                        $('#edit-center-admin-id').val(center.admin_id);
                        $('#edit-center-edu-id').val(center.educational_center_id);
                        $('#edit-center-location').val(center.location);
                        $('#edit-center-mobile').val(center.mobile_number);
                        $('#edit-center-email').val(center.email_id);
                        if (center.institute_logo) {
                            $('#edit-center-logo-preview').attr('src', center.institute_logo).show();
                        } else {
                            $('#edit-center-logo-preview').hide();
                        }
                        openModal('#edit-center-modal');
                    } else {
                        alert('Error fetching center: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error fetching center: ' + error);
                }
            });
        });

        $('#update-center').on('click', function() {
            const formData = new FormData($('#edit-center-form')[0]);
            formData.append('action', 'su_p_update_center');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-center-message').addClass('edu-success').text('Center updated successfully!');
                        setTimeout(() => {
                            closeModal('#edit-center-modal');
                            loadCenters(currentPage, perPage, searchQuery);
                        }, 1000);
                    } else {
                        $('#edit-center-message').addClass('edu-error').text('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-center-message').addClass('edu-error').text('Error updating center: ' + error);
                }
            });
        });

        // Delete Center
        $(document).on('click', '.delete-center', function() {
            if (!confirm('Are you sure you want to delete this center?')) return;
            const centerId = $(this).data('center-id');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_delete_center',
                    center_id: centerId,
                    nonce: '<?php echo wp_create_nonce('su_p_center_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        loadCenters(currentPage, perPage, searchQuery);
                    } else {
                        alert('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error deleting center: ' + error);
                }
            });
        });

        // Change Password
        $(document).on('click', '.change-password', function() {
            const centerId = $(this).data('center-id');
            $('#change-center-id').val(centerId);
            openModal('#change-password-modal');
        });

        $('#send-reset-link').on('click', function() {
            const centerId = $('#change-center-id').val();
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_reset_admin_password',
                    center_id: centerId,
                    nonce: '<?php echo wp_create_nonce('su_p_center_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#change-password-message').addClass('edu-success').text('Reset link sent successfully!');
                        setTimeout(() => closeModal('#change-password-modal'), 1000);
                    } else {
                        $('#change-password-message').addClass('edu-error').text('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#change-password-message').addClass('edu-error').text('Error sending reset link: ' + error);
                }
            });
        });

        // Add New Admin
        $(document).on('click', '.add-new-admin', function() {
            const centerId = $(this).data('center-id');
            $('#new-admin-center-id').val(centerId);
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_get_center',
                    center_id: centerId,
                    nonce: '<?php echo wp_create_nonce('su_p_center_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $('#new-admin-educational-center-id').val(response.data.educational_center_id);
                        $.ajax({
                            url: '<?php echo admin_url('admin-ajax.php'); ?>',
                            method: 'POST',
                            data: {
                                action: 'su_p_generate_admin_id',
                                center_id: centerId,
                                nonce: '<?php echo wp_create_nonce('su_p_center_nonce'); ?>'
                            },
                            success: function(adminResponse) {
                                hideLoader();
                                if (adminResponse.success) {
                                    $('#new-admin-id').val(adminResponse.data.admin_id);
                                    openModal('#add-new-admin-modal');
                                } else {
                                    $('#add-new-admin-message').addClass('edu-error').text('Error generating admin ID: ' + adminResponse.data.message);
                                }
                            },
                            error: function(xhr, status, error) {
                                hideLoader();
                                $('#add-new-admin-message').addClass('edu-error').text('Error: ' + error);
                            }
                        });
                    } else {
                        hideLoader();
                        $('#add-new-admin-message').addClass('edu-error').text('Error fetching center: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#add-new-admin-message').addClass('edu-error').text('Error: ' + error);
                }
            });
        });

        $('#save-new-admin').on('click', function() {
            const formData = new FormData($('#add-new-admin-form')[0]);
            formData.append('action', 'su_p_add_new_admin');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-new-admin-message').addClass('edu-success').text('New admin added successfully!');
                        $('#center-admin-id').val(response.data.admin_id);
                        $('#edit-center-admin-id').val(response.data.admin_id);
                        setTimeout(() => {
                            closeModal('#add-new-admin-modal');
                            loadCenters(currentPage, perPage, searchQuery);
                        }, 1000);
                    } else {
                        $('#add-new-admin-message').addClass('edu-error').text('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#add-new-admin-message').addClass('edu-error').text('Error adding new admin: ' + error);
                }
            });
        });
    });
    </script>

    
    <?php
    return ob_get_clean();
}

// AJAX Handlers
add_action('wp_ajax_su_p_fetch_centers', 'su_p_fetch_centers');
function su_p_fetch_centers() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    global $wpdb;
    $page = intval($_POST['page']) ?: 1;
    $per_page = intval($_POST['per_page']) ?: 10;
    $search = sanitize_text_field($_POST['search']);
    $offset = ($page - 1) * $per_page;

    $args = [
        'post_type' => 'educational-center',
        'post_status' => 'publish',
        'posts_per_page' => $per_page,
        'offset' => $offset,
    ];

    if (!empty($search)) {
        $args['meta_query'] = [
            'relation' => 'OR',
            [
                'key' => 'educational_center_name',
                'value' => $search,
                'compare' => 'LIKE'
            ],
            [
                'key' => 'admin_id',
                'value' => $search,
                'compare' => 'LIKE'
            ],
            [
                'key' => 'location',
                'value' => $search,
                'compare' => 'LIKE'
            ],
            [
                'key' => 'mobile_number',
                'value' => $search,
                'compare' => 'LIKE'
            ],
            [
                'key' => 'email_id',
                'value' => $search,
                'compare' => 'LIKE'
            ]
        ];
    }

    $query = new WP_Query($args);
    $centers = [];
    foreach ($query->posts as $center) {
        $centers[] = [
            'ID' => $center->ID, // Still needed for actions
            'post_title' => $center->post_title,
            'educational_center_id' => get_post_meta($center->ID, 'educational_center_id', true),
            'educational_center_name' => get_post_meta($center->ID, 'educational_center_name', true),
            'admin_id' => get_post_meta($center->ID, 'admin_id', true),
            'institute_logo' => wp_get_attachment_url(get_post_meta($center->ID, 'institute_logo', true)),
            'location' => get_post_meta($center->ID, 'location', true),
            'mobile_number' => get_post_meta($center->ID, 'mobile_number', true),
            'email_id' => get_post_meta($center->ID, 'email_id', true)
        ];
    }

    $total = $query->found_posts;
    wp_send_json_success(['centers' => $centers, 'total' => $total]);
    wp_die();
}

add_action('wp_ajax_su_p_add_center', 'su_p_add_center');
function su_p_add_center() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    $center_name = sanitize_text_field($_POST['center_name']);
    $location = sanitize_text_field($_POST['location']);
    $mobile = sanitize_text_field($_POST['mobile_number']);
    $email = sanitize_email($_POST['email_id']);

    $center_id = wp_insert_post([
        'post_title' => $center_name,
        'post_type' => 'educational-center',
        'post_status' => 'publish'
    ]);

    if (is_wp_error($center_id)) {
        wp_send_json_error(['message' => $center_id->get_error_message()]);
        wp_die();
    }

    $edu_center_id = get_unique_id_for_role('institute_admins', $center_id);
    update_post_meta($center_id, 'educational_center_name', $center_name);
    update_post_meta($center_id, 'educational_center_id', $edu_center_id);
    if ($location) update_post_meta($center_id, 'location', $location);
    if ($mobile) update_post_meta($center_id, 'mobile_number', $mobile);
    if ($email) update_post_meta($center_id, 'email_id', $email);

    if (!empty($_FILES['institute_logo']['name'])) {
        $upload = wp_handle_upload($_FILES['institute_logo'], ['test_form' => false]);
        if (isset($upload['error'])) {
            wp_send_json_error(['message' => $upload['error']]);
            wp_die();
        }
        $attachment_id = wp_insert_attachment([
            'guid' => $upload['url'],
            'post_mime_type' => $upload['type'],
            'post_title' => sanitize_file_name($_FILES['institute_logo']['name']),
            'post_content' => '',
            'post_status' => 'inherit'
        ], $upload['file'], $center_id);

        if (!is_wp_error($attachment_id)) {
            update_post_meta($center_id, 'institute_logo', $attachment_id);
        }
    }

    wp_send_json_success(['educational_center_id' => $edu_center_id]);
    wp_die();
}

add_action('wp_ajax_su_p_get_center', 'su_p_get_center');
function su_p_get_center() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    $center_id = intval($_POST['center_id']);
    $center = get_post($center_id);
    if (!$center || $center->post_type !== 'educational-center') {
        wp_send_json_error(['message' => 'Center not found']);
        wp_die();
    }

    $data = [
        'ID' => $center->ID,
        'educational_center_name' => get_post_meta($center->ID, 'educational_center_name', true),
        'admin_id' => get_post_meta($center->ID, 'admin_id', true),
        'educational_center_id' => get_post_meta($center->ID, 'educational_center_id', true),
        'institute_logo' => wp_get_attachment_url(get_post_meta($center->ID, 'institute_logo', true)),
        'location' => get_post_meta($center->ID, 'location', true),
        'mobile_number' => get_post_meta($center->ID, 'mobile_number', true),
        'email_id' => get_post_meta($center->ID, 'email_id', true)
    ];

    wp_send_json_success($data);
    wp_die();
}

add_action('wp_ajax_su_p_update_center', 'su_p_update_center');
function su_p_update_center() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    $center_id = intval($_POST['center_id']);
    $center_name = sanitize_text_field($_POST['center_name']);
    $location = sanitize_text_field($_POST['location']);
    $mobile = sanitize_text_field($_POST['mobile_number']);
    $email = sanitize_email($_POST['email_id']);

    $updated = wp_update_post([
        'ID' => $center_id,
        'post_title' => $center_name
    ]);

    if (is_wp_error($updated)) {
        wp_send_json_error(['message' => $updated->get_error_message()]);
        wp_die();
    }

    update_post_meta($center_id, 'educational_center_name', $center_name);
    update_post_meta($center_id, 'location', $location);
    update_post_meta($center_id, 'mobile_number', $mobile);
    update_post_meta($center_id, 'email_id', $email);

    if (!empty($_FILES['institute_logo']['name'])) {
        $upload = wp_handle_upload($_FILES['institute_logo'], ['test_form' => false]);
        if (isset($upload['error'])) {
            wp_send_json_error(['message' => $upload['error']]);
            wp_die();
        }
        $attachment_id = wp_insert_attachment([
            'guid' => $upload['url'],
            'post_mime_type' => $upload['type'],
            'post_title' => sanitize_file_name($_FILES['institute_logo']['name']),
            'post_content' => '',
            'post_status' => 'inherit'
        ], $upload['file'], $center_id);

        if (!is_wp_error($attachment_id)) {
            update_post_meta($center_id, 'institute_logo', $attachment_id);
        }
    }

    wp_send_json_success();
    wp_die();
}

add_action('wp_ajax_su_p_delete_center', 'su_p_delete_center');
function su_p_delete_center() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    $center_id = intval($_POST['center_id']);
    $admin_user_id = get_post_meta($center_id, 'admin_user_id', true);
    if ($admin_user_id) {
        wp_delete_user($admin_user_id);
    }
    $deleted = wp_delete_post($center_id, true);

    if ($deleted) {
        wp_send_json_success();
    } else {
        wp_send_json_error(['message' => 'Failed to delete center']);
    }
    wp_die();
}

add_action('wp_ajax_su_p_reset_admin_password', 'su_p_reset_admin_password');
function su_p_reset_admin_password() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    $center_id = intval($_POST['center_id']);
    $admin_user_id = get_post_meta($center_id, 'admin_user_id', true);
    if (!$admin_user_id) {
        wp_send_json_error(['message' => 'No admin assigned to this center']);
        wp_die();
    }

    $user = get_user_by('ID', $admin_user_id);
    if (!$user) {
        wp_send_json_error(['message' => 'Admin not found']);
        wp_die();
    }

    $reset_key = get_password_reset_key($user);
    if (is_wp_error($reset_key)) {
        wp_send_json_error(['message' => $reset_key->get_error_message()]);
        wp_die();
    }

    $reset_link = network_site_url("wp-login.php?action=rp&key=$reset_key&login=" . rawurlencode($user->user_login), 'login');
    $message = "Click the link to reset your password: $reset_link";
    $sent = wp_mail($user->user_email, 'Password Reset Request', $message);

    if ($sent) {
        wp_send_json_success();
    } else {
        wp_send_json_error(['message' => 'Failed to send reset email']);
    }
    wp_die();
}

add_action('wp_ajax_su_p_generate_admin_id', 'su_p_generate_admin_id');
function su_p_generate_admin_id() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    $center_id = intval($_POST['center_id']);
    $admin_id = get_unique_id_for_role('institute_admins', $center_id);

    wp_send_json_success(['admin_id' => $admin_id]);
    wp_die();
}

add_action('wp_ajax_su_p_add_new_admin', 'su_p_add_new_admin');
function su_p_add_new_admin() {
    check_ajax_referer('su_p_center_nonce', 'nonce');

    $center_id = intval($_POST['center_id']);
    $admin_id = sanitize_text_field($_POST['admin_id']); // Use generated admin_id
    $admin_name = sanitize_text_field($_POST['admin_name']);
    $email = sanitize_email($_POST['email_id']);
    $password = $_POST['password'];
    $mobile = sanitize_text_field($_POST['mobile_number']);
    $educational_center_id = sanitize_text_field($_POST['educational_center_id']); // From hidden input
    // Delete existing admin if present
    $old_admin_user_id = get_post_meta($center_id, 'admin_user_id', true);
    if ($old_admin_user_id) {
        wp_delete_user($old_admin_user_id);
    }

    // Create new admin user
    $username = sanitize_user(strtolower(str_replace(' ', '-', $admin_name)));
    $user_id = wp_create_user($username, $password, $email);
    if (is_wp_error($user_id)) {
        wp_send_json_error(['message' => $user_id->get_error_message()]);
        wp_die();
    }
    wp_update_user(array(
        'ID' => $user_id,
        'first_name' => $admin_name,
    ));
    $user = new WP_User($user_id);
    $user->set_role('institute_admin');
    update_user_meta($user_id, 'mobile_number', $mobile);
    $edu_center_stored = update_user_meta($created_user_id, 'educational_center_id', $educational_center_id);
    $home_url = home_url();
    $message = "Welcome, $admin_name!\n\nYour username: $admin_id\nYour password: $password\n\nLogin at: $home_url/login/\n\n Educaional Center ID $educational_center_id";
    wp_mail($email, 'Your Account Credentials', $message);

    // Update center with new admin_id and user_id
    update_post_meta($center_id, 'admin_id', $admin_id);
    update_post_meta($center_id, 'admin_user_id', $user_id);

    wp_send_json_success(['admin_id' => $admin_id]);
    wp_die();
}

// function get_unique_id_for_role($role_type, $center_id = '') {
//     $prefix = ($role_type === 'institute_admins') ? 'IA' : 'UNK';
//     return $prefix . '-' . $center_id . '-' . uniqid();
// }

// render_su_p_teachers Management (Stub)
// Main Teachers Management Function (Read Only)
// Main Teachers Management Function
function render_su_p_teachers_management() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to view this dashboard.</p>';
    }

    global $wpdb;
    ob_start();
    ?>
    <div class="edu-teachers-container" style="margin-top: 80px;">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2 class="edu-teachers-title">Managing Teachers</h2>
        <div class="edu-teachers-actions">
            <button class="edu-button edu-button-primary" id="add-teacher-btn">Add New Teacher</button>
            <input type="text" id="teacher-search" class="edu-search-input" placeholder="Search Teachers..." style="margin-left: 20px; padding: 8px; width: 300px;">
            <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                <option value="">All Educational Centers</option>
                <?php
                $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
                foreach ($centers as $center) {
                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                    echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                }
                ?>
            </select>
        </div>
        <div class="edu-pagination" style="margin: 20px 0;">
            <label for="teachers-per-page">Show:</label>
            <select id="teachers-per-page" class="edu-select" style="margin-right: 20px;">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
            <button class="edu-button edu-button-nav" id="prev-page" disabled>Previous</button>
            <span id="page-info" style="margin: 0 10px;"></span>
            <button class="edu-button edu-button-nav" id="next-page">Next</button>
        </div>
        <div class="edu-table-wrapper">
            <div class="export-tools" id="export-tools" style="margin-bottom: 10px;"></div>
            <table class="edu-table" id="teachers-table">
                <thead>
                    <tr>
                        <th>Teacher ID</th>
                        <th>Edu Center ID</th>
                        <th>Edu Center Name</th>
                        <th>Teacher Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Roll Number</th>
                        <th>Department</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="teachers-table-body">
                    <!-- Populated via AJAX -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Teacher Modal -->
    <div class="edu-modal" id="add-teacher-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-teacher-modal">×</span>
            <h3>Add New Teacher</h3>
            <form id="add-teacher-form" class="edu-form" enctype="multipart/form-data">
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-id">Teacher ID</label>
                    <input type="text" class="edu-form-input" id="teacher-id" name="teacher_id" value="" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="educational-center-id">Educational Center ID</label>
                    <select class="edu-form-input" id="educational-center-id" name="educational_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-name">Teacher Name</label>
                    <input type="text" class="edu-form-input" id="teacher-name" name="teacher_name" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-email">Email</label>
                    <input type="email" class="edu-form-input" id="teacher-email" name="teacher_email" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-phone">Phone Number</label>
                    <input type="text" class="edu-form-input" id="teacher-phone" name="teacher_phone_number">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-gender">Gender</label>
                    <select class="edu-form-input" id="teacher-gender" name="teacher_gender">
                        <option value="">Select Gender</option>
                        <?php $gender_field = get_field_object('field_67baed90b66de'); if ($gender_field) foreach ($gender_field['choices'] as $value => $label) : ?>
                            <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-dob">Date of Birth</label>
                    <input type="date" class="edu-form-input" id="teacher-dob" name="teacher_date_of_birth">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-religion">Religion</label>
                    <select class="edu-form-input" id="teacher-religion" name="teacher_religion">
                        <option value="">Select Religion</option>
                        <?php $religion_field = get_field_object('field_67baed90bdebb'); if ($religion_field) foreach ($religion_field['choices'] as $value => $label) : ?>
                            <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-photo">Profile Photo</label>
                    <input type="file" class="edu-form-input" id="teacher-photo" name="teacher_profile_photo" accept="image/*">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-blood">Blood Group</label>
                    <select class="edu-form-input" id="teacher-blood" name="teacher_blood_group">
                        <option value="">Select Blood Group</option>
                        <?php $blood_field = get_field_object('field_67baed90c555b'); if ($blood_field) foreach ($blood_field['choices'] as $value => $label) : ?>
                            <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-height">Height (cm)</label>
                    <input type="number" class="edu-form-input" id="teacher-height" name="teacher_height">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-weight">Weight (kg)</label>
                    <input type="number" class="edu-form-input" id="teacher-weight" name="teacher_weight">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-current-addr">Current Address</label>
                    <textarea class="edu-form-input" id="teacher-current-addr" name="teacher_current_address"></textarea>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-permanent-addr">Permanent Address</label>
                    <textarea class="edu-form-input" id="teacher-permanent-addr" name="teacher_permanent_address"></textarea>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-roll">Roll Number</label>
                    <input type="number" class="edu-form-input" id="teacher-roll" name="teacher_roll_number" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-admission">Admission Date</label>
                    <input type="date" class="edu-form-input" id="teacher-admission" name="teacher_admission_date" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="teacher-dept">Department</label>
                    <input type="text" class="edu-form-input" id="teacher-dept" name="teacher_department">
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_teacher_nonce'); ?>">
                <button type="button" class="edu-button edu-button-primary" id="save-teacher">Save Teacher</button>
            </form>
            <div class="edu-form-message" id="add-teacher-message"></div>
        </div>
    </div>

    <!-- Edit Teacher Modal -->
    <div class="edu-modal" id="edit-teacher-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-teacher-modal">×</span>
            <h3>Edit Teacher</h3>
            <form id="edit-teacher-form" class="edu-form" enctype="multipart/form-data">
                <input type="hidden" id="edit-teacher-post-id" name="teacher_post_id">
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-id">Teacher ID</label>
                    <input type="text" class="edu-form-input" id="edit-teacher-id" name="teacher_id" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-educational-center-id">Educational Center ID</label>
                    <input type="text" class="edu-form-input" id="edit-educational-center-id" name="educational_center_id" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-name">Teacher Name</label>
                    <input type="text" class="edu-form-input" id="edit-teacher-name" name="teacher_name" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-email">Email</label>
                    <input type="email" class="edu-form-input" id="edit-teacher-email" name="teacher_email" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-phone">Phone Number</label>
                    <input type="text" class="edu-form-input" id="edit-teacher-phone" name="teacher_phone_number">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-gender">Gender</label>
                    <select class="edu-form-input" id="edit-teacher-gender" name="teacher_gender">
                        <option value="">Select Gender</option>
                        <?php $gender_field = get_field_object('field_67baed90b66de'); if ($gender_field) foreach ($gender_field['choices'] as $value => $label) : ?>
                            <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-dob">Date of Birth</label>
                    <input type="date" class="edu-form-input" id="edit-teacher-dob" name="teacher_date_of_birth">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-religion">Religion</label>
                    <select class="edu-form-input" id="edit-teacher-religion" name="teacher_religion">
                        <option value="">Select Religion</option>
                        <?php $religion_field = get_field_object('field_67baed90bdebb'); if ($religion_field) foreach ($religion_field['choices'] as $value => $label) : ?>
                            <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-photo">Profile Photo</label>
                    <input type="file" class="edu-form-input" id="edit-teacher-photo" name="teacher_profile_photo" accept="image/*">
                    <img id="edit-teacher-photo-preview" style="max-width: 200px; display: none;" />
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-blood">Blood Group</label>
                    <select class="edu-form-input" id="edit-teacher-blood" name="teacher_blood_group">
                        <option value="">Select Blood Group</option>
                        <?php $blood_field = get_field_object('field_67baed90c555b'); if ($blood_field) foreach ($blood_field['choices'] as $value => $label) : ?>
                            <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-height">Height (cm)</label>
                    <input type="number" class="edu-form-input" id="edit-teacher-height" name="teacher_height">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-weight">Weight (kg)</label>
                    <input type="number" class="edu-form-input" id="edit-teacher-weight" name="teacher_weight">
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-current-addr">Current Address</label>
                    <textarea class="edu-form-input" id="edit-teacher-current-addr" name="teacher_current_address"></textarea>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-permanent-addr">Permanent Address</label>
                    <textarea class="edu-form-input" id="edit-teacher-permanent-addr" name="teacher_permanent_address"></textarea>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-roll">Roll Number</label>
                    <input type="number" class="edu-form-input" id="edit-teacher-roll" name="teacher_roll_number" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-admission">Admission Date</label>
                    <input type="date" class="edu-form-input" id="edit-teacher-admission" name="teacher_admission_date" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-teacher-dept">Department</label>
                    <select class="edu-form-input" id="edit-teacher-dept" name="teacher_department">
                        <option value="">Select Department</option>
                        <!-- Options populated via JavaScript -->
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_teacher_nonce'); ?>">
                <button type="button" class="edu-button edu-button-primary" id="update-teacher">Update Teacher</button>
            </form>
            <div class="edu-form-message" id="edit-teacher-message"></div>
        </div>
    </div>

    <!-- Dependencies -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <script>
    jQuery(document).ready(function($) {
        let currentPage = 1;
        let perPage = 10;
        let searchQuery = '';
        let centerFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { 
            showLoader(); 
            $(modalId).css('display', 'block'); 
            setTimeout(hideLoader, 100); 
        }
        function closeModal(modalId) { 
            $(modalId).css('display', 'none'); 
            $(modalId + ' .edu-form-message').removeClass('edu-success edu-error').text(''); 
            hideLoader(); 
        }

        // Close modal when clicking the close button
        $('.edu-modal-close').on('click', function() {
            const modalId = '#' + $(this).data('modal');
            closeModal(modalId);
        });

        // Close modal when clicking outside the modal content
        $(document).on('click', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        function getTableData() {
            const table = $('#teachers-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim()).slice(0, -1); // Exclude Actions
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {
                const cells = Array.from(row.querySelectorAll('td')).slice(0, -1); // Exclude Actions
                return cells.map(td => td.textContent.trim());
            });
            return [headers, ...rows];
        }

        function exportToCSV() {
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `teachers_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
        }

        function exportToExcel() {
            if (!window.XLSX) { console.error('XLSX library not loaded'); return; }
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Teachers');
            XLSX.writeFile(wb, `teachers_${new Date().toISOString().slice(0,10)}.xlsx`);
        }

        function generatePDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ unit: 'mm', format: 'a4' });
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            const pageWidth = doc.internal.pageSize.width;
            const pageHeight = doc.internal.pageSize.height;
            const margin = 10;
            const borderColor = [70, 131, 180];

            doc.setDrawColor(...borderColor);
            doc.setLineWidth(1);
            doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);

            if (instituteLogo) {
                try {
                    doc.addImage(instituteLogo, 'JPEG', (pageWidth - 24) / 2, 15, 24, 24);
                } catch (e) {
                    console.log('Logo loading failed:', e);
                    doc.setFontSize(10);
                    doc.text('No logo available', (pageWidth - 20) / 2, 20, { align: 'center' });
                }
            }
            doc.setFontSize(18);
            doc.setTextColor(...borderColor);
            doc.text(instituteName.toUpperCase(), pageWidth / 2, 45, { align: 'center' });
            doc.setFontSize(12);
            doc.setTextColor(102);
            doc.text('Teachers List', pageWidth / 2, 55, { align: 'center' });
            doc.setDrawColor(...borderColor);
            doc.line(margin + 5, 60, pageWidth - margin - 5, 60);

            const details = [
                ['Date', new Date().toLocaleDateString()],
                ['Total Teachers', String(data.length - 1)]
            ];
            let y = 70;
            details.forEach(([label, value]) => {
                doc.setFillColor(245, 245, 245);
                doc.rect(margin + 5, y, 50, 6, 'F');
                doc.setTextColor(...borderColor);
                doc.setFont('helvetica', 'bold');
                doc.text(label, margin + 7, y + 4);
                doc.setTextColor(51);
                doc.setFont('helvetica', 'normal');
                doc.text(String(value), margin + 60, y + 4);
                y += 6;
            });

            if (typeof doc.autoTable === 'function' && data.length > 1) {
                doc.autoTable({
                    startY: y + 10,
                    head: [data[0]],
                    body: data.slice(1),
                    theme: 'striped',
                    styles: { fontSize: 11, cellPadding: 2, overflow: 'linebreak', halign: 'center', textColor: [51, 51, 51] },
                    headStyles: { fillColor: borderColor, textColor: [255, 255, 255], fontStyle: 'bold' },
                    alternateRowStyles: { fillColor: [249, 249, 249] }
                });

                const finalY = doc.lastAutoTable.finalY || y + 10;
                doc.setFontSize(9);
                doc.setTextColor(102);
                doc.text(`This is an Online Generated Teachers List issued by ${instituteName}`, pageWidth / 2, finalY + 20, { align: 'center' });
                doc.text(`Generated on ${new Date().toISOString().slice(0,10)}`, pageWidth / 2, finalY + 25, { align: 'center' });
                doc.text('___________________________', pageWidth / 2, finalY + 35, { align: 'center' });
                doc.text('Registrar / Authorized Signatory', pageWidth / 2, finalY + 40, { align: 'center' });
                doc.text('Managed by Instituto Educational Center Management System', pageWidth / 2, finalY + 45, { align: 'center' });

                doc.save(`teachers_${new Date().toISOString().slice(0,10)}.pdf`);
            } else {
                console.error('jsPDF autoTable plugin not loaded or no data');
                alert('PDF generation failed');
            }
        }

        function copyToClipboard() {
            const data = getTableData();
            const text = data.map(row => row.join('\t')).join('\n');
            navigator.clipboard.writeText(text).then(() => alert('Teachers copied to clipboard!'));
        }

        function printTeachers() {
            const printWindow = window.open('', '_blank');
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';

            printWindow.document.write(`
                <html>
                <head>
                    <title>Teachers List</title>
                    <style>
                        @media print {
                            body { font-family: Helvetica, sans-serif; margin: 10mm; width: 190mm; }
                            .page { border: 4px solid #4683b4; padding: 5mm; box-sizing: border-box; width: 100%; max-width: 190mm; }
                            .header { text-align: center; border-bottom: 2px solid #4683b4; margin-bottom: 10mm; }
                            .header img { width: 60px; height: 60px; margin-bottom: 5mm; }
                            .header h1 { font-size: 18pt; color: #4683b4; margin: 0; text-transform: uppercase; }
                            .header .subtitle { font-size: 12pt; color: #666; margin: 0; }
                            table { width: 100%; max-width: 100%; border-collapse: collapse; margin: 10mm 0; table-layout: fixed; }
                            th, td { border: 1px solid #e5e5e5; padding: 8px; text-align: center; word-wrap: break-word; font-size: 10pt; }
                            th { background: #4683b4; color: white; font-weight: bold; }
                            tr:nth-child(even) { background: #f9f9f9; }
                            .footer { text-align: center; font-size: 9pt; color: #666; margin-top: 10mm; }
                            @page { size: A4; margin: 10mm; }
                        }
                    </style>
                </head>
                <body>
                    <div class="page">
                        <div class="header">
                            ${instituteLogo ? `<img src="${instituteLogo}" alt="Logo" onerror="this.style.display='none';this.nextSibling.style.display='block';"><p style="display:none;">No logo available</p>` : '<p>No logo available</p>'}
                            <h1>${instituteName.toUpperCase()}</h1>
                            <p class="subtitle">Teachers List</p>
                        </div>
                        <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                        <p><strong>Total Teachers:</strong> ${data.length - 1}</p>
                        <table>
                            <thead>
                                <tr>${data[0].map(header => `<th>${header}</th>`).join('')}</tr>
                            </thead>
                            <tbody>
                                ${data.slice(1).map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}
                            </tbody>
                        </table>
                        <div class="footer">
                            <p>This is an Online Generated Teachers List issued by ${instituteName}</p>
                            <p>Generated on ${new Date().toISOString().slice(0,10)}</p>
                            <p>___________________________</p>
                            <p>Registrar / Authorized Signatory</p>
                            <p>Managed by Instituto Educational Center Management System</p>
                        </div>
                    </div>
                </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
        }

        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                <button class="export-btn export-copy" aria-label="Copy to Clipboard"><i class="fas fa-copy"></i><span class="tooltip">Copy to Clipboard</span></button>
                <button class="export-btn export-print" aria-label="Print"><i class="fas fa-print"></i><span class="tooltip">Print</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
            tools.find('.export-copy').on('click', copyToClipboard);
            tools.find('.export-print').on('click', printTeachers);
        }

        function loadTeachers(page, limit, query, center) {
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_fetch_teachers',
                    page: page,
                    per_page: limit,
                    search: query,
                    center_filter: center,
                    nonce: '<?php echo wp_create_nonce('su_p_teacher_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const teachers = response.data.teachers;
                        const total = response.data.total;
                        let html = '';
                        teachers.forEach(teacher => {
                            html += `
                                <tr data-teacher-id="${teacher.ID}">
                                    <td>${teacher.teacher_id || 'N/A'}</td>
                                    <td>${teacher.educational_center_id || 'N/A'}</td>
                                    <td>${teacher.center_name || 'N/A'}</td>
                                    <td>${teacher.teacher_name || 'N/A'}</td>
                                    <td>${teacher.teacher_email || 'N/A'}</td>
                                    <td>${teacher.teacher_phone_number || 'N/A'}</td>
                                    <td>${teacher.teacher_roll_number || 'N/A'}</td>
                                    <td>${teacher.teacher_department || 'N/A'}</td>
                                    <td>
                                        <button class="edu-button edu-button-edit edit-teacher" data-teacher-id="${teacher.ID}">Edit</button>
                                        <button class="edu-button edu-button-delete delete-teacher" data-teacher-id="${teacher.ID}">Delete</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#teachers-table-body').html(html);
                        setupExportButtons();

                        const totalPages = Math.ceil(total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages}`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                    } else {
                        $('#teachers-table-body').html('<tr><td colspan="9">No teachers found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#teachers-table-body').html('<tr><td colspan="9">Error loading teachers: ' + error + '</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        // Initial load
        loadTeachers(currentPage, perPage, searchQuery, centerFilter);

        // Search and Filter
        $('#teacher-search').on('input', function() {
            searchQuery = $(this).val();
            currentPage = 1;
            loadTeachers(currentPage, perPage, searchQuery, centerFilter);
        });

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadTeachers(currentPage, perPage, searchQuery, centerFilter);
        });

        // Pagination
        $('#teachers-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadTeachers(currentPage, perPage, searchQuery, centerFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadTeachers(currentPage, perPage, searchQuery, centerFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadTeachers(currentPage, perPage, searchQuery, centerFilter);
        });

        // Add Teacher
        $('#add-teacher-btn').on('click', function() { 
            $('#teacher-id').val('TEA-' + Math.random().toString(36).substr(2, 9).toUpperCase()); // Generate unique ID
            openModal('#add-teacher-modal'); 
        });

        $('#educational-center-id').on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                $('#teacher-id').val('TEA-' + centerId + '-' + Math.random().toString(36).substr(2, 5).toUpperCase());
            } else {
                $('#teacher-id').val('');
            }
        });

        $('#save-teacher').on('click', function() {
            const formData = new FormData($('#add-teacher-form')[0]);
            formData.append('action', 'su_p_add_teacher');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-teacher-message').addClass('edu-success').text('Teacher added successfully!');
                        setTimeout(() => {
                            closeModal('#add-teacher-modal');
                            loadTeachers(currentPage, perPage, searchQuery, centerFilter);
                        }, 1000);
                    } else {
                        $('#add-teacher-message').addClass('edu-error').text('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#add-teacher-message').addClass('edu-error').text('Error adding teacher: ' + error);
                }
            });
        });

        // Edit Teacher
        $(document).on('click', '.edit-teacher', function() {
            const teacherId = $(this).data('teacher-id');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_get_teacher',
                    teacher_id: teacherId,
                    nonce: '<?php echo wp_create_nonce('su_p_teacher_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const teacher = response.data;
                        $('#edit-teacher-post-id').val(teacher.ID);
                        $('#edit-teacher-id').val(teacher.teacher_id);
                        $('#edit-educational-center-id').val(teacher.educational_center_id);
                        $('#edit-teacher-name').val(teacher.teacher_name);
                        $('#edit-teacher-email').val(teacher.teacher_email);
                        $('#edit-teacher-phone').val(teacher.teacher_phone_number);
                        $('#edit-teacher-gender').val(teacher.teacher_gender);
                        $('#edit-teacher-dob').val(teacher.teacher_date_of_birth);
                        $('#edit-teacher-religion').val(teacher.teacher_religion);
                        if (teacher.teacher_profile_photo_url) {
                            $('#edit-teacher-photo-preview').attr('src', teacher.teacher_profile_photo_url).show();
                        } else {
                            $('#edit-teacher-photo-preview').hide();
                        }
                        $('#edit-teacher-blood').val(teacher.teacher_blood_group);
                        $('#edit-teacher-height').val(teacher.teacher_height);
                        $('#edit-teacher-weight').val(teacher.teacher_weight);
                        $('#edit-teacher-current-addr').val(teacher.teacher_current_address);
                        $('#edit-teacher-permanent-addr').val(teacher.teacher_permanent_address);
                        $('#edit-teacher-roll').val(teacher.teacher_roll_number);
                        $('#edit-teacher-admission').val(teacher.teacher_admission_date);

                        const centerId = teacher.educational_center_id;
                        $.ajax({
                            url: '<?php echo admin_url('admin-ajax.php'); ?>',
                            method: 'POST',
                            data: {
                                action: 'su_p_get_departments',
                                center_id: centerId,
                                nonce: '<?php echo wp_create_nonce('su_p_teacher_nonce'); ?>'
                            },
                            success: function(deptResponse) {
                                if (deptResponse.success) {
                                    const departments = deptResponse.data;
                                    let options = '<option value="">Select Department</option>';
                                    departments.forEach(dept => {
                                        options += `<option value="${dept.department_name}" ${dept.department_name === teacher.teacher_department ? 'selected' : ''}>${dept.department_name}</option>`;
                                    });
                                    $('#edit-teacher-dept').html(options);
                                } else {
                                    $('#edit-teacher-dept').html('<option value="">No departments found</option>');
                                }
                            },
                            error: function(xhr, status, error) {
                                $('#edit-teacher-dept').html('<option value="">Error loading departments</option>');
                            }
                        });

                        openModal('#edit-teacher-modal');
                    } else {
                        alert('Error fetching teacher: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error fetching teacher: ' + error);
                }
            });
        });

        $('#edit-teacher-photo').on('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    $('#edit-teacher-photo-preview').attr('src', e.target.result).show();
                };
                reader.readAsDataURL(file);
            }
        });

        $('#update-teacher').on('click', function() {
            const formData = new FormData($('#edit-teacher-form')[0]);
            formData.append('action', 'su_p_update_teacher');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-teacher-message').addClass('edu-success').text('Teacher updated successfully!');
                        setTimeout(() => {
                            closeModal('#edit-teacher-modal');
                            loadTeachers(currentPage, perPage, searchQuery, centerFilter);
                        }, 1000);
                    } else {
                        $('#edit-teacher-message').addClass('edu-error').text('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-teacher-message').addClass('edu-error').text('Error updating teacher: ' + error);
                }
            });
        });

        // Delete Teacher
        $(document).on('click', '.delete-teacher', function() {
            if (!confirm('Are you sure you want to delete this teacher?')) return;
            const teacherId = $(this).data('teacher-id');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_delete_teacher',
                    teacher_id: teacherId,
                    nonce: '<?php echo wp_create_nonce('su_p_teacher_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        loadTeachers(currentPage, perPage, searchQuery, centerFilter);
                    } else {
                        alert('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error deleting teacher: ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handlers
add_action('wp_ajax_su_p_fetch_teachers', 'su_p_fetch_teachers');
function su_p_fetch_teachers() {
    check_ajax_referer('su_p_teacher_nonce', 'nonce');
    global $wpdb;
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $center_filter = isset($_POST['center_filter']) ? sanitize_text_field($_POST['center_filter']) : '';
    $offset = ($page - 1) * $per_page;

    $args = [
        'post_type' => 'teacher',
        'posts_per_page' => $per_page,
        'offset' => $offset,
        'post_status' => 'publish'
    ];
    if ($search) {
        $args['meta_query'] = [
            'relation' => 'OR',
            ['key' => 'teacher_id', 'value' => $search, 'compare' => 'LIKE'],
            ['key' => 'teacher_name', 'value' => $search, 'compare' => 'LIKE'],
            ['key' => 'teacher_email', 'value' => $search, 'compare' => 'LIKE'],
            ['key' => 'teacher_phone_number', 'value' => $search, 'compare' => 'LIKE']
        ];
    }
    if ($center_filter) {
        $args['meta_query'][] = ['key' => 'educational_center_id', 'value' => $center_filter, 'compare' => '='];
    }

    $query = new WP_Query($args);
    $teachers = [];
    foreach ($query->posts as $post) {
        $center_id = get_post_meta($post->ID, 'educational_center_id', true);
        $center = $center_id ? get_posts(['post_type' => 'educational-center', 'meta_key' => 'educational_center_id', 'meta_value' => $center_id, 'posts_per_page' => 1])[0] : null;
        $teachers[] = [
            'ID' => $post->ID,
            'teacher_id' => get_post_meta($post->ID, 'teacher_id', true),
            'educational_center_id' => $center_id,
            'center_name' => $center ? $center->post_title : 'N/A',
            'teacher_name' => get_post_meta($post->ID, 'teacher_name', true),
            'teacher_email' => get_post_meta($post->ID, 'teacher_email', true),
            'teacher_phone_number' => get_post_meta($post->ID, 'teacher_phone_number', true),
            'teacher_roll_number' => get_post_meta($post->ID, 'teacher_roll_number', true),
            'teacher_department' => get_post_meta($post->ID, 'teacher_department', true)
        ];
    }
    $total = $query->found_posts;
    wp_send_json_success(['teachers' => $teachers, 'total' => $total]);
}

add_action('wp_ajax_su_p_get_departments', 'su_p_get_departments');
function su_p_get_departments() {
    check_ajax_referer('su_p_teacher_nonce', 'nonce');
    global $wpdb;
    $center_id = sanitize_text_field($_POST['center_id']);
    $table_name = $wpdb->prefix . 'departments';

    $departments = $wpdb->get_results(
        $wpdb->prepare("SELECT department_id, department_name FROM $table_name WHERE education_center_id = %s", $center_id),
        ARRAY_A
    );

    if ($departments) {
        wp_send_json_success($departments);
    } else {
        wp_send_json_error(['message' => 'No departments found for this center']);
    }
}

add_action('wp_ajax_su_p_add_teacher', 'su_p_add_teacher');
function su_p_add_teacher() {
    check_ajax_referer('su_p_teacher_nonce', 'nonce');
    $post_id = wp_insert_post([
        'post_title' => sanitize_text_field($_POST['teacher_name']),
        'post_type' => 'teacher',
        'post_status' => 'publish'
    ]);
    if ($post_id) {
        update_post_meta($post_id, 'teacher_id', sanitize_text_field($_POST['teacher_id']));
        update_post_meta($post_id, 'educational_center_id', sanitize_text_field($_POST['educational_center_id']));
        update_post_meta($post_id, 'teacher_name', sanitize_text_field($_POST['teacher_name']));
        update_post_meta($post_id, 'teacher_email', sanitize_email($_POST['teacher_email']));
        update_post_meta($post_id, 'teacher_phone_number', sanitize_text_field($_POST['teacher_phone_number']));
        update_post_meta($post_id, 'teacher_gender', sanitize_text_field($_POST['teacher_gender']));
        update_post_meta($post_id, 'teacher_date_of_birth', sanitize_text_field($_POST['teacher_date_of_birth']));
        update_post_meta($post_id, 'teacher_religion', sanitize_text_field($_POST['teacher_religion']));
        if (!empty($_FILES['teacher_profile_photo']['name'])) {
            require_once(ABSPATH . 'wp-admin/includes/image.php');
            $attachment_id = media_handle_upload('teacher_profile_photo', $post_id);
            if (!is_wp_error($attachment_id)) {
                update_post_meta($post_id, 'teacher_profile_photo', $attachment_id);
            }
        }
        update_post_meta($post_id, 'teacher_blood_group', sanitize_text_field($_POST['teacher_blood_group']));
        update_post_meta($post_id, 'teacher_height', sanitize_text_field($_POST['teacher_height']));
        update_post_meta($post_id, 'teacher_weight', sanitize_text_field($_POST['teacher_weight']));
        update_post_meta($post_id, 'teacher_current_address', sanitize_textarea_field($_POST['teacher_current_address']));
        update_post_meta($post_id, 'teacher_permanent_address', sanitize_textarea_field($_POST['teacher_permanent_address']));
        update_post_meta($post_id, 'teacher_roll_number', sanitize_text_field($_POST['teacher_roll_number']));
        update_post_meta($post_id, 'teacher_admission_date', sanitize_text_field($_POST['teacher_admission_date']));
        update_post_meta($post_id, 'teacher_department', sanitize_text_field($_POST['teacher_department']));
        wp_send_json_success(['message' => 'Teacher added']);
    } else {
        wp_send_json_error(['message' => 'Failed to add teacher']);
    }
}

add_action('wp_ajax_su_p_get_teacher', 'su_p_get_teacher');
function su_p_get_teacher() {
    check_ajax_referer('su_p_teacher_nonce', 'nonce');
    $teacher_id = intval($_POST['teacher_id']);
    $post = get_post($teacher_id);
    if ($post && $post->post_type === 'teacher') {
        $teacher = [
            'ID' => $post->ID,
            'teacher_id' => get_post_meta($post->ID, 'teacher_id', true),
            'educational_center_id' => get_post_meta($post->ID, 'educational_center_id', true),
            'teacher_name' => get_post_meta($post->ID, 'teacher_name', true),
            'teacher_email' => get_post_meta($post->ID, 'teacher_email', true),
            'teacher_phone_number' => get_post_meta($post->ID, 'teacher_phone_number', true),
            'teacher_gender' => get_post_meta($post->ID, 'teacher_gender', true),
            'teacher_date_of_birth' => get_post_meta($post->ID, 'teacher_date_of_birth', true),
            'teacher_religion' => get_post_meta($post->ID, 'teacher_religion', true),
            'teacher_profile_photo_url' => wp_get_attachment_url(get_post_meta($post->ID, 'teacher_profile_photo', true)),
            'teacher_blood_group' => get_post_meta($post->ID, 'teacher_blood_group', true),
            'teacher_height' => get_post_meta($post->ID, 'teacher_height', true),
            'teacher_weight' => get_post_meta($post->ID, 'teacher_weight', true),
            'teacher_current_address' => get_post_meta($post->ID, 'teacher_current_address', true),
            'teacher_permanent_address' => get_post_meta($post->ID, 'teacher_permanent_address', true),
            'teacher_roll_number' => get_post_meta($post->ID, 'teacher_roll_number', true),
            'teacher_admission_date' => get_post_meta($post->ID, 'teacher_admission_date', true),
            'teacher_department' => get_post_meta($post->ID, 'teacher_department', true)
        ];
        wp_send_json_success($teacher);
    } else {
        wp_send_json_error(['message' => 'Teacher not found']);
    }
}

add_action('wp_ajax_su_p_update_teacher', 'su_p_update_teacher');
function su_p_update_teacher() {
    check_ajax_referer('su_p_teacher_nonce', 'nonce');
    $post_id = intval($_POST['teacher_post_id']);
    $post = get_post($post_id);
    if (!$post || $post->post_type !== 'teacher') {
        wp_send_json_error(['message' => 'Invalid teacher post ID']);
        return;
    }

    $updated = wp_update_post([
        'ID' => $post_id,
        'post_title' => sanitize_text_field($_POST['teacher_name']),
    ]);

    if ($updated && !is_wp_error($updated)) {
        update_post_meta($post_id, 'teacher_name', sanitize_text_field($_POST['teacher_name']));
        update_post_meta($post_id, 'teacher_email', sanitize_email($_POST['teacher_email']));
        update_post_meta($post_id, 'teacher_phone_number', sanitize_text_field($_POST['teacher_phone_number']));
        update_post_meta($post_id, 'teacher_gender', sanitize_text_field($_POST['teacher_gender']));
        update_post_meta($post_id, 'teacher_date_of_birth', sanitize_text_field($_POST['teacher_date_of_birth']));
        update_post_meta($post_id, 'teacher_religion', sanitize_text_field($_POST['teacher_religion']));
        if (!empty($_FILES['teacher_profile_photo']['name'])) {
            require_once(ABSPATH . 'wp-admin/includes/image.php');
            $attachment_id = media_handle_upload('teacher_profile_photo', $post_id);
            if (!is_wp_error($attachment_id)) {
                update_post_meta($post_id, 'teacher_profile_photo', $attachment_id);
            }
        }
        update_post_meta($post_id, 'teacher_blood_group', sanitize_text_field($_POST['teacher_blood_group']));
        update_post_meta($post_id, 'teacher_height', sanitize_text_field($_POST['teacher_height']));
        update_post_meta($post_id, 'teacher_weight', sanitize_text_field($_POST['teacher_weight']));
        update_post_meta($post_id, 'teacher_current_address', sanitize_textarea_field($_POST['teacher_current_address']));
        update_post_meta($post_id, 'teacher_permanent_address', sanitize_textarea_field($_POST['teacher_permanent_address']));
        update_post_meta($post_id, 'teacher_roll_number', sanitize_text_field($_POST['teacher_roll_number']));
        update_post_meta($post_id, 'teacher_admission_date', sanitize_text_field($_POST['teacher_admission_date']));
        update_post_meta($post_id, 'teacher_department', sanitize_text_field($_POST['teacher_department']));
        wp_send_json_success(['message' => 'Teacher updated']);
    } else {
        wp_send_json_error(['message' => 'Failed to update teacher']);
    }
}

add_action('wp_ajax_su_p_delete_teacher', 'su_p_delete_teacher');
function su_p_delete_teacher() {
    check_ajax_referer('su_p_teacher_nonce', 'nonce');
    $teacher_id = intval($_POST['teacher_id']);
    if (wp_delete_post($teacher_id, true)) {
        wp_send_json_success(['message' => 'Teacher deleted']);
    } else {
        wp_send_json_error(['message' => 'Failed to delete teacher']);
    }
}

// Add Teacher Function (Create)
function render_su_p_add_teachers() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to add teachers.</p>';
    }

    global $wpdb;
    $centers = get_posts([
        'post_type' => 'educational-center',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    $add_message = '';
    if (isset($_POST['su_p_add_teacher']) && check_admin_referer('su_p_teacher_add', 'nonce')) {
        $education_center_id = sanitize_text_field($_POST['educational_center_id']);
        $teacher_id = 'TEA-' . $education_center_id . '-' . strtoupper(substr(uniqid(), -5)); // Fixed unique ID generation
        $fields = [
            'teacher_name' => sanitize_text_field($_POST['teacher_name']),
            'teacher_email' => sanitize_email($_POST['teacher_email']),
            'teacher_phone_number' => sanitize_text_field($_POST['teacher_phone_number']),
            'teacher_gender' => sanitize_text_field($_POST['teacher_gender']),
            'teacher_date_of_birth' => sanitize_text_field($_POST['teacher_date_of_birth']),
            'teacher_religion' => sanitize_text_field($_POST['teacher_religion']),
            'teacher_blood_group' => sanitize_text_field($_POST['teacher_blood_group']),
            'teacher_height' => sanitize_text_field($_POST['teacher_height']),
            'teacher_weight' => sanitize_text_field($_POST['teacher_weight']),
            'teacher_current_address' => sanitize_textarea_field($_POST['teacher_current_address']),
            'teacher_permanent_address' => sanitize_textarea_field($_POST['teacher_permanent_address']),
            'teacher_roll_number' => sanitize_text_field($_POST['teacher_roll_number']),
            'teacher_admission_date' => sanitize_text_field($_POST['teacher_admission_date']),
            'teacher_department' => sanitize_text_field($_POST['teacher_department'])
        ];

        if (empty($education_center_id) || empty($fields['teacher_name']) || empty($fields['teacher_email'])) {
            $add_message = '<div class="alert alert-danger">Required fields are missing.</div>';
        } else {
            $exists = get_posts([
                'post_type' => 'teacher',
                'meta_query' => [
                    ['key' => 'teacher_id', 'value' => $teacher_id],
                    ['key' => 'educational_center_id', 'value' => $education_center_id]
                ]
            ]);

            if (!empty($exists)) {
                $add_message = '<div class="alert alert-danger">Teacher ID already exists for this center.</div>';
            } else {
                $meta_input = array_merge(['teacher_id' => $teacher_id, 'educational_center_id' => $education_center_id], $fields);
                if (!empty($_FILES['teacher_profile_photo']['name'])) {
                    $upload = wp_handle_upload($_FILES['teacher_profile_photo'], ['test_form' => false]);
                    if (isset($upload['error'])) {
                        $add_message = '<div class="alert alert-danger">File upload error: ' . esc_html($upload['error']) . '</div>';
                    } elseif (isset($upload['file'])) {
                        $attachment_id = wp_insert_attachment([
                            'post_mime_type' => $upload['type'],
                            'post_title' => basename($upload['file']),
                            'post_content' => '',
                            'post_status' => 'inherit'
                        ], $upload['file']);
                        wp_generate_attachment_metadata($attachment_id, $upload['file']);
                        $meta_input['teacher_profile_photo'] = $attachment_id;
                    }
                }

                $post_id = wp_insert_post([
                    'post_title' => $teacher_id,
                    'post_type' => 'teacher',
                    'post_status' => 'publish',
                    'meta_input' => $meta_input
                ]);

                if (is_wp_error($post_id)) {
                    $add_message = '<div class="alert alert-danger">Error adding teacher: ' . esc_html($post_id->get_error_message()) . '</div>';
                } elseif ($post_id) {
                    $add_message = '<div class="alert alert-success">Teacher added successfully.</div>';
                } else {
                    $add_message = '<div class="alert alert-danger">Failed to add teacher.</div>';
                }
            }
        }        wp_redirect($_SERVER['REQUEST_URI']);

    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Add Teacher</h2>
                <div id="add-teacher-form-container">
                    <?php if ($add_message) echo $add_message; ?>
                    <form id="add-teacher-form" method="post" enctype="multipart/form-data">
                        <div class="search-filters">
                            <label>Teacher ID</label>
                            <input type="text" id="add-teacher-id" name="teacher_id" readonly>
                        </div>
                        <div class="search-filters">
                            <label>Education Center</label>
                            <select id="add-center-id" name="educational_center_id" required>
                                <option value="">Select Center</option>
                                <?php foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID;
                                    echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title) . " ($center_id)</option>";
                                } ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Teacher Name</label>
                            <input type="text" name="teacher_name" required>
                        </div>
                        <div class="search-filters">
                            <label>Email</label>
                            <input type="email" name="teacher_email" required>
                        </div>
                        <div class="search-filters">
                            <label>Phone Number</label>
                            <input type="text" name="teacher_phone_number">
                        </div>
                        <div class="search-filters">
                            <label>Gender</label>
                            <select name="teacher_gender">
                                <option value="">Select Gender</option>
                                <option value="male">Male</option>
                                <option value="female">Female</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Date of Birth</label>
                            <input type="date" name="teacher_date_of_birth">
                        </div>
                        <div class="search-filters">
                            <label>Religion</label>
                            <select name="teacher_religion">
                                <option value="">Select Religion</option>
                                <option value="christianity">Christianity</option>
                                <option value="islam">Islam</option>
                                <option value="hinduism">Hinduism</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Blood Group</label>
                            <select name="teacher_blood_group">
                                <option value="">Select Blood Group</option>
                                <option value="A+">A+</option>
                                <option value="A-">A-</option>
                                <option value="B+">B+</option>
                                <option value="B-">B-</option>
                                <option value="O+">O+</option>
                                <option value="O-">O-</option>
                                <option value="AB+">AB+</option>
                                <option value="AB-">AB-</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Height (cm)</label>
                            <input type="number" name="teacher_height" step="0.1">
                        </div>
                        <div class="search-filters">
                            <label>Weight (kg)</label>
                            <input type="number" name="teacher_weight" step="0.1">
                        </div>
                        <div class="search-filters">
                            <label>Current Address</label>
                            <textarea name="teacher_current_address"></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Permanent Address</label>
                            <textarea name="teacher_permanent_address"></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Roll Number</label>
                            <input type="text" name="teacher_roll_number" required>
                        </div>
                        <div class="search-filters">
                            <label>Admission Date</label>
                            <input type="date" name="teacher_admission_date" required>
                        </div>
                        <div class="search-filters">
                            <label>Department</label>
                            <input type="text" name="teacher_department">
                        </div>
                        <div class="search-filters">
                            <label>Profile Photo</label>
                            <input type="file" name="teacher_profile_photo">
                        </div>
                        <?php wp_nonce_field('su_p_teacher_add', 'nonce'); ?>
                        <input type="hidden" name="su_p_add_teacher" value="1">
                        <div class="actions">
                            <button type="submit" class="button">Add Teacher</button>
                            <a href="<?php echo admin_url('admin.php?page=su-p-teachers-management'); ?>" class="button">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const loader = document.getElementById('edu-loader');
        const centerSelect = document.getElementById('add-center-id');
        const teacherIdInput = document.getElementById('add-teacher-id');

        function showLoader() { loader.style.display = 'block'; }
        function hideLoader() { loader.style.display = 'none'; }

        centerSelect.addEventListener('change', function() {
            const centerId = this.value;
            if (centerId) {
                // Generate a unique teacher ID based on center ID
                teacherIdInput.value = 'TEA-' + centerId + '-' + Math.random().toString(36).substr(2, 5).toUpperCase();
            } else {
                teacherIdInput.value = '';
            }
        });

        document.getElementById('add-teacher-form').addEventListener('submit', function(e) {
            showLoader();
            setTimeout(() => {
                <?php if (isset($_POST['su_p_add_teacher']) && strpos($add_message, 'success') !== false) { ?>
                    alert('Teacher added successfully');
                    window.location.href = '<?php echo admin_url('admin.php?page=su-p-teachers-management'); ?>';
                <?php } else { ?>
                    hideLoader();
                    <?php if ($add_message) { ?>
                        document.getElementById('add-teacher-form-container').innerHTML = '<?php echo addslashes($add_message); ?>' + document.getElementById('add-teacher-form-container').innerHTML;
                    <?php } ?>
                <?php } ?>
            }, 500);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Edit Teacher Function (Update)
function render_su_p_edit_teachers() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to edit teachers.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $teachers = get_posts(['post_type' => 'teacher', 'posts_per_page' => -1, 'orderby' => 'meta_value', 'meta_key' => 'teacher_name', 'order' => 'ASC']);

    foreach ($teachers as $teacher) {
        $teacher->teacher_id = get_post_meta($teacher->ID, 'teacher_id', true);
        $teacher->educational_center_id = get_post_meta($teacher->ID, 'educational_center_id', true);
        $teacher->teacher_name = get_post_meta($teacher->ID, 'teacher_name', true);
        $teacher->teacher_email = get_post_meta($teacher->ID, 'teacher_email', true);
        $teacher->teacher_phone_number = get_post_meta($teacher->ID, 'teacher_phone_number', true);
        $teacher->teacher_gender = get_post_meta($teacher->ID, 'teacher_gender', true);
        $teacher->teacher_date_of_birth = get_post_meta($teacher->ID, 'teacher_date_of_birth', true);
        $teacher->teacher_religion = get_post_meta($teacher->ID, 'teacher_religion', true);
        $teacher->teacher_blood_group = get_post_meta($teacher->ID, 'teacher_blood_group', true);
        $teacher->teacher_height = get_post_meta($teacher->ID, 'teacher_height', true);
        $teacher->teacher_weight = get_post_meta($teacher->ID, 'teacher_weight', true);
        $teacher->teacher_current_address = get_post_meta($teacher->ID, 'teacher_current_address', true);
        $teacher->teacher_permanent_address = get_post_meta($teacher->ID, 'teacher_permanent_address', true);
        $teacher->teacher_roll_number = get_post_meta($teacher->ID, 'teacher_roll_number', true);
        $teacher->teacher_admission_date = get_post_meta($teacher->ID, 'teacher_admission_date', true);
        $teacher->teacher_department = get_post_meta($teacher->ID, 'teacher_department', true);
        $teacher->teacher_profile_photo = get_post_meta($teacher->ID, 'teacher_profile_photo', true);
        $teacher->profile_picture_url = $teacher->teacher_profile_photo ? wp_get_attachment_url($teacher->teacher_profile_photo) : '';
    }

    $edit_message = '';
    if (isset($_POST['su_p_edit_teacher']) && check_admin_referer('su_p_teacher_edit', 'nonce')) {
        $teacher_post_id = intval($_POST['teacher_post_id']);
        $fields = [
            'educational_center_id' => sanitize_text_field($_POST['educational_center_id']),
            'teacher_name' => sanitize_text_field($_POST['teacher_name']),
            'teacher_email' => sanitize_email($_POST['teacher_email']),
            'teacher_phone_number' => sanitize_text_field($_POST['teacher_phone_number']),
            'teacher_gender' => sanitize_text_field($_POST['teacher_gender']),
            'teacher_date_of_birth' => sanitize_text_field($_POST['teacher_date_of_birth']),
            'teacher_religion' => sanitize_text_field($_POST['teacher_religion']),
            'teacher_blood_group' => sanitize_text_field($_POST['teacher_blood_group']),
            'teacher_height' => sanitize_text_field($_POST['teacher_height']),
            'teacher_weight' => sanitize_text_field($_POST['teacher_weight']),
            'teacher_current_address' => sanitize_textarea_field($_POST['teacher_current_address']),
            'teacher_permanent_address' => sanitize_textarea_field($_POST['teacher_permanent_address']),
            'teacher_roll_number' => sanitize_text_field($_POST['teacher_roll_number']),
            'teacher_admission_date' => sanitize_text_field($_POST['teacher_admission_date']),
            'teacher_department' => sanitize_text_field($_POST['teacher_department'])
        ];

        if (empty($teacher_post_id) || empty($fields['teacher_name']) || empty($fields['teacher_email'])) {
            $edit_message = '<div class="alert alert-danger">Required fields are missing.</div>';
        } else {
            $updated = wp_update_post(['ID' => $teacher_post_id, 'post_title' => get_post_meta($teacher_post_id, 'teacher_id', true)]);
            if (is_wp_error($updated)) {
                $edit_message = '<div class="alert alert-danger">Error updating teacher: ' . esc_html($updated->get_error_message()) . '</div>';
            } elseif ($updated !== 0) {
                foreach ($fields as $key => $value) {
                    update_post_meta($teacher_post_id, $key, $value);
                }
                if (!empty($_FILES['teacher_profile_photo']['name'])) {
                    $upload = wp_handle_upload($_FILES['teacher_profile_photo'], ['test_form' => false]);
                    if (isset($upload['error'])) {
                        $edit_message = '<div class="alert alert-danger">File upload error: ' . esc_html($upload['error']) . '</div>';
                    } elseif (isset($upload['file'])) {
                        $attachment_id = wp_insert_attachment([
                            'post_mime_type' => $upload['type'],
                            'post_title' => basename($upload['file']),
                            'post_content' => '',
                            'post_status' => 'inherit'
                        ], $upload['file']);
                        wp_generate_attachment_metadata($attachment_id, $upload['file']);
                        update_post_meta($teacher_post_id, 'teacher_profile_photo', $attachment_id);
                    }
                }
                $edit_message = '<div class="alert alert-success">Teacher updated successfully.</div>';
            } else {
                $edit_message = '<div class="alert alert-danger">Failed to update teacher.</div>';
            }
        }        wp_redirect($_SERVER['REQUEST_URI']);

    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Edit Teachers</h2>
                <div class="management-table-wrapper">
                    <table id="teachers-table" class="management-table">
                        <thead>
                            <tr>
                                <th>Teacher ID</th>
                                <th>Edu Center ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Roll Number</th>
                                <th>Department</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="teachers-tbody">
                            <?php
                            if (!empty($teachers)) {
                                foreach ($teachers as $teacher) {
                                    echo "<tr data-teacher-id='" . esc_attr($teacher->ID) . "'>
                                        <td>" . esc_html($teacher->teacher_id) . "</td>
                                        <td>" . esc_html($teacher->educational_center_id) . "</td>
                                        <td>" . esc_html($teacher->teacher_name) . "</td>
                                        <td>" . esc_html($teacher->teacher_email) . "</td>
                                        <td>" . esc_html($teacher->teacher_phone_number) . "</td>
                                        <td>" . esc_html($teacher->teacher_roll_number) . "</td>
                                        <td>" . esc_html($teacher->teacher_department) . "</td>
                                        <td>
                                            <button class='button edit-teacher-modal-btn'
                                                data-teacher-id='" . esc_attr($teacher->ID) . "'
                                                data-name='" . esc_attr($teacher->teacher_name) . "'
                                                data-email='" . esc_attr($teacher->teacher_email) . "'
                                                data-phone='" . esc_attr($teacher->teacher_phone_number) . "'
                                                data-center-id='" . esc_attr($teacher->educational_center_id) . "'
                                                data-gender='" . esc_attr($teacher->teacher_gender) . "'
                                                data-dob='" . esc_attr($teacher->teacher_date_of_birth) . "'
                                                data-religion='" . esc_attr($teacher->teacher_religion) . "'
                                                data-blood-group='" . esc_attr($teacher->teacher_blood_group) . "'
                                                data-height='" . esc_attr($teacher->teacher_height) . "'
                                                data-weight='" . esc_attr($teacher->teacher_weight) . "'
                                                data-current-address='" . esc_attr($teacher->teacher_current_address) . "'
                                                data-permanent-address='" . esc_attr($teacher->teacher_permanent_address) . "'
                                                data-roll-number='" . esc_attr($teacher->teacher_roll_number) . "'
                                                data-admission-date='" . esc_attr($teacher->teacher_admission_date) . "'
                                                data-department='" . esc_attr($teacher->teacher_department) . "'
                                                data-profile-photo='" . esc_attr($teacher->profile_picture_url) . "'>Edit</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="8">No teachers found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-teachers-management'); ?>" class="button">Back to Teachers</a>
                </div>
            </div>
        </div>
    </div>

    <div class="edu-modal" id="editTeacherModal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="editTeacherModal">×</span>
            <h3>Edit Teacher</h3>
            <div id="edit-teacher-form-container">
                <?php if ($edit_message) echo $edit_message; ?>
                <form id="edit-teacher-form" method="post" enctype="multipart/form-data">
                    <input type="hidden" id="edit-teacher-post-id" name="teacher_post_id">
                    <div class="search-filters">
                        <label>Teacher ID</label>
                        <input type="text" id="edit-teacher-id" name="teacher_id" readonly>
                    </div>
                    <div class="search-filters">
                        <label>Education Center</label>
                        <select id="edit-center-id" name="educational_center_id" required>
                            <option value="">Select Center</option>
                            <?php foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID;
                                echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title) . " ($center_id)</option>";
                            } ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Teacher Name</label>
                        <input type="text" id="edit-name" name="teacher_name" required>
                    </div>
                    <div class="search-filters">
                        <label>Email</label>
                        <input type="email" id="edit-email" name="teacher_email" required>
                    </div>
                    <div class="search-filters">
                        <label>Phone Number</label>
                        <input type="text" id="edit-phone" name="teacher_phone_number">
                    </div>
                    <div class="search-filters">
                        <label>Gender</label>
                        <select id="edit-gender" name="teacher_gender">
                            <option value="">Select Gender</option>
                            <option value="male">Male</option>
                            <option value="female">Female</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Date of Birth</label>
                        <input type="date" id="edit-dob" name="teacher_date_of_birth">
                    </div>
                    <div class="search-filters">
                        <label>Religion</label>
                        <select id="edit-religion" name="teacher_religion">
                            <option value="">Select Religion</option>
                            <option value="christianity">Christianity</option>
                            <option value="islam">Islam</option>
                            <option value="hinduism">Hinduism</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Blood Group</label>
                        <select id="edit-blood-group" name="teacher_blood_group">
                            <option value="">Select Blood Group</option>
                            <option value="A+">A+</option>
                            <option value="A-">A-</option>
                            <option value="B+">B+</option>
                            <option value="B-">B-</option>
                            <option value="O+">O+</option>
                            <option value="O-">O-</option>
                            <option value="AB+">AB+</option>
                            <option value="AB-">AB-</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Height (cm)</label>
                        <input type="number" id="edit-height" name="teacher_height" step="0.1">
                    </div>
                    <div class="search-filters">
                        <label>Weight (kg)</label>
                        <input type="number" id="edit-weight" name="teacher_weight" step="0.1">
                    </div>
                    <div class="search-filters">
                        <label>Current Address</label>
                        <textarea id="edit-current-address" name="teacher_current_address"></textarea>
                    </div>
                    <div class="search-filters">
                        <label>Permanent Address</label>
                        <textarea id="edit-permanent-address" name="teacher_permanent_address"></textarea>
                    </div>
                    <div class="search-filters">
                        <label>Roll Number</label>
                        <input type="text" id="edit-roll-number" name="teacher_roll_number" required>
                    </div>
                    <div class="search-filters">
                        <label>Admission Date</label>
                        <input type="date" id="edit-admission-date" name="teacher_admission_date" required>
                    </div>
                    <div class="search-filters">
                        <label>Department</label>
                        <input type="text" id="edit-department" name="teacher_department">
                    </div>
                    <div class="search-filters">
                        <label>Profile Photo</label>
                        <img id="edit-profile-photo-preview" style="max-width: 200px; display: none;">
                        <input type="file" id="edit-profile-photo" name="teacher_profile_photo">
                    </div>
                    <?php wp_nonce_field('su_p_teacher_edit', 'nonce'); ?>
                    <input type="hidden" name="su_p_edit_teacher" value="1">
                    <button type="submit" class="button">Update Teacher</button>
                </form>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const loader = document.getElementById('edu-loader');
        const modal = document.getElementById('editTeacherModal');
        const tbody = document.getElementById('teachers-tbody');

        function showLoader() { loader.style.display = 'block'; }
        function hideLoader() { loader.style.display = 'none'; }
        function showModal() { modal.style.display = 'flex'; }
        function hideModal() { modal.style.display = 'none'; }

        tbody.addEventListener('click', function(e) {
            if (e.target.classList.contains('edit-teacher-modal-btn')) {
                const btn = e.target;
                document.getElementById('edit-teacher-post-id').value = btn.dataset.teacherId;
                document.getElementById('edit-teacher-id').value = btn.closest('tr').cells[0].textContent;
                document.getElementById('edit-center-id').value = btn.dataset.centerId;
                document.getElementById('edit-name').value = btn.dataset.name;
                document.getElementById('edit-email').value = btn.dataset.email;
                document.getElementById('edit-phone').value = btn.dataset.phone;
                document.getElementById('edit-gender').value = btn.dataset.gender;
                document.getElementById('edit-dob').value = btn.dataset.dob;
                document.getElementById('edit-religion').value = btn.dataset.religion;
                document.getElementById('edit-blood-group').value = btn.dataset.bloodGroup;
                document.getElementById('edit-height').value = btn.dataset.height;
                document.getElementById('edit-weight').value = btn.dataset.weight;
                document.getElementById('edit-current-address').value = btn.dataset.currentAddress;
                document.getElementById('edit-permanent-address').value = btn.dataset.permanentAddress;
                document.getElementById('edit-roll-number').value = btn.dataset.rollNumber;
                document.getElementById('edit-admission-date').value = btn.dataset.admissionDate;
                document.getElementById('edit-department').value = btn.dataset.department;
                const preview = document.getElementById('edit-profile-photo-preview');
                if (btn.dataset.profilePhoto) {
                    preview.src = btn.dataset.profilePhoto;
                    preview.style.display = 'block';
                } else {
                    preview.style.display = 'none';
                }
                showModal();
            }
        });

        document.querySelector('.edu-modal-close').addEventListener('click', hideModal);
        modal.addEventListener('click', (e) => { if (e.target === modal) hideModal(); });

        document.getElementById('edit-profile-photo').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('edit-profile-photo-preview').src = e.target.result;
                    document.getElementById('edit-profile-photo-preview').style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('edit-teacher-form').addEventListener('submit', function(e) {
            e.preventDefault();
            showLoader();
            this.submit();
            setTimeout(() => {
                <?php if (isset($_POST['su_p_edit_teacher']) && strpos($edit_message, 'success') !== false) { ?>
                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData);
                    const row = document.querySelector(`tr[data-teacher-id="${data.teacher_post_id}"]`);
                    row.cells[2].textContent = data.teacher_name;
                    row.cells[3].textContent = data.teacher_email;
                    row.cells[4].textContent = data.teacher_phone_number;
                    row.cells[1].textContent = data.educational_center_id;
                    row.cells[5].textContent = data.teacher_roll_number;
                    row.cells[6].textContent = data.teacher_department;
                    const btn = row.querySelector('.edit-teacher-modal-btn');
                    btn.dataset.name = data.teacher_name;
                    btn.dataset.email = data.teacher_email;
                    btn.dataset.phone = data.teacher_phone_number;
                    btn.dataset.centerId = data.educational_center_id;
                    btn.dataset.gender = data.teacher_gender;
                    btn.dataset.dob = data.teacher_date_of_birth;
                    btn.dataset.religion = data.teacher_religion;
                    btn.dataset.bloodGroup = data.teacher_blood_group;
                    btn.dataset.height = data.teacher_height;
                    btn.dataset.weight = data.teacher_weight;
                    btn.dataset.currentAddress = data.teacher_current_address;
                    btn.dataset.permanentAddress = data.teacher_permanent_address;
                    btn.dataset.rollNumber = data.teacher_roll_number;
                    btn.dataset.admissionDate = data.teacher_admission_date;
                    btn.dataset.department = data.teacher_department;
                    alert('Teacher updated successfully');
                    hideModal();
                    hideLoader();
                <?php } else { ?>
                    hideLoader();
                    <?php if ($edit_message) { ?>
                        document.getElementById('edit-teacher-form-container').innerHTML = '<?php echo addslashes($edit_message); ?>' + document.getElementById('edit-teacher-form-container').innerHTML;
                    <?php } ?>
                <?php } ?>
            }, 500);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Delete Teacher Function (Delete)
function render_su_p_delete_teachers() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to delete teachers.</p>';
    }

    global $wpdb;
    $teachers = get_posts(['post_type' => 'teacher', 'posts_per_page' => -1, 'orderby' => 'meta_value', 'meta_key' => 'teacher_name', 'order' => 'ASC']);

    foreach ($teachers as $teacher) {
        $teacher->teacher_id = get_post_meta($teacher->ID, 'teacher_id', true);
        $teacher->educational_center_id = get_post_meta($teacher->ID, 'educational_center_id', true);
        $teacher->teacher_name = get_post_meta($teacher->ID, 'teacher_name', true);
        $teacher->teacher_email = get_post_meta($teacher->ID, 'teacher_email', true);
        $teacher->teacher_phone_number = get_post_meta($teacher->ID, 'teacher_phone_number', true);
        $teacher->teacher_roll_number = get_post_meta($teacher->ID, 'teacher_roll_number', true);
        $teacher->teacher_department = get_post_meta($teacher->ID, 'teacher_department', true);
    }

    $delete_message = '';
    if (isset($_POST['su_p_delete_teacher']) && check_admin_referer('su_p_teacher_delete', 'nonce')) {
        $teacher_post_id = intval($_POST['teacher_post_id']);
        if (empty($teacher_post_id)) {
            $delete_message = '<div class="alert alert-danger">Invalid teacher ID.</div>';
        } else {
            $result = wp_delete_post($teacher_post_id, true);
            if ($result === false) {
                error_log("Failed to delete teacher post ID: $teacher_post_id. User: " . get_current_user_id());
                $delete_message = '<div class="alert alert-danger">Failed to delete teacher. Check debug.log.</div>';
            } else {
                $delete_message = '<div class="alert alert-success">Teacher deleted successfully.</div>';

            }
        }
        wp_redirect($_SERVER['REQUEST_URI']);

    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Teachers</h2>
                <div class="management-table-wrapper">
                    <table id="teachers-table" class="management-table">
                        <thead>
                            <tr>
                                <th>Teacher ID</th>
                                <th>Edu Center ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Roll Number</th>
                                <th>Department</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="teachers-tbody">
                            <?php
                            if (!empty($teachers)) {
                                foreach ($teachers as $teacher) {
                                    echo "<tr data-teacher-id='" . esc_attr($teacher->ID) . "'>
                                        <td>" . esc_html($teacher->teacher_id) . "</td>
                                        <td>" . esc_html($teacher->educational_center_id) . "</td>
                                        <td>" . esc_html($teacher->teacher_name) . "</td>
                                        <td>" . esc_html($teacher->teacher_email) . "</td>
                                        <td>" . esc_html($teacher->teacher_phone_number) . "</td>
                                        <td>" . esc_html($teacher->teacher_roll_number) . "</td>
                                        <td>" . esc_html($teacher->teacher_department) . "</td>
                                        <td>
                                            <button class='button delete-teacher-modal-btn' data-teacher-id='" . esc_attr($teacher->ID) . "'>Delete</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="8">No teachers found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-teachers-management'); ?>" class="button">Back to Teachers</a>
                </div>
            </div>
        </div>
    </div>

    <div class="edu-modal" id="deleteTeacherModal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="deleteTeacherModal">×</span>
            <h3>Confirm Deletion</h3>
            <div id="delete-teacher-container">
                <?php if ($delete_message) echo $delete_message; ?>
                <p id="delete-teacher-text"></p>
                <form id="delete-teacher-form" method="post">
                    <input type="hidden" id="delete-teacher-id" name="teacher_post_id">
                    <?php wp_nonce_field('su_p_teacher_delete', 'nonce'); ?>
                    <input type="hidden" name="su_p_delete_teacher" value="1">
                    <button type="submit" class="button">Delete</button>
                    <button type="button" class="button cancel-delete" onclick="document.getElementById('deleteTeacherModal').style.display='none'">Cancel</button>
                </form>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const loader = document.getElementById('edu-loader');
        const modal = document.getElementById('deleteTeacherModal');
        const tbody = document.getElementById('teachers-tbody');

        function showLoader() { loader.style.display = 'block'; }
        function hideLoader() { loader.style.display = 'none'; }
        function showModal() { modal.style.display = 'flex'; }
        function hideModal() { modal.style.display = 'none'; }

        tbody.addEventListener('click', function(e) {
            if (e.target.classList.contains('delete-teacher-modal-btn')) {
                const teacherId = e.target.getAttribute('data-teacher-id');
                document.getElementById('delete-teacher-id').value = teacherId;
                document.getElementById('delete-teacher-text').textContent = `Are you sure you want to delete teacher "${e.target.closest('tr').cells[0].textContent}"?`;
                showModal();
            }
        });

        document.querySelector('.edu-modal-close').addEventListener('click', hideModal);
        modal.addEventListener('click', (e) => { if (e.target === modal) hideModal(); });

        document.getElementById('delete-teacher-form').addEventListener('submit', function(e) {
            e.preventDefault();
            showLoader();
            const teacherId = document.getElementById('delete-teacher-id').value;
            this.submit();
            setTimeout(() => {
                <?php if (isset($_POST['su_p_delete_teacher']) && strpos($delete_message, 'success') !== false) { ?>
                    const row = document.querySelector(`tr[data-teacher-id="${teacherId}"]`);
                    if (row) {
                        row.remove();
                        if (tbody.children.length === 0) {
                            tbody.innerHTML = '<tr><td colspan="8">No teachers found.</td></tr>';
                        }
                        alert('Teacher deleted successfully');
                    }
                    hideModal();
                    hideLoader();
                <?php } else { ?>
                    hideLoader();
                    <?php if ($delete_message) { ?>
                        document.getElementById('delete-teacher-container').innerHTML = '<?php echo addslashes($delete_message); ?>' + document.getElementById('delete-teacher-container').innerHTML;
                    <?php } ?>
                <?php } ?>
            }, 500);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

//students
// Main Students Management Function (Read)
// Main Students Management Function (Read)
function render_su_p_students_management() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to view this dashboard.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $table_name = $wpdb->prefix . 'class_sections';

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Students Management</h2>
                <div class="edu-students-actions" style="margin-bottom: 20px;">
                    <button id="add-student-btn" class="button edu-button-primary">Add New Student</button>
                    <input type="text" id="student-search" class="edu-search-input" placeholder="Search Students..." style="margin-left: 20px; padding: 8px; width: 300px;">
                    <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Educational Centers</option>
                        <?php foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        } ?>
                    </select>
                </div>
                <div class="edu-pagination" style="margin: 20px 0;">
                    <label for="students-per-page">Show:</label>
                    <select id="students-per-page" class="edu-select" style="margin-right: 20px;">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button class="edu-button edu-button-nav" id="prev-page" disabled>Previous</button>
                    <span id="page-info" style="margin: 0 10px;"></span>
                    <button class="edu-button edu-button-nav" id="next-page">Next</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="export-tools" id="export-tools" style="margin-bottom: 10px;"></div>
                    <table id="students-table" class="management-table">
                        <thead>
                            <tr>
                                <th>Student ID</th>
                                <th>Edu Center ID</th>
                                <th>Edu Center Name</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Class</th>
                                <th>Section</th>
                                <th>Roll Number</th>
                                <th>Admission Number</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="students-tbody">
                            <!-- Populated via JavaScript -->
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <button class="button" id="refresh-table">Refresh</button>
                </div>
            </div>
            <div id="modal-container" class="edu-modal" style="display: none;"></div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        let currentPage = 1;
        let perPage = 10;
        let searchQuery = '';
        let centerFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function showModal(content) { $('#modal-container').html(content).show(); }
        function hideModal() { $('#modal-container').hide().html(''); }

        function loadStudents(page, limit, query, center) {
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_fetch_students',
                    page: page,
                    per_page: limit,
                    search: query,
                    center_filter: center,
                    nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const students = response.data.students || [];
                        const total = response.data.total || 0;
                        let html = '';
                        students.forEach(student => {
                            html += `
                                <tr data-student-id="${student.ID}">
                                    <td>${student.student_id || 'N/A'}</td>
                                    <td>${student.educational_center_id || 'N/A'}</td>
                                    <td>${student.center_name || 'N/A'}</td>
                                    <td>${student.student_name || 'N/A'}</td>
                                    <td>${student.student_email || 'N/A'}</td>
                                    <td>${student.phone_number || 'N/A'}</td>
                                    <td>${student.class_name || 'N/A'}</td>
                                    <td>${student.section || 'N/A'}</td>
                                    <td>${student.roll_number || 'N/A'}</td>
                                    <td>${student.admission_number || 'N/A'}</td>
                                    <td>
                                        <button class="edu-button edu-button-edit" data-id="${student.ID}">Edit</button>
                                        <button class="edu-button edu-button-delete" data-id="${student.ID}">Delete</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#students-tbody').html(html || '<tr><td colspan="11">No students found.</td></tr>');
                        setupExportButtons();

                        const totalPages = Math.ceil(total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages}`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages || total === 0);
                    } else {
                        const message = response.data && response.data.message ? response.data.message : 'Failed to load students.';
                        $('#students-tbody').html(`<tr><td colspan="11">${message}</td></tr>`);
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#students-tbody').html('<tr><td colspan="11">Error loading students: ' + error + '</td></tr>');
                }
            });
        }

        function getTableData() {
            const table = $('#students-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim()).slice(0, -1);
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {
                const cells = Array.from(row.querySelectorAll('td')).slice(0, -1);
                return cells.map(td => td.textContent.trim());
            });
            return [headers, ...rows];
        }

        function exportToCSV() {
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `students_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
        }

        function exportToExcel() {
            if (!window.XLSX) { console.error('XLSX library not loaded'); return; }
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Students');
            XLSX.writeFile(wb, `students_${new Date().toISOString().slice(0,10)}.xlsx`);
        }

        function generatePDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ unit: 'mm', format: 'a4' });
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            const pageWidth = doc.internal.pageSize.width;
            const pageHeight = doc.internal.pageSize.height;
            const margin = 10;
            const borderColor = [70, 131, 180];

            doc.setDrawColor(...borderColor);
            doc.setLineWidth(1);
            doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);
            if (instituteLogo) {
                try { doc.addImage(instituteLogo, 'JPEG', (pageWidth - 24) / 2, 15, 24, 24); } catch (e) {}
            }
            doc.setFontSize(18);
            doc.setTextColor(...borderColor);
            doc.text(instituteName.toUpperCase(), pageWidth / 2, 45, { align: 'center' });
            doc.setFontSize(12);
            doc.setTextColor(102);
            doc.text('Students List', pageWidth / 2, 55, { align: 'center' });
            doc.setDrawColor(...borderColor);
            doc.line(margin + 5, 60, pageWidth - margin - 5, 60);

            const details = [['Date', new Date().toLocaleDateString()], ['Total Students', String(data.length - 1)]];
            let y = 70;
            details.forEach(([label, value]) => {
                doc.setFillColor(245, 245, 245);
                doc.rect(margin + 5, y, 50, 6, 'F');
                doc.setTextColor(...borderColor);
                doc.setFont('helvetica', 'bold');
                doc.text(label, margin + 7, y + 4);
                doc.setTextColor(51);
                doc.setFont('helvetica', 'normal');
                doc.text(String(value), margin + 60, y + 4);
                y += 6;
            });

            if (typeof doc.autoTable === 'function' && data.length > 1) {
                doc.autoTable({
                    startY: y + 10,
                    head: [data[0]],
                    body: data.slice(1),
                    theme: 'striped',
                    styles: { fontSize: 11, cellPadding: 2, overflow: 'linebreak', halign: 'center', textColor: [51, 51, 51] },
                    headStyles: { fillColor: borderColor, textColor: [255, 255, 255], fontStyle: 'bold' },
                    alternateRowStyles: { fillColor: [249, 249, 249] }
                });
                const finalY = doc.lastAutoTable.finalY || y + 10;
                doc.setFontSize(9);
                doc.setTextColor(102);
                doc.text(`Generated by Instituto on ${new Date().toISOString().slice(0,10)}`, pageWidth / 2, finalY + 20, { align: 'center' });
                doc.save(`students_${new Date().toISOString().slice(0,10)}.pdf`);
            }
        }

        function copyToClipboard() {
            const data = getTableData();
            const text = data.map(row => row.join('\t')).join('\n');
            navigator.clipboard.writeText(text).then(() => alert('Students copied to clipboard!'));
        }

        function printStudents() {
            const printWindow = window.open('', '_blank');
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            printWindow.document.write(`
                <html>
                <head><title>Students List</title>
                <style>
                    @media print {
                        body { font-family: Helvetica, sans-serif; margin: 10mm; width: 190mm; }
                        .page { border: 4px solid #4683b4; padding: 5mm; box-sizing: border-box; width: 100%; max-width: 190mm; }
                        .header { text-align: center; border-bottom: 2px solid #4683b4; margin-bottom: 10mm; }
                        .header img { width: 60px; height: 60px; margin-bottom: 5mm; }
                        .header h1 { font-size: 18pt; color: #4683b4; margin: 0; text-transform: uppercase; }
                        .header .subtitle { font-size: 12pt; color: #666; margin: 0; }
                        table { width: 100%; border-collapse: collapse; margin: 10mm 0; table-layout: fixed; }
                        th, td { border: 1px solid #e5e5e5; padding: 8px; text-align: center; word-wrap: break-word; font-size: 10pt; }
                        th { background: #4683b4; color: white; font-weight: bold; }
                        tr:nth-child(even) { background: #f9f9f9; }
                        .footer { text-align: center; font-size: 9pt; color: #666; margin-top: 10mm; }
                        @page { size: A4; margin: 10mm; }
                    }
                </style></head>
                <body>
                    <div class="page">
                        <div class="header">
                            ${instituteLogo ? `<img src="${instituteLogo}" alt="Logo" onerror="this.style.display='none';this.nextSibling.style.display='block';"><p style="display:none;">No logo available</p>` : '<p>No logo available</p>'}
                            <h1>${instituteName.toUpperCase()}</h1>
                            <p class="subtitle">Students List</p>
                        </div>
                        <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                        <p><strong>Total Students:</strong> ${data.length - 1}</p>
                        <table>
                            <thead><tr>${data[0].map(header => `<th>${header}</th>`).join('')}</tr></thead>
                            <tbody>${data.slice(1).map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}</tbody>
                        </table>
                        <div class="footer">
                            <p>Generated by Instituto on ${new Date().toISOString().slice(0,10)}</p>
                        </div>
                    </div>
                </body></html>
            `);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
        }

        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                <button class="export-btn export-copy" aria-label="Copy to Clipboard"><i class="fas fa-copy"></i><span class="tooltip">Copy to Clipboard</span></button>
                <button class="export-btn export-print" aria-label="Print"><i class="fas fa-print"></i><span class="tooltip">Print</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
            tools.find('.export-copy').on('click', copyToClipboard);
            tools.find('.export-print').on('click', printStudents);
        }

        $('#add-student-btn').on('click', function() {
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_get_add_form',
                    nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        showModal(response.data.html);
                    } else {
                        const message = response.data && response.data.message ? response.data.message : 'Error loading add form';
                        alert(message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error loading add form: ' + error);
                }
            });
        });

        $('#students-tbody').on('click', '.edu-button-edit', function() {
            const studentId = $(this).data('id');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_get_edit_form',
                    student_id: studentId,
                    nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        showModal(response.data.html);
                    } else {
                        const message = response.data && response.data.message ? response.data.message : 'Error loading edit form';
                        alert(message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error loading edit form: ' + error);
                }
            });
        });

        $('#students-tbody').on('click', '.edu-button-delete', function() {
            const studentId = $(this).data('id');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_get_delete_form',
                    student_id: studentId,
                    nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        showModal(response.data.html);
                    } else {
                        const message = response.data && response.data.message ? response.data.message : 'Error loading delete form';
                        alert(message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error loading delete form: ' + error);
                }
            });
        });

        loadStudents(currentPage, perPage, searchQuery, centerFilter);
        $('#student-search').on('input', function() {
            searchQuery = $(this).val();
            currentPage = 1;
            loadStudents(currentPage, perPage, searchQuery, centerFilter);
        });
        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadStudents(currentPage, perPage, searchQuery, centerFilter);
        });
        $('#students-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadStudents(currentPage, perPage, searchQuery, centerFilter);
        });
        $('#next-page').on('click', function() {
            currentPage++;
            loadStudents(currentPage, perPage, searchQuery, centerFilter);
        });
        $('#prev-page').on('click', function() {
            currentPage--;
            loadStudents(currentPage, perPage, searchQuery, centerFilter);
        });
        $('#refresh-table').on('click', function() {
            currentPage = 1;
            loadStudents(currentPage, perPage, searchQuery, centerFilter);
        });

        window.refreshStudentsTable = function() {
            loadStudents(currentPage, perPage, searchQuery, centerFilter);
        };
    });
    </script>
    <?php
    return ob_get_clean();
}

// Add Student Function (Create)
function render_su_p_add_students($ajax_mode = false) {
    if (!current_user_can('manage_options')) {
        return $ajax_mode ? '<p>You must be a Super Administrator to add students.</p>' : '<p>You must be a Super Administrator to add students.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $add_message = '';
    $initial_student_id = '';

    if (isset($_POST['su_p_add_student']) && check_admin_referer('su_p_student_add', 'nonce')) {
        $education_center_id = sanitize_text_field($_POST['educational_center_id']);
        $student_id = sanitize_text_field($_POST['student_id']);
        $fields = [
            'student_name' => sanitize_text_field($_POST['student_name']),
            'student_email' => sanitize_email($_POST['student_email']),
            'phone_number' => sanitize_text_field($_POST['phone_number']),
            'class' => sanitize_text_field($_POST['class_name']),
            'section' => sanitize_text_field($_POST['section']),
            'roll_number' => sanitize_text_field($_POST['roll_number']),
            'admission_number' => sanitize_text_field($_POST['admission_number']),
            'admission_date' => sanitize_text_field($_POST['admission_date']),
            'gender' => sanitize_text_field($_POST['gender']),
            'date_of_birth' => sanitize_text_field($_POST['date_of_birth']),
            'religion' => sanitize_text_field($_POST['religion']),
            'blood_group' => sanitize_text_field($_POST['blood_group']),
            'height' => sanitize_text_field($_POST['height']),
            'weight' => sanitize_text_field($_POST['weight']),
            'current_address' => sanitize_textarea_field($_POST['current_address']),
            'permanent_address' => sanitize_textarea_field($_POST['permanent_address'])
        ];

        if (empty($education_center_id) || empty($student_id) || empty($fields['student_name']) || empty($fields['admission_number'])) {
            $add_message = '<div class="alert alert-danger">Required fields are missing.</div>';
        } else {
            $exists = get_posts([
                'post_type' => 'students',
                'meta_query' => [
                    ['key' => 'student_id', 'value' => $student_id],
                    ['key' => 'educational_center_id', 'value' => $education_center_id]
                ]
            ]);

            if (!empty($exists)) {
                $add_message = '<div class="alert alert-danger">Student ID already exists for this center.</div>';
            } else {
                $meta_input = array_merge(['student_id' => $student_id, 'educational_center_id' => $education_center_id], $fields);
                if (!empty($_FILES['student_profile_photo']['name'])) {
                    $upload = wp_handle_upload($_FILES['student_profile_photo'], ['test_form' => false]);
                    if (isset($upload['error'])) {
                        $add_message = '<div class="alert alert-danger">File upload error: ' . esc_html($upload['error']) . '</div>';
                    } elseif (isset($upload['file'])) {
                        $attachment_id = wp_insert_attachment([
                            'post_mime_type' => $upload['type'],
                            'post_title' => basename($upload['file']),
                            'post_content' => '',
                            'post_status' => 'inherit'
                        ], $upload['file']);
                        wp_generate_attachment_metadata($attachment_id, $upload['file']);
                        $meta_input['student_profile_photo'] = $attachment_id;
                    }
                }

                $post_id = wp_insert_post([
                    'post_title' => $student_id,
                    'post_type' => 'students',
                    'post_status' => 'publish',
                    'meta_input' => $meta_input
                ]);

                if (is_wp_error($post_id)) {
                    $add_message = '<div class="alert alert-danger">Error adding student: ' . esc_html($post_id->get_error_message()) . '</div>';
                } elseif ($post_id) {
                    $add_message = '<div class="alert alert-success">Student added successfully.</div>';
                } else {
                    $add_message = '<div class="alert alert-danger">Failed to add student.</div>';
                }
            }
        }
        if ($ajax_mode) {
            echo json_encode(['success' => strpos($add_message, 'success') !== false, 'message' => $add_message]);
            exit;
        }
    }

    $gender_field = get_field_object('field_67ab1ab5978fc');
    $religion_field = get_field_object('field_67ab1b6d978fe');
    $blood_group_field = get_field_object('field_67ab1c0197900');

    ob_start();
    if ($ajax_mode) {
        ?>
        <div class="edu-modal-content">
            <span class="edu-modal-close" onclick="jQuery('#modal-container').hide().html('');">×</span>
            <h3>Add Student</h3>
            <div id="add-student-form-container">
                <?php if ($add_message) echo $add_message; ?>
                <form id="add-student-form" method="post" enctype="multipart/form-data">
        <?php } else { ?>
        <div class="management-main-wrapper">
            <div class="management-content-wrapper">
                <div id="edu-loader" class="edu-loader" style="display: none;">
                    <div class="edu-loader-container">
                        <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                    </div>
                </div>
                <div class="management-section">
                    <h2>Add Student</h2>
                    <div id="add-student-form-container">
                        <?php if ($add_message) echo $add_message; ?>
                        <form id="add-student-form" method="post" enctype="multipart/form-data">
        <?php } ?>
                        <div class="search-filters">
                            <label>Student ID</label>
                            <input type="text" id="add-student-id" name="student_id" value="<?php echo esc_attr($initial_student_id); ?>" readonly required>
                        </div>
                        <div class="search-filters">
                            <label>Education Center</label>
                            <select id="add-center-id" name="educational_center_id" required>
                                <option value="">Select Center</option>
                                <?php foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID;
                                    echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title) . " ($center_id)</option>";
                                } ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Class</label>
                            <select id="add-class-name" name="class_name" required>
                                <option value="">Select Class</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Section</label>
                            <select id="add-section" name="section" disabled required>
                                <option value="">Select Class First</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Student Name</label>
                            <input type="text" name="student_name" required>
                        </div>
                        <div class="search-filters">
                            <label>Email</label>
                            <input type="email" name="student_email">
                        </div>
                        <div class="search-filters">
                            <label>Phone Number</label>
                            <input type="text" name="phone_number">
                        </div>
                        <div class="search-filters">
                            <label>Roll Number</label>
                            <input type="text" name="roll_number" required>
                        </div>
                        <div class="search-filters">
                            <label>Admission Number</label>
                            <input type="text" name="admission_number" required>
                        </div>
                        <div class="search-filters">
                            <label>Admission Date</label>
                            <input type="date" name="admission_date" required>
                        </div>
                        <div class="search-filters">
                            <label>Gender</label>
                            <select name="gender">
                                <option value="">Select Gender</option>
                                <?php if ($gender_field) : foreach ($gender_field['choices'] as $value => $label) : ?>
                                    <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                                <?php endforeach; endif; ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Date of Birth</label>
                            <input type="date" name="date_of_birth">
                        </div>
                        <div class="search-filters">
                            <label>Religion</label>
                            <select name="religion">
                                <option value="">Select Religion</option>
                                <?php if ($religion_field) : foreach ($religion_field['choices'] as $value => $label) : ?>
                                    <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                                <?php endforeach; endif; ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Blood Group</label>
                            <select name="blood_group">
                                <option value="">Select Blood Group</option>
                                <?php if ($blood_group_field) : foreach ($blood_group_field['choices'] as $value => $label) : ?>
                                    <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                                <?php endforeach; endif; ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Height (cm)</label>
                            <input type="number" name="height" step="0.1">
                        </div>
                        <div class="search-filters">
                            <label>Weight (kg)</label>
                            <input type="number" name="weight" step="0.1">
                        </div>
                        <div class="search-filters">
                            <label>Current Address</label>
                            <textarea name="current_address"></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Permanent Address</label>
                            <textarea name="permanent_address"></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Profile Photo</label>
                            <input type="file" name="student_profile_photo" accept="image/*">
                        </div>
                        <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_student_add'); ?>">
                        <input type="hidden" name="su_p_add_student" value="1">
                        <button type="submit" class="button edu-button-primary">Add Student</button>
                        <?php if (!$ajax_mode) { ?>
                            <a href="<?php echo admin_url('admin.php?page=su-p-students-management'); ?>" class="button">Cancel</a>
                        <?php } ?>
                    </form>
                </div>
            </div>
        </div>
        <?php if ($ajax_mode) { ?>
        </div>
        <?php } ?>

        <script>
        jQuery(document).ready(function($) {
            const loader = $('#edu-loader');
            function showLoader() { loader.show(); }
            function hideLoader() { loader.hide(); }

            $('#add-center-id').on('change', function() {
                const centerId = $(this).val();
                if (centerId) {
                    showLoader();
                    $.ajax({
                        url: '<?php echo admin_url('admin-ajax.php'); ?>',
                        method: 'POST',
                        data: {
                            action: 'su_p_generate_student_id',
                            center_id: centerId,
                            nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                        },
                        success: function(response) {
                            if (response.success) {
                                $('#add-student-id').val(response.data.student_id);
                            }
                            $.ajax({
                                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                                method: 'POST',
                                data: {
                                    action: 'su_p_get_class_sections',
                                    center_id: centerId,
                                    nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                                },
                                success: function(response) {
                                    hideLoader();
                                    if (response.success) {
                                        const classes = response.data;
                                        let classOptions = '<option value="">Select Class</option>';
                                        classes.forEach(cls => {
                                            classOptions += `<option value="${cls.class_name}">${cls.class_name}</option>`;
                                        });
                                        $('#add-class-name').html(classOptions);
                                        $('#add-section').html('<option value="">Select Class First</option>').prop('disabled', true);
                                    }
                                }
                            });
                        }
                    });
                } else {
                    $('#add-student-id').val('');
                    $('#add-class-name').html('<option value="">Select Class</option>');
                    $('#add-section').html('<option value="">Select Class First</option>').prop('disabled', true);
                }
            });

            $('#add-class-name').on('change', function() {
                const centerId = $('#add-center-id').val();
                const selectedClass = $(this).val();
                if (selectedClass && centerId) {
                    showLoader();
                    $.ajax({
                        url: '<?php echo admin_url('admin-ajax.php'); ?>',
                        method: 'POST',
                        data: {
                            action: 'su_p_get_class_sections',
                            center_id: centerId,
                            nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                        },
                        success: function(response) {
                            hideLoader();
                            if (response.success) {
                                const classes = response.data;
                                const selectedClassData = classes.find(cls => cls.class_name === selectedClass);
                                let sectionOptions = '<option value="">Select Section</option>';
                                if (selectedClassData && selectedClassData.sections) {
                                    const sections = selectedClassData.sections.split(',');
                                    sections.forEach(section => {
                                        sectionOptions += `<option value="${section}">${section}</option>`;
                                    });
                                }
                                $('#add-section').html(sectionOptions).prop('disabled', false);
                            }
                        }
                    });
                }
            });

            $('#add-student-form').on('submit', function(e) {
                e.preventDefault();
                showLoader();
                const formData = new FormData(this);
                formData.append('action', 'su_p_add_student');
                $.ajax({
                    url: '<?php echo admin_url('admin-ajax.php'); ?>',
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            alert('Student added successfully');
                            <?php if ($ajax_mode) { ?>
                                $('#modal-container').hide().html('');
                                window.refreshStudentsTable();
                            <?php } else { ?>
                                window.location.href = '<?php echo admin_url('admin.php?page=su-p-students-management'); ?>';
                            <?php } ?>
                        } else {
                            $('#add-student-form-container').prepend(response.data.message);
                        }
                    }
                });
            });
        });
        </script>
        <?php
    return ob_get_clean();
}


// Edit Student Function (Update)
// Edit Student Function (Update)
function render_su_p_edit_students($ajax_mode = false, $student_id = 0) {
    if (!current_user_can('manage_options')) {
        return $ajax_mode ? '<p>You must be a Super Administrator to edit students.</p>' : '<p>You must be a Super Administrator to edit students.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $edit_message = '';
    $selected_student = $student_id ? get_post($student_id) : null;
    if ($selected_student && $selected_student->post_type === 'students') {
        $selected_student->meta = array_map('maybe_unserialize', get_post_meta($student_id));
    }

    if (isset($_POST['su_p_edit_student']) && check_admin_referer('su_p_student_edit', 'nonce')) {
        $student_post_id = intval($_POST['student_post_id']);
        $fields = [
            'educational_center_id' => sanitize_text_field($_POST['educational_center_id']),
            'student_name' => sanitize_text_field($_POST['student_name']),
            'student_email' => sanitize_email($_POST['student_email']),
            'phone_number' => sanitize_text_field($_POST['phone_number']),
            'class' => sanitize_text_field($_POST['class_name']),
            'section' => sanitize_text_field($_POST['section']),
            'roll_number' => sanitize_text_field($_POST['roll_number']),
            'admission_number' => sanitize_text_field($_POST['admission_number']),
            'admission_date' => sanitize_text_field($_POST['admission_date']),
            'gender' => sanitize_text_field($_POST['gender']),
            'date_of_birth' => sanitize_text_field($_POST['date_of_birth']),
            'religion' => sanitize_text_field($_POST['religion']),
            'blood_group' => sanitize_text_field($_POST['blood_group']),
            'height' => sanitize_text_field($_POST['height']),
            'weight' => sanitize_text_field($_POST['weight']),
            'current_address' => sanitize_textarea_field($_POST['current_address']),
            'permanent_address' => sanitize_textarea_field($_POST['permanent_address'])
        ];

        if (empty($student_post_id) || empty($fields['student_name']) || empty($fields['admission_number'])) {
            $edit_message = '<div class="alert alert-danger">Required fields are missing.</div>';
        } else {
            $updated = wp_update_post(['ID' => $student_post_id, 'post_title' => get_post_meta($student_post_id, 'student_id', true)]);
            if (is_wp_error($updated)) {
                $edit_message = '<div class="alert alert-danger">Error updating student: ' . esc_html($updated->get_error_message()) . '</div>';
            } elseif ($updated !== 0) {
                foreach ($fields as $key => $value) {
                    update_post_meta($student_post_id, $key, $value);
                }
                if (!empty($_FILES['student_profile_photo']['name'])) {
                    $upload = wp_handle_upload($_FILES['student_profile_photo'], ['test_form' => false]);
                    if (isset($upload['error'])) {
                        $edit_message = '<div class="alert alert-danger">File upload error: ' . esc_html($upload['error']) . '</div>';
                    } elseif (isset($upload['file'])) {
                        $attachment_id = wp_insert_attachment([
                            'post_mime_type' => $upload['type'],
                            'post_title' => basename($upload['file']),
                            'post_content' => '',
                            'post_status' => 'inherit'
                        ], $upload['file']);
                        wp_generate_attachment_metadata($attachment_id, $upload['file']);
                        update_post_meta($student_post_id, 'student_profile_photo', $attachment_id);
                    }
                }
                $edit_message = '<div class="alert alert-success">Student updated successfully.</div>';
            } else {
                $edit_message = '<div class="alert alert-danger">Failed to update student.</div>';
            }
        }
        if ($ajax_mode) {
            wp_send_json([
                'success' => strpos($edit_message, 'success') !== false,
                'data' => ['message' => $edit_message]
            ]);
            exit; // Ensure no further output
        }
    }

    // Rest of the function remains unchanged for rendering the form
    $gender_field = get_field_object('field_67ab1ab5978fc');
    $religion_field = get_field_object('field_67ab1b6d978fe');
    $blood_group_field = get_field_object('field_67ab1c0197900');

    ob_start();
    if ($ajax_mode) {
        ?>
        <div class="edu-modal-content">
            <span class="edu-modal-close" onclick="jQuery('#modal-container').hide().html('');">×</span>
            <h3>Edit Student</h3>
            <div id="edit-student-form-container">
                <?php if ($edit_message) echo $edit_message; ?>
                <?php if ($selected_student) { ?>
                    <form id="edit-student-form" method="post" enctype="multipart/form-data">
                <?php } ?>
        <?php
    } else {
        ?>
        <div class="management-main-wrapper">
            <div class="management-content-wrapper">
                <div id="edu-loader" class="edu-loader" style="display: none;">
                    <div class="edu-loader-container">
                        <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                    </div>
                </div>
                <?php echo render_su_p_students_management(); // Include the table ?>
                <div class="management-section">
                    <h2>Edit Student</h2>
                    <div id="edit-student-form-container">
                        <?php if ($edit_message) echo $edit_message; ?>
                        <?php if ($selected_student) { ?>
                            <form id="edit-student-form" method="post" enctype="multipart/form-data">
                        <?php } ?>
        <?php
    }
    if ($selected_student) {
        ?>
                        <input type="hidden" name="student_post_id" value="<?php echo esc_attr($selected_student->ID); ?>">
                        <div class="search-filters">
                            <label>Student ID</label>
                            <input type="text" name="student_id" value="<?php echo esc_attr($selected_student->meta['student_id'][0] ?? ''); ?>" readonly>
                        </div>
                        <div class="search-filters">
                            <label>Education Center</label>
                            <select id="edit-center-id" name="educational_center_id" required>
                                <option value="">Select Center</option>
                                <?php foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID;
                                    $selected = $center_id === ($selected_student->meta['educational_center_id'][0] ?? '') ? 'selected' : '';
                                    echo "<option value='" . esc_attr($center_id) . "' $selected>" . esc_html($center->post_title) . " ($center_id)</option>";
                                } ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Class</label>
                            <select id="edit-class-name" name="class_name" required>
                                <option value="">Select Class</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Section</label>
                            <select id="edit-section" name="section" disabled required>
                                <option value="">Select Class First</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Student Name</label>
                            <input type="text" name="student_name" value="<?php echo esc_attr($selected_student->meta['student_name'][0] ?? ''); ?>" required>
                        </div>
                        <div class="search-filters">
                            <label>Email</label>
                            <input type="email" name="student_email" value="<?php echo esc_attr($selected_student->meta['student_email'][0] ?? ''); ?>">
                        </div>
                        <div class="search-filters">
                            <label>Phone Number</label>
                            <input type="text" name="phone_number" value="<?php echo esc_attr($selected_student->meta['phone_number'][0] ?? ''); ?>">
                        </div>
                        <div class="search-filters">
                            <label>Roll Number</label>
                            <input type="text" name="roll_number" value="<?php echo esc_attr($selected_student->meta['roll_number'][0] ?? ''); ?>" required>
                        </div>
                        <div class="search-filters">
                            <label>Admission Number</label>
                            <input type="text" name="admission_number" value="<?php echo esc_attr($selected_student->meta['admission_number'][0] ?? ''); ?>" required>
                        </div>
                        <div class="search-filters">
                            <label>Admission Date</label>
                            <input type="date" name="admission_date" value="<?php echo esc_attr($selected_student->meta['admission_date'][0] ?? ''); ?>" required>
                        </div>
                        <div class="search-filters">
                            <label>Gender</label>
                            <select name="gender">
                                <option value="">Select Gender</option>
                                <?php if ($gender_field) { foreach ($gender_field['choices'] as $value => $label) { ?>
                                    <option value="<?php echo esc_attr($value); ?>" <?php echo ($selected_student->meta['gender'][0] ?? '') === $value ? 'selected' : ''; ?>><?php echo esc_html($label); ?></option>
                                <?php } } ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Date of Birth</label>
                            <input type="date" name="date_of_birth" value="<?php echo esc_attr($selected_student->meta['date_of_birth'][0] ?? ''); ?>">
                        </div>
                        <div class="search-filters">
                            <label>Religion</label>
                            <select name="religion">
                                <option value="">Select Religion</option>
                                <?php if ($religion_field) { foreach ($religion_field['choices'] as $value => $label) { ?>
                                    <option value="<?php echo esc_attr($value); ?>" <?php echo ($selected_student->meta['religion'][0] ?? '') === $value ? 'selected' : ''; ?>><?php echo esc_html($label); ?></option>
                                <?php } } ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Blood Group</label>
                            <select name="blood_group">
                                <option value="">Select Blood Group</option>
                                <?php if ($blood_group_field) { foreach ($blood_group_field['choices'] as $value => $label) { ?>
                                    <option value="<?php echo esc_attr($value); ?>" <?php echo ($selected_student->meta['blood_group'][0] ?? '') === $value ? 'selected' : ''; ?>><?php echo esc_html($label); ?></option>
                                <?php } } ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Height (cm)</label>
                            <input type="number" name="height" step="0.1" value="<?php echo esc_attr($selected_student->meta['height'][0] ?? ''); ?>">
                        </div>
                        <div class="search-filters">
                            <label>Weight (kg)</label>
                            <input type="number" name="weight" step="0.1" value="<?php echo esc_attr($selected_student->meta['weight'][0] ?? ''); ?>">
                        </div>
                        <div class="search-filters">
                            <label>Current Address</label>
                            <textarea name="current_address"><?php echo esc_textarea($selected_student->meta['current_address'][0] ?? ''); ?></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Permanent Address</label>
                            <textarea name="permanent_address"><?php echo esc_textarea($selected_student->meta['permanent_address'][0] ?? ''); ?></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Profile Photo</label>
                            <?php if (!empty($selected_student->meta['student_profile_photo'][0])) { ?>
                                <img src="<?php echo wp_get_attachment_url($selected_student->meta['student_profile_photo'][0]); ?>" style="max-width: 200px;">
                            <?php } ?>
                            <input type="file" name="student_profile_photo" accept="image/*">
                        </div>
                        <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_student_edit'); ?>">
                        <input type="hidden" name="su_p_edit_student" value="1">
                        <button type="submit" class="button edu-button-primary">Update Student</button>
                        <?php if (!$ajax_mode) { ?>
                            <a href="<?php echo admin_url('admin.php?page=su-p-students-management'); ?>" class="button">Cancel</a>
                        <?php } ?>
                    </form>
        <?php
    }
    ?>
                </div>
            </div>
        </div>

        <script>
        jQuery(document).ready(function($) {
            const loader = $('#edu-loader');
            function showLoader() { loader.show(); }
            function hideLoader() { loader.hide(); }

            $('#edit-center-id').on('change', function() {
                const centerId = $(this).val();
                if (centerId) {
                    showLoader();
                    $.ajax({
                        url: '<?php echo admin_url('admin-ajax.php'); ?>',
                        method: 'POST',
                        data: {
                            action: 'su_p_get_class_sections',
                            center_id: centerId,
                            nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                        },
                        success: function(response) {
                            hideLoader();
                            if (response.success) {
                                const classes = response.data;
                                let classOptions = '<option value="">Select Class</option>';
                                classes.forEach(cls => {
                                    const selected = cls.class_name === '<?php echo esc_js($selected_student->meta['class_name'][0] ?? ''); ?>' ? 'selected' : '';
                                    classOptions += `<option value="${cls.class_name}" ${selected}>${cls.class_name}</option>`;
                                });
                                $('#edit-class-name').html(classOptions);
                                $('#edit-class-name').trigger('change');
                            }
                        }
                    });
                } else {
                    $('#edit-class-name').html('<option value="">Select Class</option>');
                    $('#edit-section').html('<option value="">Select Class First</option>').prop('disabled', true);
                }
            });

            $('#edit-class-name').on('change', function() {
                const centerId = $('#edit-center-id').val();
                const selectedClass = $(this).val();
                if (selectedClass && centerId) {
                    showLoader();
                    $.ajax({
                        url: '<?php echo admin_url('admin-ajax.php'); ?>',
                        method: 'POST',
                        data: {
                            action: 'su_p_get_class_sections',
                            center_id: centerId,
                            nonce: '<?php echo wp_create_nonce('su_p_student_nonce'); ?>'
                        },
                        success: function(response) {
                            hideLoader();
                            if (response.success) {
                                const classes = response.data;
                                const selectedClassData = classes.find(cls => cls.class_name === selectedClass);
                                let sectionOptions = '<option value="">Select Section</option>';
                                if (selectedClassData && selectedClassData.sections) {
                                    const sections = selectedClassData.sections.split(',');
                                    sections.forEach(section => {
                                        const selected = section === '<?php echo esc_js($selected_student->meta['section'][0] ?? ''); ?>' ? 'selected' : '';
                                        sectionOptions += `<option value="${section}" ${selected}>${section}</option>`;
                                    });
                                }
                                $('#edit-section').html(sectionOptions).prop('disabled', false);
                            }
                        }
                    });
                }
            });

            <?php if ($selected_student) { ?>
                $('#edit-center-id').trigger('change');
            <?php } ?>

            $('#edit-student-form').on('submit', function(e) {
                e.preventDefault();
                showLoader();
                const formData = new FormData(this);
                formData.append('action', 'su_p_edit_student');
                $.ajax({
                    url: '<?php echo admin_url('admin-ajax.php'); ?>',
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            alert('Student updated successfully');
                            <?php if ($ajax_mode) { ?>
                                $('#modal-container').hide().html('');
                                window.refreshStudentsTable();
                            <?php } else { ?>
                                window.location.href = '<?php echo admin_url('admin.php?page=su-p-students-management'); ?>';
                            <?php } ?>
                        } else {
                            // Safely handle the message
                            const message = response.data && response.data.message ? response.data.message : 'An error occurred while updating the student.';
                            $('#edit-student-form-container').prepend(message);
                        }
                    },
                    error: function(xhr, status, error) {
                        hideLoader();
                        $('#edit-student-form-container').prepend('<div class="alert alert-danger">AJAX error: ' + error + '</div>');
                    }
                });
            });
        });
        </script>
    <?php
    return ob_get_clean();
}

// Delete Student Function (Delete)
// Delete Student Function (Delete)
// Delete Student Function (Delete)
function render_su_p_delete_students($ajax_mode = false, $student_id = 0) {
    if (!current_user_can('manage_options')) {
        return $ajax_mode ? '<p>You must be a Super Administrator to delete students.</p>' : '<p>You must be a Super Administrator to delete students.</p>';
    }

    global $wpdb;
    $delete_message = '';
    $selected_student_id = $student_id;

    if (isset($_POST['su_p_delete_student']) && check_admin_referer('su_p_student_delete', 'nonce')) {
        $student_post_id = intval($_POST['student_post_id']);
        if (empty($student_post_id)) {
            $delete_message = '<div class="alert alert-danger">Invalid student ID.</div>';
        } else {
            $result = wp_delete_post($student_post_id, true);
            if ($result === false) {
                error_log("Failed to delete student post ID: $student_post_id. User: " . get_current_user_id());
                $delete_message = '<div class="alert alert-danger">Failed to delete student. Check debug.log.</div>';
            } else {
                $delete_message = '<div class="alert alert-success">Student deleted successfully.</div>';
            }
        }
        if ($ajax_mode) {
            wp_send_json([
                'success' => strpos($delete_message, 'success') !== false,
                'data' => ['message' => $delete_message]
            ]);
            exit; // Ensure no further output
        }
    }

    ob_start();
    if ($ajax_mode) {
        ?>
        <div class="edu-modal-content">
            <span class="edu-modal-close" onclick="jQuery('#modal-container').hide().html('');">×</span>
            <h3>Confirm Deletion</h3>
            <div id="delete-student-container">
                <?php if ($delete_message) echo $delete_message; ?>
                <?php if ($selected_student_id) { ?>
                    <p>Are you sure you want to delete student "<?php echo esc_html(get_post_meta($selected_student_id, 'student_id', true)); ?>"?</p>
                    <form id="delete-student-form" method="post">
                <?php } ?>
        <?php
    } else {
        ?>
        <div class="management-main-wrapper">
            <div class="management-content-wrapper">
                <div id="edu-loader" class="edu-loader" style="display: none;">
                    <div class="edu-loader-container">
                        <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                    </div>
                </div>
                <?php echo render_su_p_students_management(); // Include the table ?>
                <div class="management-section">
                    <h2>Delete Student</h2>
                    <div id="delete-student-container">
                        <?php if ($delete_message) echo $delete_message; ?>
                        <?php if ($selected_student_id) { ?>
                            <p>Are you sure you want to delete student "<?php echo esc_html(get_post_meta($selected_student_id, 'student_id', true)); ?>"?</p>
                            <form id="delete-student-form" method="post">
                        <?php } ?>
        <?php
    }
    if ($selected_student_id) {
        ?>
                        <input type="hidden" name="student_post_id" value="<?php echo esc_attr($selected_student_id); ?>">
                        <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_student_delete'); ?>">
                        <input type="hidden" name="su_p_delete_student" value="1">
                        <button type="submit" class="button edu-button-delete">Delete</button>
                        <button type="button" class="button" onclick="<?php echo $ajax_mode ? "jQuery('#modal-container').hide().html('');" : "window.location.href='" . admin_url('admin.php?page=su-p-students-management') . "';"; ?>">Cancel</button>
                    </form>
        <?php
    }
    ?>
                </div>
            </div>
        </div>

        <script>
        jQuery(document).ready(function($) {
            const loader = $('#edu-loader');
            function showLoader() { loader.show(); }
            function hideLoader() { loader.hide(); }

            $('#delete-student-form').on('submit', function(e) {
                e.preventDefault();
                showLoader();
                const formData = new FormData(this);
                formData.append('action', 'su_p_delete_student');
                $.ajax({
                    url: '<?php echo admin_url('admin-ajax.php'); ?>',
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            alert('Student deleted successfully');
                            <?php if ($ajax_mode) { ?>
                                $('#modal-container').hide().html('');
                                window.refreshStudentsTable();
                            <?php } else { ?>
                                window.location.href = '<?php echo admin_url('admin.php?page=su-p-students-management'); ?>';
                            <?php } ?>
                        } else {
                            // Safely handle the message
                            const message = response.data && response.data.message ? response.data.message : 'An error occurred while deleting the student.';
                            $('#delete-student-container').prepend(message);
                        }
                    },
                    error: function(xhr, status, error) {
                        hideLoader();
                        $('#delete-student-container').prepend('<div class="alert alert-danger">AJAX error: ' + error + '</div>');
                    }
                });
            });
        });
        </script>
    <?php
    return ob_get_clean();
}
// AJAX Handlers
add_action('wp_ajax_su_p_fetch_students', 'su_p_fetch_students');
function su_p_fetch_students() {
    check_ajax_referer('su_p_student_nonce', 'nonce');
    global $wpdb;
    $page = intval($_POST['page']) ?: 1;
    $per_page = intval($_POST['per_page']) ?: 10;
    $search = sanitize_text_field($_POST['search']);
    $center_filter = sanitize_text_field($_POST['center_filter']);
    $offset = ($page - 1) * $per_page;

    $args = [
        'post_type' => 'students',
        'posts_per_page' => $per_page,
        'offset' => $offset,
        'post_status' => 'publish'
    ];
    if ($search) {
        $args['meta_query'] = [
            'relation' => 'OR',
            ['key' => 'student_id', 'value' => $search, 'compare' => 'LIKE'],
            ['key' => 'student_name', 'value' => $search, 'compare' => 'LIKE'],
            ['key' => 'student_email', 'value' => $search, 'compare' => 'LIKE'],
            ['key' => 'phone_number', 'value' => $search, 'compare' => 'LIKE']
        ];
    }
    if ($center_filter) {
        $args['meta_query'][] = ['key' => 'educational_center_id', 'value' => $center_filter];
    }

    $query = new WP_Query($args);
    $students = [];
    foreach ($query->posts as $post) {
        $meta = get_post_meta($post->ID);
        $center_id = $meta['educational_center_id'][0] ?? '';
        $center = get_posts(['post_type' => 'educational-center', 'meta_key' => 'educational_center_id', 'meta_value' => $center_id, 'posts_per_page' => 1]);
        $students[] = [
            'ID' => $post->ID,
            'student_id' => $meta['student_id'][0] ?? '',
            'educational_center_id' => $center_id,
            'center_name' => $center ? $center[0]->post_title : 'N/A',
            'student_name' => $meta['student_name'][0] ?? '',
            'student_email' => $meta['student_email'][0] ?? '',
            'phone_number' => $meta['phone_number'][0] ?? '',
            'class' => $meta['class_name'][0] ?? '',
            'section' => $meta['section'][0] ?? '',
            'roll_number' => $meta['roll_number'][0] ?? '',
            'admission_number' => $meta['admission_number'][0] ?? ''
        ];
    }
    wp_send_json_success(['students' => $students, 'total' => $query->found_posts]);
}

add_action('wp_ajax_su_p_generate_student_id', 'su_p_generate_student_id');
function su_p_generate_student_id() {
    check_ajax_referer('su_p_student_nonce', 'nonce');
    $center_id = sanitize_text_field($_POST['center_id']);
    if (empty($center_id)) {
        wp_send_json_error(['message' => 'Center ID is required']);
    }
    $student_id = get_unique_id_for_role('students', $center_id);
    wp_send_json_success(['student_id' => $student_id]);
}

add_action('wp_ajax_su_p_get_class_sections', 'su_p_get_class_sections');
function su_p_get_class_sections() {
    check_ajax_referer('su_p_student_nonce', 'nonce');
    global $wpdb;
    $center_id = sanitize_text_field($_POST['center_id']);
    $classes = $wpdb->get_results($wpdb->prepare("SELECT class_name, sections FROM {$wpdb->prefix}class_sections WHERE education_center_id = %s", $center_id), ARRAY_A);
    if ($classes) {
        wp_send_json_success($classes);
    } else {
        wp_send_json_error(['message' => 'No classes found for this center']);
    }
}

add_action('wp_ajax_su_p_get_add_form', 'su_p_get_add_form');
function su_p_get_add_form() {
    check_ajax_referer('su_p_student_nonce', 'nonce');
    wp_send_json_success(['html' => render_su_p_add_students(true)]);
}

add_action('wp_ajax_su_p_get_edit_form', 'su_p_get_edit_form');
function su_p_get_edit_form() {
    check_ajax_referer('su_p_student_nonce', 'nonce');
    $student_id = intval($_POST['student_id']);
    wp_send_json_success(['html' => render_su_p_edit_students(true, $student_id)]);
}

add_action('wp_ajax_su_p_get_delete_form', 'su_p_get_delete_form');
function su_p_get_delete_form() {
    check_ajax_referer('su_p_student_nonce', 'nonce');
    $student_id = intval($_POST['student_id']);
    wp_send_json_success(['html' => render_su_p_delete_students(true, $student_id)]);
}

add_action('wp_ajax_su_p_add_student', 'su_p_add_student');
function su_p_add_student() {
    check_ajax_referer('su_p_student_add', 'nonce');
    ob_start();
    render_su_p_add_students(true);
    $output = ob_get_clean();
    wp_send_json_success(['html' => $output]);
}

add_action('wp_ajax_su_p_edit_student', 'su_p_edit_student');
function su_p_edit_student() {
    check_ajax_referer('su_p_student_edit', 'nonce');
    ob_start();
    render_su_p_edit_students(true);
    $output = ob_get_clean();
    wp_send_json_success(['html' => $output]);
}

add_action('wp_ajax_su_p_delete_student', 'su_p_delete_student');
function su_p_delete_student() {
    check_ajax_referer('su_p_student_delete', 'nonce');
    ob_start();
    render_su_p_delete_students(true);
    $output = ob_get_clean();
    wp_send_json_success(['html' => $output]);
}





//staff
function render_su_p_staff() {
    global $wpdb;
    ob_start();
    ?>
    <div class="edu-staff-container" style="margin-top: 80px;">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2 class="edu-staff-title">Managing Staff</h2>
        <div class="edu-staff-actions">
            <button class="edu-button edu-button-primary" id="add-staff-btn">Add New Staff</button>
            <input type="text" id="staff-search" class="edu-search-input" placeholder="Search Staff..." style="margin-left: 20px; padding: 8px; width: 300px;">
            <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                <option value="">All Educational Centers</option>
                <?php
                $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
                foreach ($centers as $center) {
                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                    echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                }
                ?>
            </select>
        </div>
        <div class="edu-pagination" style="margin: 20px 0;">
            <label for="staff-per-page">Show:</label>
            <select id="staff-per-page" class="edu-select" style="margin-right: 20px;">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
            <button class="edu-button edu-button-nav" id="prev-page" disabled>Previous</button>
            <span id="page-info" style="margin: 0 10px;"></span>
            <button class="edu-button edu-button-nav" id="next-page">Next</button>
        </div>
        <div class="edu-table-wrapper">
            <div class="export-tools" id="export-tools" style="margin-bottom: 10px;"></div>
            <table class="edu-table" id="staff-table">
                <thead>
                    <tr>
                        <th>Staff ID</th>
                        <th>Edu Center ID</th>
                        <th>Edu Center Name</th>
                        <th>Name</th>
                        <th>Role</th>
                        <th>Base Salary</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="staff-table-body">
                    <!-- Populated via AJAX -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Staff Modal -->
    <div class="edu-modal" id="add-staff-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-staff-modal">×</span>
            <h3>Add New Staff</h3>
            <form id="add-staff-form" class="edu-form" enctype="multipart/form-data">
                <div class="edu-form-group">
                    <label class="edu-form-label" for="staff-id">Staff ID</label>
                    <input type="text" class="edu-form-input" id="staff-id" name="staff_id" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="educational-center-id">Educational Center ID</label>
                    <select class="edu-form-input" id="educational-center-id" name="educational_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="staff-name">Name</label>
                    <input type="text" class="edu-form-input" id="staff-name" name="name" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="staff-role">Role</label>
                    <select class="edu-form-input" id="staff-role" name="role" required>
                        <option value="">Select Role</option>
                        <option value="Accountant">Accountant</option>
                        <option value="Administrator">Administrator</option>
                        <option value="Librarian">Librarian</option>
                        <option value="Support Staff">Support Staff</option>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="staff-salary">Base Salary (Monthly)</label>
                    <input type="number" class="edu-form-input" id="staff-salary" name="salary_base" step="0.01" min="0" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_staff_nonce'); ?>">
                <button type="button" class="edu-button edu-button-primary" id="save-staff">Save Staff</button>
            </form>
            <div class="edu-form-message" id="add-staff-message"></div>
        </div>
    </div>

    <!-- Edit Staff Modal -->
    <div class="edu-modal" id="edit-staff-modal">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-staff-modal">×</span>
            <h3>Edit Staff</h3>
            <form id="edit-staff-form" class="edu-form" enctype="multipart/form-data">
                <input type="hidden" id="edit-staff-id-hidden" name="staff_id">
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-staff-id">Staff ID</label>
                    <input type="text" class="edu-form-input" id="edit-staff-id" name="staff_id_display" readonly>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-educational-center-id">Educational Center ID</label>
                    <input type="text" class="edu-form-input" id="edit-educational-center-id" name="educational_center_id" readonly>                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-staff-name">Name</label>
                    <input type="text" class="edu-form-input" id="edit-staff-name" name="name" required>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-staff-role">Role</label>
                    <select class="edu-form-input" id="edit-staff-role" name="role" required>
                        <option value="">Select Role</option>
                        <option value="Accountant">Accountant</option>
                        <option value="Administrator">Administrator</option>
                        <option value="Librarian">Librarian</option>
                        <option value="Support Staff">Support Staff</option>
                    </select>
                </div>
                <div class="edu-form-group">
                    <label class="edu-form-label" for="edit-staff-salary">Base Salary (Monthly)</label>
                    <input type="number" class="edu-form-input" id="edit-staff-salary" name="salary_base" step="0.01" min="0" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_staff_nonce'); ?>">
                <button type="button" class="edu-button edu-button-primary" id="update-staff">Update Staff</button>
            </form>
            <div class="edu-form-message" id="edit-staff-message"></div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        let currentPage = 1;
        let perPage = 10;
        let searchQuery = '';
        let centerFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { 
            showLoader(); 
            $(modalId).css('display', 'block'); 
            setTimeout(hideLoader, 100); 
        }
        function closeModal(modalId) { 
            $(modalId).css('display', 'none'); 
            $(modalId + ' .edu-form-message').removeClass('edu-success edu-error').text(''); 
            hideLoader(); 
        }

        $('.edu-modal-close').on('click', function() {
            const modalId = '#' + $(this).data('modal');
            closeModal(modalId);
        });

        $(document).on('click', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        function getTableData() {
            const table = $('#staff-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim()).slice(0, -1); // Exclude Actions
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {
                const cells = Array.from(row.querySelectorAll('td')).slice(0, -1); // Exclude Actions
                return cells.map(td => td.textContent.trim());
            });
            return [headers, ...rows];
        }

        function exportToCSV() {
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `staff_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
        }

        function exportToExcel() {
            if (!window.XLSX) { console.error('XLSX library not loaded'); return; }
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Staff');
            XLSX.writeFile(wb, `staff_${new Date().toISOString().slice(0,10)}.xlsx`);
        }

        function generatePDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ unit: 'mm', format: 'a4' });
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            const pageWidth = doc.internal.pageSize.width;
            const pageHeight = doc.internal.pageSize.height;
            const margin = 10;
            const borderColor = [70, 131, 180];

            doc.setDrawColor(...borderColor);
            doc.setLineWidth(1);
            doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);

            if (instituteLogo) {
                try {
                    doc.addImage(instituteLogo, 'JPEG', (pageWidth - 24) / 2, 15, 24, 24);
                } catch (e) {
                    console.log('Logo loading failed:', e);
                }
            }
            doc.setFontSize(18);
            doc.setTextColor(...borderColor);
            doc.text(instituteName.toUpperCase(), pageWidth / 2, 45, { align: 'center' });
            doc.setFontSize(12);
            doc.setTextColor(102);
            doc.text('Staff List', pageWidth / 2, 55, { align: 'center' });
            doc.setDrawColor(...borderColor);
            doc.line(margin + 5, 60, pageWidth - margin - 5, 60);

            const details = [
                ['Date', new Date().toLocaleDateString()],
                ['Total Staff', String(data.length - 1)]
            ];
            let y = 70;
            details.forEach(([label, value]) => {
                doc.setFillColor(245, 245, 245);
                doc.rect(margin + 5, y, 50, 6, 'F');
                doc.setTextColor(...borderColor);
                doc.setFont('helvetica', 'bold');
                doc.text(label, margin + 7, y + 4);
                doc.setTextColor(51);
                doc.setFont('helvetica', 'normal');
                doc.text(String(value), margin + 60, y + 4);
                y += 6;
            });

            if (typeof doc.autoTable === 'function' && data.length > 1) {
                doc.autoTable({
                    startY: y + 10,
                    head: [data[0]],
                    body: data.slice(1),
                    theme: 'striped',
                    styles: { fontSize: 11, cellPadding: 2, overflow: 'linebreak', halign: 'center', textColor: [51, 51, 51] },
                    headStyles: { fillColor: borderColor, textColor: [255, 255, 255], fontStyle: 'bold' },
                    alternateRowStyles: { fillColor: [249, 249, 249] }
                });

                const finalY = doc.lastAutoTable.finalY || y + 10;
                doc.setFontSize(9);
                doc.setTextColor(102);
                doc.text(`This is an Online Generated Staff List issued by ${instituteName}`, pageWidth / 2, finalY + 20, { align: 'center' });
                doc.text(`Generated on ${new Date().toISOString().slice(0,10)}`, pageWidth / 2, finalY + 25, { align: 'center' });
                doc.text('___________________________', pageWidth / 2, finalY + 35, { align: 'center' });
                doc.text('Registrar / Authorized Signatory', pageWidth / 2, finalY + 40, { align: 'center' });
                doc.text('Managed by Instituto Educational Center Management System', pageWidth / 2, finalY + 45, { align: 'center' });

                doc.save(`staff_${new Date().toISOString().slice(0,10)}.pdf`);
            } else {
                console.error('jsPDF autoTable plugin not loaded or no data');
                alert('PDF generation failed');
            }
        }

        function copyToClipboard() {
            const data = getTableData();
            const text = data.map(row => row.join('\t')).join('\n');
            navigator.clipboard.writeText(text).then(() => alert('Staff copied to clipboard!'));
        }

        function printStaff() {
            const printWindow = window.open('', '_blank');
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';

            printWindow.document.write(`
                <html>
                <head>
                    <title>Staff List</title>
                    <style>
                        @media print {
                            body { font-family: Helvetica, sans-serif; margin: 10mm; width: 190mm; }
                            .page { border: 4px solid #4683b4; padding: 5mm; box-sizing: border-box; width: 100%; max-width: 190mm; }
                            .header { text-align: center; border-bottom: 2px solid #4683b4; margin-bottom: 10mm; }
                            .header img { width: 60px; height: 60px; margin-bottom: 5mm; }
                            .header h1 { font-size: 18pt; color: #4683b4; margin: 0; text-transform: uppercase; }
                            .header .subtitle { font-size: 12pt; color: #666; margin: 0; }
                            table { width: 100%; max-width: 100%; border-collapse: collapse; margin: 10mm 0; table-layout: fixed; }
                            th, td { border: 1px solid #e5e5e5; padding: 8px; text-align: center; word-wrap: break-word; font-size: 10pt; }
                            th { background: #4683b4; color: white; font-weight: bold; }
                            tr:nth-child(even) { background: #f9f9f9; }
                            .footer { text-align: center; font-size: 9pt; color: #666; margin-top: 10mm; }
                            @page { size: A4; margin: 10mm; }
                        }
                    </style>
                </head>
                <body>
                    <div class="page">
                        <div class="header">
                            ${instituteLogo ? `<img src="${instituteLogo}" alt="Logo" onerror="this.style.display='none';this.nextSibling.style.display='block';"><p style="display:none;">No logo available</p>` : '<p>No logo available</p>'}
                            <h1>${instituteName.toUpperCase()}</h1>
                            <p class="subtitle">Staff List</p>
                        </div>
                        <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                        <p><strong>Total Staff:</strong> ${data.length - 1}</p>
                        <table>
                            <thead>
                                <tr>${data[0].map(header => `<th>${header}</th>`).join('')}</tr>
                            </thead>
                            <tbody>
                                ${data.slice(1).map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}
                            </tbody>
                        </table>
                        <div class="footer">
                            <p>This is an Online Generated Staff List issued by ${instituteName}</p>
                            <p>Generated on ${new Date().toISOString().slice(0,10)}</p>
                            <p>___________________________</p>
                            <p>Registrar / Authorized Signatory</p>
                            <p>Managed by Instituto Educational Center Management System</p>
                        </div>
                    </div>
                </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
        }

        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                <button class="export-btn export-copy" aria-label="Copy to Clipboard"><i class="fas fa-copy"></i><span class="tooltip">Copy to Clipboard</span></button>
                <button class="export-btn export-print" aria-label="Print"><i class="fas fa-print"></i><span class="tooltip">Print</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
            tools.find('.export-copy').on('click', copyToClipboard);
            tools.find('.export-print').on('click', printStaff);
        }

        function loadStaff(page, limit, query, center) {
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_fetch_staff',
                    page: page,
                    per_page: limit,
                    search: query,
                    center_filter: center,
                    nonce: '<?php echo wp_create_nonce('su_p_staff_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const staff = response.data.staff;
                        const total = response.data.total;
                        let html = '';
                        staff.forEach(member => {
                            html += `
                                <tr data-staff-id="${member.staff_id}">
                                    <td>${member.staff_id || 'N/A'}</td>
                                    <td>${member.educational_center_id || 'N/A'}</td>
                                    <td>${member.center_name || 'N/A'}</td>
                                    <td>${member.name || 'N/A'}</td>
                                    <td>${member.role || 'N/A'}</td>
                                    <td>${member.salary_base || '0.00'}</td>
                                    <td>
                                        <button class="edu-button edu-button-edit edit-staff" data-staff-id="${member.staff_id}">Edit</button>
                                        <button class="edu-button edu-button-delete delete-staff" data-staff-id="${member.staff_id}">Delete</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#staff-table-body').html(html);
                        setupExportButtons();

                        const totalPages = Math.ceil(total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages}`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                    } else {
                        $('#staff-table-body').html('<tr><td colspan="7">No staff found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#staff-table-body').html('<tr><td colspan="7">Error loading staff: ' + error + '</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        // Initial load
        loadStaff(currentPage, perPage, searchQuery, centerFilter);

        // Search and Filter
        $('#staff-search').on('input', function() {
            searchQuery = $(this).val();
            currentPage = 1;
            loadStaff(currentPage, perPage, searchQuery, centerFilter);
        });

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadStaff(currentPage, perPage, searchQuery, centerFilter);
        });

        // Pagination
        $('#staff-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadStaff(currentPage, perPage, searchQuery, centerFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadStaff(currentPage, perPage, searchQuery, centerFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadStaff(currentPage, perPage, searchQuery, centerFilter);
        });

        // Add Staff
        $('#add-staff-btn').on('click', function() { 
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_generate_staff_id',
                    nonce: '<?php echo wp_create_nonce('su_p_staff_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#staff-id').val(response.data.staff_id);
                        openModal('#add-staff-modal');
                    } else {
                        alert('Error generating staff ID: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error generating staff ID: ' + error);
                }
            });
        });

        $('#save-staff').on('click', function() {
            const formData = new FormData($('#add-staff-form')[0]);
            formData.append('action', 'su_p_add_staff');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-staff-message').addClass('edu-success').text('Staff added successfully!');
                        setTimeout(() => {
                            closeModal('#add-staff-modal');
                            loadStaff(currentPage, perPage, searchQuery, centerFilter);
                        }, 1000);
                    } else {
                        $('#add-staff-message').addClass('edu-error').text('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#add-staff-message').addClass('edu-error').text('Error adding staff: ' + error);
                }
            });
        });

        // Edit Staff
        $(document).on('click', '.edit-staff', function() {
    const staffId = $(this).data('staff-id');
    showLoader();
    $.ajax({
        url: '<?php echo admin_url('admin-ajax.php'); ?>',
        method: 'POST',
        data: {
            action: 'su_p_get_staff',
            staff_id: staffId,
            nonce: '<?php echo wp_create_nonce('su_p_staff_nonce'); ?>'
        },
        success: function(response) {
            hideLoader();
            if (response.success) {
                const staff = response.data;
                console.log('Staff Data:', staff); // Debug log
                $('#edit-staff-id-hidden').val(staff.staff_id || '');
                $('#edit-staff-id').val(staff.staff_id || '');
                $('#edit-educational-center-id').val(staff.educational_center_id || 'N/A'); // Fallback to 'N/A'
                $('#edit-staff-name').val(staff.name || '');
                $('#edit-staff-role').val(staff.role || '');
                $('#edit-staff-salary').val(staff.salary_base || '');
                openModal('#edit-staff-modal');
            } else {
                alert('Error fetching staff: ' + response.data.message);
            }
        },
        error: function(xhr, status, error) {
            hideLoader();
            alert('Error fetching staff: ' + error);
        }
    });
    });

        $('#update-staff').on('click', function() {
            const formData = new FormData($('#edit-staff-form')[0]);
            formData.append('action', 'su_p_update_staff');
            formData.set('staff_id', $('#edit-staff-id-hidden').val()); // Ensure correct staff_id
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-staff-message').addClass('edu-success').text('Staff updated successfully!');
                        setTimeout(() => {
                            closeModal('#edit-staff-modal');
                            loadStaff(currentPage, perPage, searchQuery, centerFilter);
                        }, 1000);
                    } else {
                        $('#edit-staff-message').addClass('edu-error').text('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-staff-message').addClass('edu-error').text('Error updating staff: ' + error);
                }
            });
        });

        // Delete Staff
        $(document).on('click', '.delete-staff', function() {
            if (!confirm('Are you sure you want to delete this staff member?')) return;
            const staffId = $(this).data('staff-id');
            showLoader();
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'su_p_delete_staff',
                    staff_id: staffId,
                    nonce: '<?php echo wp_create_nonce('su_p_staff_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        loadStaff(currentPage, perPage, searchQuery, centerFilter);
                    } else {
                        alert('Error: ' + response.data.message);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error deleting staff: ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
// Generate Unique Staff ID
add_action('wp_ajax_su_p_generate_staff_id', 'su_p_generate_staff_id');
function su_p_generate_staff_id() {
    check_ajax_referer('su_p_staff_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff';
    $education_center_id = sanitize_text_field($_POST['educational_center_id'] ?? 'default_center'); // Fallback if not provided
    $max_attempts = 5;
    $prefix = 'STF-';
    $id_length = 12;

    for ($attempt = 1; $attempt <= $max_attempts; $attempt++) {
        $time_part = substr(str_replace('.', '', microtime(true)), -10);
        $random_part = strtoupper(substr(bin2hex(random_bytes(1)), 0, 2));
        $staff_id = $prefix . $time_part . $random_part;

        if (strlen($staff_id) > 20) {
            $staff_id = substr($staff_id, 0, 20);
        }

        $exists = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM $table_name WHERE staff_id = %s AND education_center_id = %s",
            $staff_id, $education_center_id
        ));

        if ($exists == 0) {
            wp_send_json_success(['staff_id' => $staff_id]);
            return;
        }
        usleep(10000);
    }
    wp_send_json_error(['message' => 'Unable to generate a unique Staff ID after multiple attempts']);
}

// Fetch Staff
add_action('wp_ajax_su_p_fetch_staff', 'su_p_fetch_staff');
function su_p_fetch_staff() {
    check_ajax_referer('su_p_staff_nonce', 'nonce');
    global $wpdb;
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $center_filter = isset($_POST['center_filter']) ? sanitize_text_field($_POST['center_filter']) : '';
    $offset = ($page - 1) * $per_page;
    $table_name = $wpdb->prefix . 'staff';

    $where = "WHERE 1=1";
    if ($search) {
        $where .= $wpdb->prepare(" AND (staff_id LIKE %s OR name LIKE %s OR role LIKE %s)", "%$search%", "%$search%", "%$search%");
    }
    if ($center_filter) {
        $where .= $wpdb->prepare(" AND education_center_id = %s", $center_filter);
    }

    $staff = $wpdb->get_results(
        "SELECT * FROM $table_name $where ORDER BY staff_id LIMIT $offset, $per_page",
        ARRAY_A
    );
    $total = $wpdb->get_var("SELECT COUNT(*) FROM $table_name $where");

    $staff_data = [];
    foreach ($staff as $member) {
        $center = get_posts(['post_type' => 'educational-center', 'meta_key' => 'educational_center_id', 'meta_value' => $member['education_center_id'], 'posts_per_page' => 1])[0] ?? null;
        $staff_data[] = [
            'staff_id' => $member['staff_id'],
            'educational_center_id' => $member['education_center_id'],
            'center_name' => $center ? $center->post_title : 'N/A',
            'name' => $member['name'],
            'role' => $member['role'],
            'salary_base' => number_format($member['salary_base'], 2)
        ];
    }

    wp_send_json_success(['staff' => $staff_data, 'total' => $total]);
}

// Add Staff
add_action('wp_ajax_su_p_add_staff', 'su_p_add_staff');
function su_p_add_staff() {
    check_ajax_referer('su_p_staff_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff';

    $staff_id = sanitize_text_field($_POST['staff_id']);
    $educational_center_id = sanitize_text_field($_POST['educational_center_id']);
    $name = sanitize_text_field($_POST['name']);
    $role = sanitize_text_field($_POST['role']);
    $salary_base = floatval($_POST['salary_base']);

    $exists = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table_name WHERE staff_id = %s OR (name = %s AND role = %s AND education_center_id = %s)",
        $staff_id, $name, $role, $educational_center_id
    ));

    if ($exists > 0) {
        wp_send_json_error(['message' => 'Staff ID or Name/Role combination already exists']);
        return;
    }

    $result = $wpdb->insert(
        $table_name,
        [
            'staff_id' => $staff_id,
            'education_center_id' => $educational_center_id,
            'name' => $name,
            'role' => $role,
            'salary_base' => $salary_base
        ],
        ['%s', '%s', '%s', '%s', '%f']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add staff: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Staff added successfully']);
    }
}

// Get Staff
add_action('wp_ajax_su_p_get_staff', 'su_p_get_staff');
function su_p_get_staff() {
    check_ajax_referer('su_p_staff_nonce', 'nonce');
    global $wpdb;
    $staff_id = sanitize_text_field($_POST['staff_id']);
    $table_name = $wpdb->prefix . 'staff';

    $staff = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM $table_name WHERE staff_id = %s",
        $staff_id
    ), ARRAY_A);

    if ($staff) {
        // Ensure all expected keys are present, even if null
        $staff_data = [
            'staff_id' => $staff['staff_id'],
            'educational_center_id' => $staff['education_center_id'] ?? 'N/A',
            'name' => $staff['name'],
            'role' => $staff['role'],
            'salary_base' => $staff['salary_base']
        ];
        wp_send_json_success($staff_data);
    } else {
        wp_send_json_error(['message' => 'Staff not found']);
    }
}

// Update Staff
add_action('wp_ajax_su_p_update_staff', 'su_p_update_staff');
function su_p_update_staff() {
    check_ajax_referer('su_p_staff_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff';

    $staff_id = sanitize_text_field($_POST['staff_id']);
    $educational_center_id = sanitize_text_field($_POST['educational_center_id']);
    $name = sanitize_text_field($_POST['name']);
    $role = sanitize_text_field($_POST['role']);
    $salary_base = floatval($_POST['salary_base']);

    $exists = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table_name WHERE name = %s AND role = %s AND education_center_id = %s AND staff_id != %s",
        $name, $role, $educational_center_id, $staff_id
    ));

    // if ($exists > 0) {
    //     wp_send_json_error(['message' => 'Another staff member with this name and role already exists']);
    //     return;
    // }

    $result = $wpdb->update(
        $table_name,
        [
            'name' => $name,
            'role' => $role,
            'salary_base' => $salary_base
        ],
        ['staff_id' => $staff_id, 'education_center_id' => $educational_center_id],
        ['%s', '%s', '%f'],
        ['%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update staff: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Staff updated successfully']);
    }
}

// Delete Staff
add_action('wp_ajax_su_p_delete_staff', 'su_p_delete_staff');
function su_p_delete_staff() {
    check_ajax_referer('su_p_staff_nonce', 'nonce');
    global $wpdb;
    $staff_id = sanitize_text_field($_POST['staff_id']);
    $table_name = $wpdb->prefix . 'staff';

    $result = $wpdb->delete($table_name, ['staff_id' => $staff_id], ['%s']);

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete staff: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Staff deleted successfully']);
    }
}

//attendance
// Enqueue Scripts and Styles
function su_p_enqueue_student_attendance_scripts() {
    // if (!is_admin()) {
        // Enqueue styles (uncomment if you still want to use an external CSS file)
        // wp_enqueue_style('su-p-attendance-css', plugin_dir_url(__FILE__) . 'css/su-p-attendance.css', [], '1.0');

        // Enqueue external libraries for export functionality
        wp_enqueue_script('jspdf', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js', [], '2.5.1', true);
        wp_enqueue_script('jspdf-autotable', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js', ['jspdf'], '3.5.23', true);
        wp_enqueue_script('xlsx', 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js', [], '0.18.5', true);

        // Note: We won't use wp_localize_script since the JS is inline now
    // }
}
add_action('wp_enqueue_scripts', 'su_p_enqueue_student_attendance_scripts');
// Main Dashboard Function
function render_su_p_student_attendance() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'student_attendance';
    $student_table = $wpdb->prefix . 'students';
    $subjects_table = $wpdb->prefix . 'subjects';
    ob_start();

    $subjects = $wpdb->get_results("SELECT subject_id, subject_name FROM $subjects_table ORDER BY subject_name");
    ?>
    <!-- HTML remains unchanged from the previous version -->
    <div class="attendance-main-wrapper">
        <div class="attendance-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="attendance-management">
                <h2>Student Attendance</h2>
                <div class="search-filters">
                    <input type="text" id="student-id-search" placeholder="Search by Student ID...">
                    <input type="text" id="student-name-search" placeholder="Search by Student Name...">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="class-filter">
                        <option value="">All Classes</option>
                        <?php
                        $classes = $wpdb->get_col("SELECT DISTINCT class FROM $table_name ORDER BY class");
                        foreach ($classes as $class) {
                            echo "<option value='" . esc_attr($class) . "'>" . esc_html($class) . "</option>";
                        }
                        ?>
                    </select>
                    <select id="section-filter">
                        <option value="">All Sections</option>
                        <?php
                        $sections = $wpdb->get_col("SELECT DISTINCT section FROM $table_name ORDER BY section");
                        foreach ($sections as $section) {
                            echo "<option value='" . esc_attr($section) . "'>" . esc_html($section) . "</option>";
                        }
                        ?>
                    </select>
                    <select id="month-filter">
                        <option value="">Select Month</option>
                        <?php
                        $month_names = [1 => 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                        $current_month = date('n');
                        $current_year = date('Y');
                        $dates = $wpdb->get_results("SELECT DISTINCT YEAR(date) AS year, MONTH(date) AS month FROM $table_name ORDER BY year DESC, month DESC");
                        foreach ($dates as $date) {
                            $selected = ($date->month == $current_month && $date->year == $current_year) ? 'selected' : '';
                            echo "<option value='{$date->month}' data-year='{$date->year}' $selected>" . esc_html($month_names[$date->month] . ' ' . $date->year) . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-attendance-btn">Add Attendance</button>
                    <label for="attendance-per-page">Show:</label>
                    <select id="attendance-per-page">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button id="prev-page" disabled>Previous</button>
                    <span id="page-info"></span>
                    <button id="next-page">Next</button>
                    <button id="refresh-data">Refresh</button>
                </div>
                <div class="attendance-table-wrapper">
                    <div class="actions" id="export-tools"></div>
                    <table id="attendance-table">
                        <thead id="attendance-table-head"></thead>
                        <tbody id="attendance-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Attendance Modal -->
    <div class="edu-modal" id="add-attendance-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-attendance-modal">×</span>
            <h3>Add Student Attendance</h3>
            <form id="add-attendance-form">
                <div class="search-filters">
                    <label for="add-center-id">Education Center</label>
                    <select id="add-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-student-id">Student</label>
                    <select id="add-student-id" name="student_id" required>
                        <option value="">Select Student</option>
                        <?php
                        $students = $wpdb->get_results("SELECT student_id, student_name, class, section, education_center_id FROM $student_table ORDER BY student_name");
                        foreach ($students as $student) {
                            echo "<option value='" . esc_attr($student->student_id) . "' data-center='" . esc_attr($student->education_center_id) . "' data-class='" . esc_attr($student->class) . "' data-section='" . esc_attr($student->section) . "'>" . esc_html($student->student_name . " (" . $student->student_id . ")") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-class">Class</label>
                    <input type="text" id="add-class" name="class" readonly required>
                </div>
                <div class="search-filters">
                    <label for="add-section">Section</label>
                    <input type="text" id="add-section" name="section" readonly required>
                </div>
                <div class="search-filters">
                    <label for="add-attendance-date">Date</label>
                    <input type="date" id="add-attendance-date" name="date" value="<?php echo date('Y-m-d'); ?>" required>
                </div>
                <div class="search-filters">
                    <label for="add-status">Status</label>
                    <select id="add-status" name="status" required>
                        <option value="Present">Present</option>
                        <option value="Late">Late</option>
                        <option value="Absent">Absent</option>
                        <option value="Full Day">Full Day</option>
                        <option value="Holiday">Holiday</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-subject">Subject</label>
                    <select id="add-subject" name="subject_id" required>
                        <option value="">Select Subject</option>
                        <?php
                        foreach ($subjects as $subject) {
                            echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-teacher-id">Teacher ID</label>
                    <input type="text" id="add-teacher-id" name="teacher_id" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>">
                <button type="button" id="save-attendance">Save Attendance</button>
            </form>
            <div id="add-attendance-message" class="message"></div>
        </div>
    </div>

    <!-- Date Selection Modal for Edit -->
    <div class="edu-modal" id="edit-date-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-date-modal">×</span>
            <h3>Select Attendance Date to Edit</h3>
            <form id="edit-date-form">
                <div class="search-filters">
                    <label for="edit-student-id-display">Student</label>
                    <input type="text" id="edit-student-id-display" readonly>
                    <input type="hidden" id="edit-student-id" name="student_id">
                </div>
                <div class="search-filters">
                    <label for="edit-date-select">Select Date</label>
                    <select id="edit-date-select" name="date" required>
                        <option value="">Choose a date</option>
                    </select>
                </div>
                <button type="button" id="proceed-edit">Proceed to Edit</button>
            </form>
            <div id="edit-date-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Attendance Modal -->
    <div class="edu-modal" id="edit-attendance-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-attendance-modal">×</span>
            <h3>Edit Student Attendance</h3>
            <form id="edit-attendance-form">
                <input type="hidden" id="edit-attendance-id" name="sa_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center ID</label>
                    <input type="text" id="edit-center-id" name="education_center_id" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-student-id-display">Student</label>
                    <input type="text" id="edit-student-id-display" name="student_id_display" readonly>
                    <input type="hidden" id="edit-student-id-hidden" name="student_id">
                </div>
                <div class="search-filters">
                    <label for="edit-class">Class</label>
                    <input type="text" id="edit-class" name="class" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-section">Section</label>
                    <input type="text" id="edit-section" name="section" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-attendance-date">Date</label>
                    <input type="date" id="edit-attendance-date" name="date" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-status">Status</label>
                    <select id="edit-status" name="status" required>
                        <option value="Present">Present</option>
                        <option value="Late">Late</option>
                        <option value="Absent">Absent</option>
                        <option value="Full Day">Full Day</option>
                        <option value="Holiday">Holiday</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-subject">Subject</label>
                    <select id="edit-subject" name="subject_id" required>
                        <option value="">Select Subject</option>
                        <?php
                        foreach ($subjects as $subject) {
                            echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-teacher-id">Teacher ID</label>
                    <input type="text" id="edit-teacher-id" name="teacher_id" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>">
                <button type="button" id="update-attendance">Update Attendance</button>
            </form>
            <div id="edit-attendance-message" class="message"></div>
        </div>
    </div>

    <!-- JavaScript remains unchanged from the previous version -->
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>';

        let currentPage = 1;
        let perPage = 10;
        let studentIdSearch = '';
        let studentNameSearch = '';
        let centerFilter = '';
        let classFilter = '';
        let sectionFilter = '';
        let monthFilter = '<?php echo date('n'); ?>';
        let yearFilter = '<?php echo date('Y'); ?>';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { 
            showLoader(); 
            $(modalId).css('display', 'flex'); 
            setTimeout(hideLoader, 100); 
            clearMessages(modalId);
        }
        function closeModal(modalId) { 
            $(modalId).css('display', 'none'); 
            clearMessages(modalId); 
            hideLoader(); 
        }
        function clearMessages(modalId) {
            $(modalId + ' .message').css({'background': '', 'color': ''}).text('');
        }

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        function getTableData() {
            const table = $('#attendance-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => 
                Array.from(row.querySelectorAll('td')).map(td => td.textContent.trim())
            );
            return [headers, ...rows];
        }

        function exportToCSV() {
            showLoader();
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `student_attendance_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
            hideLoader();
        }

        function exportToExcel() {
            if (!window.XLSX) { console.error('XLSX library not loaded'); return; }
            showLoader();
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Student Attendance');
            XLSX.writeFile(wb, `student_attendance_${new Date().toISOString().slice(0,10)}.xlsx`);
            hideLoader();
        }

        function generatePDF() {
            showLoader();
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            const pageWidth = doc.internal.pageSize.width;
            const pageHeight = doc.internal.pageSize.height;
            const margin = 10;
            const borderColor = [70, 131, 180];
            const filters = `Filters: Student ID: ${studentIdSearch || 'All'}, Name: ${studentNameSearch || 'All'}, Center: ${centerFilter || 'All'}, Class: ${classFilter || 'All'}, Section: ${sectionFilter || 'All'}, Month: ${monthFilter ? month_names[parseInt(monthFilter)] : 'All'} ${yearFilter}`;

            doc.setDrawColor(...borderColor);
            doc.setLineWidth(1);
            doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);
            if (instituteLogo) {
                try {
                    doc.addImage(instituteLogo, 'JPEG', margin + 5, margin + 5, 20, 20);
                } catch (e) { console.log('Logo loading failed:', e); }
            }
            doc.setFontSize(16);
            doc.setTextColor(...borderColor);
            doc.text(instituteName.toUpperCase(), pageWidth / 2, margin + 15, { align: 'center' });
            doc.setFontSize(12);
            doc.setTextColor(0);
            doc.text('Student Attendance Report', pageWidth / 2, margin + 25, { align: 'center' });
            doc.setFontSize(10);
            doc.setTextColor(100);
            doc.text(filters, margin + 5, margin + 35, { maxWidth: pageWidth - 2 * margin - 10 });

            if (typeof doc.autoTable === 'function' && data.length > 1) {
                doc.autoTable({
                    startY: margin + 40,
                    head: [data[0]],
                    body: data.slice(1),
                    theme: 'grid',
                    styles: { fontSize: 8, cellPadding: 2, overflow: 'linebreak', halign: 'center' },
                    headStyles: { fillColor: borderColor, textColor: [255, 255, 255], fontStyle: 'bold' },
                    alternateRowStyles: { fillColor: [245, 245, 245] },
                    columnStyles: {
                        0: { cellWidth: 30 },
                        1: { cellWidth: 20 },
                        2: { cellWidth: 20 },
                        3: { cellWidth: 10 },
                        4: { cellWidth: 10 },
                        5: { cellWidth: 10 },
                        6: { cellWidth: 10 },
                        7: { cellWidth: 10 },
                        8: { cellWidth: 15 },
                    },
                    didDrawPage: function(data) {
                        const pageNumber = doc.internal.getNumberOfPages();
                        doc.setFontSize(8);
                        doc.text(`Page ${pageNumber}`, pageWidth - margin - 10, pageHeight - margin - 5, { align: 'right' });
                    }
                });
                const finalY = doc.lastAutoTable.finalY || margin + 40;
                doc.setFontSize(9);
                doc.setTextColor(100);
                doc.text(`Generated on ${new Date().toISOString().slice(0,10)}`, pageWidth / 2, finalY + 10, { align: 'center' });
                doc.save(`student_attendance_${new Date().toISOString().slice(0,10)}.pdf`);
            } else {
                console.error('jsPDF autoTable plugin not loaded or no data');
                alert('PDF generation failed');
            }
            hideLoader();
        }

        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
        }

        function loadAttendance(page, limit, sid, sname, center, classFilter, sectionFilter, month, year, showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_student_attendance',
                    page: page,
                    per_page: limit,
                    search_student_id: sid,
                    search_student_name: sname,
                    center_filter: center,
                    class_filter: classFilter,
                    section_filter: sectionFilter,
                    month: month,
                    year: year,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#attendance-table-head').html(response.data.table_head);
                        $('#attendance-table-body').html(response.data.attendance);
                        const totalPages = Math.ceil(response.data.total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages} (Total Records: ${response.data.total})`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                        setupExportButtons();
                    } else {
                        $('#attendance-table-body').html('<tr><td colspan="10">No attendance found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    if (showLoading) hideLoader();
                    $('#attendance-table-body').html('<tr><td colspan="10">Error loading attendance: ' + error + '</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);

        $('#student-id-search').on('input', debounce(function() {
            studentIdSearch = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        }, 500));

        $('#student-name-search').on('input', debounce(function() {
            studentNameSearch = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        }, 500));

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#class-filter').on('change', function() {
            classFilter = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#section-filter').on('change', function() {
            sectionFilter = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#month-filter').on('change', function() {
            monthFilter = $(this).val();
            yearFilter = $(this).find('option:selected').data('year') || '<?php echo date('Y'); ?>';
            currentPage = 1;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#attendance-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#refresh-data').on('click', function() {
            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter);
        });

        $('#add-attendance-btn').on('click', function() {
            openModal('#add-attendance-modal');
        });

        $('#add-student-id').on('change', function() {
            const $option = $(this).find('option:selected');
            $('#add-center-id').val($option.data('center'));
            $('#add-class').val($option.data('class'));
            $('#add-section').val($option.data('section'));
        });

        $('#save-attendance').on('click', function() {
    const formData = new FormData($('#add-attendance-form')[0]);
    formData.append('action', 'su_p_add_staff_attendance');
    showLoader();
    $.ajax({
        url: ajaxUrl, // Ensure this is defined (e.g., via wp_localize_script)
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
            hideLoader();
            const $message = $('#add-attendance-message');
            if (response.success) {
                $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                setTimeout(() => {
                    closeModal('#add-attendance-modal');
                    loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter, false);
                }, 2000);
            } else {
                $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                setTimeout(() => clearMessages('#add-attendance-modal'), 3000);
            }
        },
        error: function(xhr, status, error) {
            hideLoader();
            $('#add-attendance-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error adding attendance: ' + error);
            setTimeout(() => clearMessages('#add-attendance-modal'), 3000);
        }
    });
});

        $(document).on('click', '.edit-attendance', function() {
            const studentId = $(this).data('student-id');
            const studentName = $(this).closest('tr').find('td:first').text();
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_get_student_attendance_dates',
                    student_id: studentId,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-student-id').val(studentId);
                        $('#edit-student-id-display').val(studentName);
                        const $dateSelect = $('#edit-date-select');
                        $dateSelect.empty().append('<option value="">Choose a date</option>');
                        response.data.forEach(date => {
                            $dateSelect.append(`<option value="${date.date}">${date.date}</option>`);
                        });
                        openModal('#edit-date-modal');
                    } else {
                        alert('Error: ' + response.data);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error fetching attendance dates: ' + error);
                }
            });
        });

        $('#proceed-edit').on('click', function() {
    const teacherId = $('#edit-teacher-id').val();
    const date = $('#edit-date-select').val();
    if (!date) {
        $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Please select a date.');
        setTimeout(() => clearMessages('#edit-date-modal'), 3000);
        return;
    }
    showLoader();
    $.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
            action: 'su_p_get_teacher_attendance',
            teacher_id: teacherId,
            date: date,
            nonce: ajaxNonce
        },
        success: function(response) {
            hideLoader();
            if (response.success) {
                const record = response.data;
                console.log('Edit Attendance Data:', record); // Debug: Check the response data
                $('#edit-attendance-id').val(record.ta_id || '');
                $('#edit-center-id').val(record.education_center_id || '');
                // Explicitly set teacher display field with name and ID
                const teacherDisplay = (record.teacher_name && record.teacher_id) 
                    ? `${record.teacher_name} (${record.teacher_id})` 
                    : record.teacher_name || record.teacher_id || 'Unknown Teacher';
                $('#edit-teacher-id-display').val(teacherDisplay);
                $('#edit-teacher-id-hidden').val(record.teacher_id || '');
                $('#edit-department').val(record.department_name || 'N/A');
                $('#edit-attendance-date').val(record.date || '');
                $('#edit-status').val(record.status || 'Present');
                closeModal('#edit-date-modal');
                openModal('#edit-attendance-modal');
            } else {
                $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data || 'Unknown error'));
                setTimeout(() => clearMessages('#edit-date-modal'), 3000);
            }
        },
        error: function(xhr, status, error) {
            hideLoader();
            console.error('AJAX Error:', status, error, xhr.responseText); // Debug: Log error details
            $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error fetching attendance: ' + error);
            setTimeout(() => clearMessages('#edit-date-modal'), 3000);
        }
    });
});
        $('#update-attendance').on('click', function() {
            const formData = new FormData($('#edit-attendance-form')[0]);
            formData.append('action', 'su_p_update_student_attendance');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-attendance-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#edit-attendance-modal');
                            loadAttendance(currentPage, perPage, studentIdSearch, studentNameSearch, centerFilter, classFilter, sectionFilter, monthFilter, yearFilter, false);
                        }, 2000);
                        setTimeout(() => clearMessages('#edit-attendance-modal'), 1500);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#edit-attendance-modal'), 3000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-attendance-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error updating attendance: ' + error);
                    setTimeout(() => clearMessages('#edit-attendance-modal'), 3000);
                }
            });
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        const month_names = ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    });
    </script>
    <?php
    return ob_get_clean();
}
// AJAX Handler: Fetch Attendance Data
add_action('wp_ajax_su_p_fetch_student_attendance', 'su_p_fetch_student_attendance');
function su_p_fetch_student_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'student_attendance';

    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $offset = ($page - 1) * $per_page;
    $student_id = sanitize_text_field($_POST['search_student_id'] ?? '');
    $student_name = sanitize_text_field($_POST['search_student_name'] ?? '');
    $center_filter = sanitize_text_field($_POST['center_filter'] ?? '');
    $class_filter = sanitize_text_field($_POST['class_filter'] ?? '');
    $section_filter = sanitize_text_field($_POST['section_filter'] ?? '');
    $month = isset($_POST['month']) ? intval($_POST['month']) : 0;
    $year = isset($_POST['year']) ? intval($_POST['year']) : 0;

    $query = "SELECT sa.*, COUNT(*) OVER() as total FROM $table_name sa WHERE 1=1";
    $count_query = "SELECT COUNT(*) FROM $table_name WHERE 1=1";
    $args = [];

    if ($student_id) {
        $query .= " AND sa.student_id = %s";
        $count_query .= " AND student_id = %s";
        $args[] = $student_id;
    }
    if ($student_name) {
        $query .= " AND sa.student_name LIKE %s";
        $count_query .= " AND student_name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($student_name) . '%';
    }
    if ($center_filter) {
        $query .= " AND sa.education_center_id = %s";
        $count_query .= " AND education_center_id = %s";
        $args[] = $center_filter;
    }
    if ($class_filter) {
        $query .= " AND sa.class = %s";
        $count_query .= " AND class = %s";
        $args[] = $class_filter;
    }
    if ($section_filter) {
        $query .= " AND sa.section = %s";
        $count_query .= " AND section = %s";
        $args[] = $section_filter;
    }
    if ($month && $year) {
        $query .= " AND YEAR(sa.date) = %d AND MONTH(sa.date) = %d";
        $count_query .= " AND YEAR(date) = %d AND MONTH(date) = %d";
        $args[] = $year;
        $args[] = $month;
    }

    $query .= " ORDER BY sa.date DESC LIMIT %d OFFSET %d";
    $args[] = $per_page;
    $args[] = $offset;

    $results = $wpdb->get_results($wpdb->prepare($query, $args));
    $total = $results ? $results[0]->total : $wpdb->get_var($wpdb->prepare($count_query, array_slice($args, 0, -2)));

    $days_in_month = ($month && $year) ? cal_days_in_month(CAL_GREGORIAN, $month, $year) : 0;
    $head_html = "<tr><th>Student Name</th><th>Student ID</th><th>Edu Center ID</th><th>Class</th><th>Section</th><th>Date</th><th>Status</th><th>Subject</th><th>Teacher ID</th><th>Actions</th></tr>";
    if ($month && $year) {
        $head_html = "<tr><th>Student Name</th><th>Student ID</th><th>Edu Center ID</th><th>Class</th><th>Section</th><th>P</th><th>L</th><th>A</th><th>F</th><th>H</th><th>%</th>";
        for ($day = 1; $day <= $days_in_month; $day++) {
            $date = sprintf('%04d-%02d-%02d', $year, $month, $day);
            $day_name = date('D', strtotime($date));
            $head_html .= "<th>$day<br>$day_name</th>";
        }
        $head_html .= "<th>Actions</th></tr>";
    }

    $body_html = '';
    if ($results) {
        if ($month && $year) {
            $student_data = [];
            foreach ($results as $row) {
                $key = $row->student_id;
                if (!isset($student_data[$key])) {
                    $student_data[$key] = [
                        'name' => $row->student_name,
                        'edu_center' => $row->education_center_id,
                        'class' => $row->class,
                        'section' => $row->section,
                        'attendance' => array_fill(1, $days_in_month, ''),
                        'counts' => ['P' => 0, 'L' => 0, 'A' => 0, 'F' => 0, 'H' => 0],
                        'last_date' => $row->date,
                    ];
                }
                $day = (int)date('j', strtotime($row->date));
                $status_short = '';
                switch ($row->status) {
                    case 'Present': $status_short = 'P'; $student_data[$key]['counts']['P']++; break;
                    case 'Late': $status_short = 'L'; $student_data[$key]['counts']['L']++; break;
                    case 'Absent': $status_short = 'A'; $student_data[$key]['counts']['A']++; break;
                    case 'Full Day': $status_short = 'F'; $student_data[$key]['counts']['F']++; break;
                    case 'Holiday': $status_short = 'H'; $student_data[$key]['counts']['H']++; break;
                }
                $student_data[$key]['attendance'][$day] = $status_short;
            }
            foreach ($student_data as $student_id => $data) {
                $total_days = $days_in_month - $data['counts']['H'];
                $percent = $total_days > 0 ? round(($data['counts']['P'] / $total_days) * 100) : 0;
                $body_html .= "<tr data-student-id='$student_id'>
                    <td>" . esc_html($data['name']) . "</td>
                    <td>" . esc_html($student_id) . "</td>
                    <td>" . esc_html($data['edu_center']) . "</td>
                    <td>" . esc_html($data['class']) . "</td>
                    <td>" . esc_html($data['section']) . "</td>
                    <td>" . esc_html($data['counts']['P']) . "</td>
                    <td>" . esc_html($data['counts']['L']) . "</td>
                    <td>" . esc_html($data['counts']['A']) . "</td>
                    <td>" . esc_html($data['counts']['F']) . "</td>
                    <td>" . esc_html($data['counts']['H']) . "</td>
                    <td>" . esc_html($percent) . "%</td>";
                for ($day = 1; $day <= $days_in_month; $day++) {
                    $body_html .= "<td>" . esc_html($data['attendance'][$day] ?? '') . "</td>";
                }
                $body_html .= "<td><button class='edu-button edu-button-edit edit-attendance' data-student-id='$student_id' data-date='{$data['last_date']}'>Edit</button></td></tr>";
            }
        } else {
            foreach ($results as $row) {
                $body_html .= "<tr data-sa-id='$row->sa_id'>
                    <td>" . esc_html($row->student_name) . "</td>
                    <td>" . esc_html($row->student_id) . "</td>
                    <td>" . esc_html($row->education_center_id) . "</td>
                    <td>" . esc_html($row->class) . "</td>
                    <td>" . esc_html($row->section) . "</td>
                    <td>" . esc_html($row->date) . "</td>
                    <td>" . esc_html($row->status) . "</td>
                    <td>" . esc_html($row->subject) . "</td>
                    <td>" . esc_html($row->teacher_id) . "</td>
                    <td><button class='edu-button edu-button-edit edit-attendance' data-sa-id='$row->sa_id'>Edit</button></td>
                </tr>";
            }
        }
    } else {
        $body_html = "<tr><td colspan='" . ($month && $year ? (11 + $days_in_month) : 10) . "'>No records found</td></tr>";
    }

    wp_send_json_success([
        'attendance' => $body_html,
        'total' => $total,
        'days_in_month' => $days_in_month,
        'table_head' => $head_html,
    ]);
}

// AJAX Handler: Add Attendance
add_action('wp_ajax_su_p_add_student_attendance', 'su_p_add_student_attendance');
function su_p_add_student_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'student_attendance';

    $data = [
        'education_center_id' => sanitize_text_field($_POST['education_center_id']),
        'student_id' => sanitize_text_field($_POST['student_id']),
        'student_name' => sanitize_text_field($wpdb->get_var($wpdb->prepare("SELECT student_name FROM {$wpdb->prefix}students WHERE student_id = %s", $_POST['student_id']))),
        'class' => sanitize_text_field($_POST['class']),
        'section' => sanitize_text_field($_POST['section']),
        'date' => sanitize_text_field($_POST['date']),
        'status' => sanitize_text_field($_POST['status']),
        'subject' => sanitize_text_field($_POST['subject']),
        'teacher_id' => sanitize_text_field($_POST['teacher_id']),
    ];

    $result = $wpdb->insert($table_name, $data, ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add attendance: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Attendance added successfully!');
    }
}

// AJAX Handler: Get Attendance Record for Edit
add_action('wp_ajax_su_p_get_student_attendance', 'su_p_get_student_attendance');
function su_p_get_student_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'student_attendance';
    $student_id = sanitize_text_field($_POST['student_id']);
    $date = sanitize_text_field($_POST['date']);

    $record = $wpdb->get_row(
        $wpdb->prepare(
            "SELECT sa_id, education_center_id, student_id, student_name, class, section, date, status, subject_id, teacher_id FROM $table_name WHERE student_id = %s AND date = %s",
            $student_id,
            $date
        ),
        ARRAY_A
    );

    if ($record) {
        wp_send_json_success($record);
    } else {
        wp_send_json_error('No record found.');
    }
}
add_action('wp_ajax_su_p_get_student_attendance', 'su_p_get_student_attendance');

// AJAX Handler: Update Attendance
add_action('wp_ajax_su_p_update_student_attendance', 'su_p_update_student_attendance');
function su_p_update_student_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'student_attendance';

    $sa_id = intval($_POST['sa_id']);
    $data = [
        'status' => sanitize_text_field($_POST['status']),
        'subject' => sanitize_text_field($_POST['subject']),
        'teacher_id' => sanitize_text_field($_POST['teacher_id']),
    ];

    $result = $wpdb->update($table_name, $data, ['sa_id' => $sa_id], ['%s', '%s', '%s'], ['%d']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update attendance: ' . $wpdb->last_error]);
    } elseif ($result === 0) {
        wp_send_json_error(['message' => 'No changes made.']);
    } else {
        wp_send_json_success('Attendance updated successfully!');
    }
}
function su_p_get_student_attendance_dates() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'student_attendance';
    $student_id = sanitize_text_field($_POST['student_id']);

    $dates = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT DISTINCT date FROM $table_name WHERE student_id = %s ORDER BY date DESC",
            $student_id
        ),
        ARRAY_A
    );

    if ($dates) {
        wp_send_json_success(array_map(function($row) { return ['date' => $row['date']]; }, $dates));
    } else {
        wp_send_json_error('No attendance records found for this student.');
    }
}
add_action('wp_ajax_su_p_get_student_attendance_dates', 'su_p_get_student_attendance_dates');

//teachers attendance 
function render_su_p_teacher_attendance() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'teacher_attendance';
    $departments_table = $wpdb->prefix . 'departments';
    ob_start();

    // Fetch departments for filtering
    $departments = $wpdb->get_results("SELECT department_id, department_name FROM $departments_table ORDER BY department_name");
    ?>
    <div class="attendance-main-wrapper">
        <div class="attendance-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="attendance-management">
                <h2>Teacher Attendance</h2>
                <div class="search-filters">
                    <input type="text" id="teacher-id-search" placeholder="Search by Teacher ID...">
                    <input type="text" id="teacher-name-search" placeholder="Search by Teacher Name...">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="department-filter">
                        <option value="">All Departments</option>
                        <?php
                        foreach ($departments as $dept) {
                            echo "<option value='" . esc_attr($dept->department_id) . "'>" . esc_html($dept->department_name) . "</option>";
                        }
                        ?>
                    </select>
                    <select id="month-filter">
                        <option value="">Select Month</option>
                        <?php
                        $month_names = [1 => 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                        $current_month = date('n');
                        $current_year = date('Y');
                        $dates = $wpdb->get_results("SELECT DISTINCT YEAR(date) AS year, MONTH(date) AS month FROM $table_name ORDER BY year DESC, month DESC");
                        foreach ($dates as $date) {
                            $selected = ($date->month == $current_month && $date->year == $current_year) ? 'selected' : '';
                            echo "<option value='{$date->month}' data-year='{$date->year}' $selected>" . esc_html($month_names[$date->month] . ' ' . $date->year) . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-attendance-btn">Add Attendance</button>
                    <label for="attendance-per-page">Show:</label>
                    <select id="attendance-per-page">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button id="prev-page" disabled>Previous</button>
                    <span id="page-info"></span>
                    <button id="next-page">Next</button>
                    <button id="refresh-data">Refresh</button>
                </div>
                <div class="attendance-table-wrapper">
                    <div class="actions" id="export-tools"></div>
                    <table id="attendance-table">
                        <thead id="attendance-table-head"></thead>
                        <tbody id="attendance-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Attendance Modal -->
    <div class="edu-modal" id="add-attendance-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-attendance-modal">×</span>
            <h3>Add Teacher Attendance</h3>
            <form id="add-attendance-form">
                <div class="search-filters">
                    <label for="add-center-id">Education Center</label>
                    <select id="add-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-teacher-id">Teacher</label>
                    <select id="add-teacher-id" name="teacher_id" required>
                        <option value="">Select Teacher</option>
                        <!-- Populated via JS based on center selection -->
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-department">Department</label>
                    <input type="text" id="add-department" name="department_name" readonly required>
                </div>
                <div class="search-filters">
                    <label for="add-attendance-date">Date</label>
                    <input type="date" id="add-attendance-date" name="date" value="<?php echo date('Y-m-d'); ?>" required>
                </div>
                <div class="search-filters">
                    <label for="add-status">Status</label>
                    <select id="add-status" name="status" required>
                        <option value="Present">Present</option>
                        <option value="Late">Late</option>
                        <option value="Absent">Absent</option>
                        <option value="On Leave">On Leave</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>">
                <button type="button" id="save-attendance">Save Attendance</button>
            </form>
            <div id="add-attendance-message" class="message"></div>
        </div>
    </div>

    <!-- Date Selection Modal for Edit -->
    <div class="edu-modal" id="edit-date-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-date-modal">×</span>
            <h3>Select Attendance Date to Edit</h3>
            <form id="edit-date-form">
                <div class="search-filters">
                    <label for="edit-teacher-id-display">Teacher</label>
                    <input type="text" id="edit-teacher-id-display" readonly>
                    <input type="hidden" id="edit-teacher-id" name="teacher_id">
                </div>
                <div class="search-filters">
                    <label for="edit-date-select">Select Date</label>
                    <select id="edit-date-select" name="date" required>
                        <option value="">Choose a date</option>
                    </select>
                </div>
                <button type="button" id="proceed-edit">Proceed to Edit</button>
            </form>
            <div id="edit-date-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Attendance Modal -->
    <div class="edu-modal" id="edit-attendance-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-attendance-modal">×</span>
            <h3>Edit Teacher Attendance</h3>
            <form id="edit-attendance-form">
                <input type="hidden" id="edit-attendance-id" name="ta_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center ID</label>
                    <input type="text" id="edit-center-id" name="education_center_id" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-teacher-id-display">Teacher</label>
                    <!-- <input type="text" id="edit-teacher-id-display" name="teacher_id_display" readonly> -->
                    <input type="text" id="edit-teacher-id-hidden" name="teacher_id"readonly>
                </div>
                <div class="search-filters">
                    <label for="edit-department">Department</label>
                    <input type="text" id="edit-department" name="department_name" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-attendance-date">Date</label>
                    <input type="date" id="edit-attendance-date" name="date" required>
                </div>
                <div class="search-filters">
                    <label for="edit-status">Status</label>
                    <select id="edit-status" name="status" required>
                        <option value="Present">Present</option>
                        <option value="Late">Late</option>
                        <option value="Absent">Absent</option>
                        <option value="On Leave">On Leave</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>">
                <button type="button" id="update-attendance">Update Attendance</button>
            </form>
            <div id="edit-attendance-message" class="message"></div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>';

        let currentPage = 1;
        let perPage = 10;
        let teacherIdSearch = '';
        let teacherNameSearch = '';
        let centerFilter = '';
        let departmentFilter = '';
        let monthFilter = '<?php echo date('n'); ?>';
        let yearFilter = '<?php echo date('Y'); ?>';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { 
            showLoader(); 
            $(modalId).css('display', 'flex'); 
            setTimeout(hideLoader, 100); 
            clearMessages(modalId);
        }
        function closeModal(modalId) { 
            $(modalId).css('display', 'none'); 
            clearMessages(modalId); 
            hideLoader(); 
        }
        function clearMessages(modalId) {
            $(modalId + ' .message').css({'background': '', 'color': ''}).text('');
        }

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        function getTableData() {
            const table = $('#attendance-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => 
                Array.from(row.querySelectorAll('td')).map(td => td.textContent.trim())
            );
            return [headers, ...rows];
        }

        function exportToCSV() {
            showLoader();
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `teacher_attendance_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
            hideLoader();
        }

        function exportToExcel() {
            if (!window.XLSX) { console.error('XLSX library not loaded'); return; }
            showLoader();
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Teacher Attendance');
            XLSX.writeFile(wb, `teacher_attendance_${new Date().toISOString().slice(0,10)}.xlsx`);
            hideLoader();
        }

        function generatePDF() {
            showLoader();
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            const pageWidth = doc.internal.pageSize.width;
            const pageHeight = doc.internal.pageSize.height;
            const margin = 10;
            const borderColor = [70, 131, 180];
            const filters = `Filters: Teacher ID: ${teacherIdSearch || 'All'}, Name: ${teacherNameSearch || 'All'}, Center: ${centerFilter || 'All'}, Department: ${departmentFilter || 'All'}, Month: ${monthFilter ? month_names[parseInt(monthFilter)] : 'All'} ${yearFilter}`;

            doc.setDrawColor(...borderColor);
            doc.setLineWidth(1);
            doc.rect(margin, margin, pageWidth - 2 * margin, pageHeight - 2 * margin);
            if (instituteLogo) {
                try {
                    doc.addImage(instituteLogo, 'JPEG', margin + 5, margin + 5, 20, 20);
                } catch (e) { console.log('Logo loading failed:', e); }
            }
            doc.setFontSize(16);
            doc.setTextColor(...borderColor);
            doc.text(instituteName.toUpperCase(), pageWidth / 2, margin + 15, { align: 'center' });
            doc.setFontSize(12);
            doc.setTextColor(0);
            doc.text('Teacher Attendance Report', pageWidth / 2, margin + 25, { align: 'center' });
            doc.setFontSize(10);
            doc.setTextColor(100);
            doc.text(filters, margin + 5, margin + 35, { maxWidth: pageWidth - 2 * margin - 10 });

            if (typeof doc.autoTable === 'function' && data.length > 1) {
                doc.autoTable({
                    startY: margin + 40,
                    head: [data[0]],
                    body: data.slice(1),
                    theme: 'grid',
                    styles: { fontSize: 8, cellPadding: 2, overflow: 'linebreak', halign: 'center' },
                    headStyles: { fillColor: borderColor, textColor: [255, 255, 255], fontStyle: 'bold' },
                    alternateRowStyles: { fillColor: [245, 245, 245] },
                    columnStyles: { 0: { cellWidth: 30 } },
                    didDrawPage: function(data) {
                        const pageNumber = doc.internal.getNumberOfPages();
                        doc.setFontSize(8);
                        doc.text(`Page ${pageNumber}`, pageWidth - margin - 10, pageHeight - margin - 5, { align: 'right' });
                    }
                });
                const finalY = doc.lastAutoTable.finalY || margin + 40;
                doc.setFontSize(9);
                doc.setTextColor(100);
                doc.text(`Generated on ${new Date().toISOString().slice(0,10)}`, pageWidth / 2, finalY + 10, { align: 'center' });
                doc.save(`teacher_attendance_${new Date().toISOString().slice(0,10)}.pdf`);
            } else {
                console.error('jsPDF autoTable plugin not loaded or no data');
                alert('PDF generation failed');
            }
            hideLoader();
        }

        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
        }

        function loadAttendance(page, limit, tid, tname, center, dept, month, year, showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_teacher_attendance',
                    page: page,
                    per_page: limit,
                    search_teacher_id: tid,
                    search_teacher_name: tname,
                    center_filter: center,
                    department_filter: dept,
                    month: month,
                    year: year,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#attendance-table-head').html(response.data.table_head);
                        $('#attendance-table-body').html(response.data.attendance);
                        const totalPages = Math.ceil(response.data.total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages} (Total Records: ${response.data.total})`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                        setupExportButtons();
                    } else {
                        $('#attendance-table-body').html('<tr><td colspan="7">No attendance found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    if (showLoading) hideLoader();
                    $('#attendance-table-body').html('<tr><td colspan="7">Error loading attendance: ' + error + '</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);

        $('#teacher-id-search').on('input', debounce(function() {
            teacherIdSearch = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        }, 500));

        $('#teacher-name-search').on('input', debounce(function() {
            teacherNameSearch = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        }, 500));

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        });

        $('#department-filter').on('change', function() {
            departmentFilter = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        });

        $('#month-filter').on('change', function() {
            monthFilter = $(this).val();
            yearFilter = $(this).find('option:selected').data('year') || '<?php echo date('Y'); ?>';
            currentPage = 1;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        });

        $('#attendance-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        });

        $('#refresh-data').on('click', function() {
            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter);
        });

        $('#add-attendance-btn').on('click', function() {
            openModal('#add-attendance-modal');
            $('#add-teacher-id').html('<option value="">Select Teacher</option>');
        });

        $('#add-center-id').on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_fetch_teachers_by_center',
                        center_id: centerId,
                        nonce: ajaxNonce
                    },
                    success: function(response) {
                        if (response.success) {
                            const $teacherSelect = $('#add-teacher-id');
                            $teacherSelect.html('<option value="">Select Teacher</option>');
                            response.data.teachers.forEach(teacher => {
                                $teacherSelect.append(`<option value="${teacher.teacher_id}" data-department="${teacher.teacher_department}">${teacher.teacher_name} (${teacher.teacher_id})</option>`);
                            });
                        }
                    }
                });
            }
        });

        $('#add-teacher-id').on('change', function() {
            const $option = $(this).find('option:selected');
            $('#add-department').val($option.data('department'));
        });

        $('#save-attendance').on('click', function() {
            const formData = new FormData($('#add-attendance-form')[0]);
            formData.append('action', 'su_p_add_teacher_attendance');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-attendance-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#add-attendance-modal');
                            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter, false);
                        }, 2000);
                        setTimeout(() => clearMessages('#add-attendance-modal'), 1500);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#add-attendance-modal'), 3000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#add-attendance-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error adding attendance: ' + error);
                    setTimeout(() => clearMessages('#add-attendance-modal'), 3000);
                }
            });
        });

        $(document).on('click', '.edit-attendance', function() {
            const teacherId = $(this).data('teacher-id');
            const teacherName = $(this).closest('tr').find('td:first').text();
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_get_teacher_attendance_dates',
                    teacher_id: teacherId,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-teacher-id').val(teacherId);
                        $('#edit-teacher-id-display').val(teacherName);
                        const $dateSelect = $('#edit-date-select');
                        $dateSelect.empty().append('<option value="">Choose a date</option>');
                        response.data.forEach(date => {
                            $dateSelect.append(`<option value="${date.date}">${date.date}</option>`);
                        });
                        openModal('#edit-date-modal');
                    } else {
                        alert('Error: ' + response.data);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error fetching attendance dates: ' + error);
                }
            });
        });

        $('#proceed-edit').on('click', function() {
            const teacherId = $('#edit-teacher-id').val();
            const date = $('#edit-date-select').val();
            if (!date) {
                $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Please select a date.');
                setTimeout(() => clearMessages('#edit-date-modal'), 3000);
                return;
            }
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_get_teacher_attendance',
                    teacher_id: teacherId,
                    date: date,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const record = response.data;
                        $('#edit-attendance-id').val(record.ta_id);
                        $('#edit-center-id').val(record.education_center_id);
                        $('#edit-teacher-id-display').val(`${record.teacher_name} (${record.teacher_id})`);
                        $('#edit-teacher-id-hidden').val(record.teacher_id);
                        $('#edit-department').val(record.department_name);
                        $('#edit-attendance-date').val(record.date);
                        $('#edit-status').val(record.status);
                        closeModal('#edit-date-modal');
                        openModal('#edit-attendance-modal');
                    } else {
                        $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + response.data);
                        setTimeout(() => clearMessages('#edit-date-modal'), 3000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error fetching attendance: ' + error);
                    setTimeout(() => clearMessages('#edit-date-modal'), 3000);
                }
            });
        });

        $('#update-attendance').on('click', function() {
            const formData = new FormData($('#edit-attendance-form')[0]);
            formData.append('action', 'su_p_update_teacher_attendance');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-attendance-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#edit-attendance-modal');
                            loadAttendance(currentPage, perPage, teacherIdSearch, teacherNameSearch, centerFilter, departmentFilter, monthFilter, yearFilter, false);
                        }, 2000);
                        setTimeout(() => clearMessages('#edit-attendance-modal'), 1500);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#edit-attendance-modal'), 3000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-attendance-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error updating attendance: ' + error);
                    setTimeout(() => clearMessages('#edit-attendance-modal'), 3000);
                }
            });
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        const month_names = ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler: Fetch Teacher Attendance
add_action('wp_ajax_su_p_fetch_teacher_attendance', 'su_p_fetch_teacher_attendance');

function su_p_fetch_teacher_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'teacher_attendance';
    $departments_table = $wpdb->prefix . 'departments';

    // Sanitize and validate inputs
    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $tid = sanitize_text_field($_POST['search_teacher_id'] ?? '');
    $tname = sanitize_text_field($_POST['search_teacher_name'] ?? '');
    $center = sanitize_text_field($_POST['center_filter'] ?? '');
    $dept = sanitize_text_field($_POST['department_filter'] ?? '');
    $month = !empty($_POST['month']) ? intval($_POST['month']) : date('n');
    $year = !empty($_POST['year']) ? intval($_POST['year']) : date('Y');

    // Calculate days in the selected month
    $days_in_month = cal_days_in_month(CAL_GREGORIAN, $month, $year);

    // Base query
    $query = "SELECT ta.teacher_id, ta.teacher_name, d.department_name, ta.date, ta.status 
              FROM $table_name ta 
              LEFT JOIN $departments_table d ON ta.department_id = d.department_id 
              WHERE YEAR(ta.date) = %d AND MONTH(ta.date) = %d";
    $args = [$year, $month];

    // Add filters
    if ($tid) {
        $query .= " AND ta.teacher_id LIKE %s";
        $args[] = '%' . $wpdb->esc_like($tid) . '%';
    }
    if ($tname) {
        $query .= " AND ta.teacher_name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($tname) . '%';
    }
    if ($center) {
        $query .= " AND ta.education_center_id = %s";
        $args[] = $center;
    }
    if ($dept) {
        $query .= " AND ta.department_id = %d";
        $args[] = $dept;
    }

    // Total count query (distinct teachers)
    $total_query = "SELECT COUNT(DISTINCT ta.teacher_id) 
                    FROM $table_name ta 
                    WHERE YEAR(ta.date) = %d AND MONTH(ta.date) = %d";
    $total_args = [$year, $month];
    if ($tid) {
        $total_query .= " AND ta.teacher_id LIKE %s";
        $total_args[] = '%' . $wpdb->esc_like($tid) . '%';
    }
    if ($tname) {
        $total_query .= " AND ta.teacher_name LIKE %s";
        $total_args[] = '%' . $wpdb->esc_like($tname) . '%';
    }
    if ($center) {
        $total_query .= " AND ta.education_center_id = %s";
        $total_args[] = $center;
    }
    if ($dept) {
        $total_query .= " AND ta.department_id = %d";
        $total_args[] = $dept;
    }

    // Get total count
    $total = $wpdb->get_var($wpdb->prepare($total_query, $total_args));
    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Database error (total): ' . $wpdb->last_error]);
    }

    // Pagination
    $offset = ($page - 1) * $per_page;
    $query .= " ORDER BY ta.teacher_id LIMIT %d OFFSET %d";
    $args[] = $per_page;
    $args[] = $offset;

    // Fetch results
    $results = $wpdb->get_results($wpdb->prepare($query, $args));
    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Database error (results): ' . $wpdb->last_error]);
    }

    // Process data into calendar format
    $teacher_data = [];
    foreach ($results as $row) {
        $teacher_key = $row->teacher_id;
        if (!isset($teacher_data[$teacher_key])) {
            $teacher_data[$teacher_key] = [
                'name' => $row->teacher_name,
                'department' => $row->department_name ?: 'N/A',
                'attendance' => array_fill(1, $days_in_month, ''),
                'counts' => ['P' => 0, 'L' => 0, 'A' => 0, 'O' => 0]
            ];
        }
        $day = (int) date('j', strtotime($row->date));
        if ($day >= 1 && $day <= $days_in_month) {
            $status_short = '';
            switch ($row->status) {
                case 'Present': $status_short = 'P'; $teacher_data[$teacher_key]['counts']['P']++; break;
                case 'Late': $status_short = 'L'; $teacher_data[$teacher_key]['counts']['L']++; break;
                case 'Absent': $status_short = 'A'; $teacher_data[$teacher_key]['counts']['A']++; break;
                case 'On Leave': $status_short = 'O'; $teacher_data[$teacher_key]['counts']['O']++; break;
            }
            $teacher_data[$teacher_key]['attendance'][$day] = $status_short;
        }
    }

    // Build table header
    $table_head = '<tr><th>Name</th><th>Teacher ID</th><th>Department</th><th>P</th><th>L</th><th>A</th><th>O</th><th>%</th>';
    for ($day = 1; $day <= $days_in_month; $day++) {
        $date = sprintf('%04d-%02d-%02d', $year, $month, $day);
        $day_name = date('D', strtotime($date));
        $table_head .= "<th>$day<br>$day_name</th>";
    }
    $table_head .= '<th>Actions</th></tr>';

    // Build table body
    $attendance = '';
    if (!empty($teacher_data)) {
        foreach ($teacher_data as $teacher_id => $data) {
            $total_days = $days_in_month - $data['counts']['O'];
            $percent = $total_days > 0 ? round(($data['counts']['P'] / $total_days) * 100) : 0;
            $attendance .= "<tr>
                <td>" . esc_html($data['name']) . "</td>
                <td>" . esc_html($teacher_id) . "</td>
                <td>" . esc_html($data['department']) . "</td>
                <td>" . esc_html($data['counts']['P']) . "</td>
                <td>" . esc_html($data['counts']['L']) . "</td>
                <td>" . esc_html($data['counts']['A']) . "</td>
                <td>" . esc_html($data['counts']['O']) . "</td>
                <td>" . esc_html($percent . '%') . "</td>";
            for ($day = 1; $day <= $days_in_month; $day++) {
                $attendance .= "<td>" . esc_html($data['attendance'][$day] ?? '') . "</td>";
            }
            $attendance .= "<td><button class='edit-attendance' data-teacher-id='" . esc_attr($teacher_id) . "'>Edit</button></td>
            </tr>";
        }
    } else {
        $attendance = "<tr><td colspan='" . (8 + $days_in_month) . "'>No attendance records found.</td></tr>";
    }

    // Send JSON response
    wp_send_json_success([
        'table_head' => $table_head,
        'attendance' => $attendance,
        'total' => $total ?: 0
    ]);
}

// AJAX Handler: Fetch Teachers by Center
add_action('wp_ajax_su_p_fetch_teachers_by_center', 'su_p_fetch_teachers_by_center');
function su_p_fetch_teachers_by_center() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    $center_id = sanitize_text_field($_POST['center_id']);
    $teachers = get_teachers_by_center($center_id);
    wp_send_json_success(['teachers' => $teachers]);
}

// AJAX Handler: Add Teacher Attendance
add_action('wp_ajax_su_p_add_teacher_attendance', 'su_p_add_teacher_attendance');
function su_p_add_teacher_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'teacher_attendance';

    $center_id = sanitize_text_field($_POST['education_center_id']);
    $teacher_id = sanitize_text_field($_POST['teacher_id']);
    $date = sanitize_text_field($_POST['date']);
    $status = sanitize_text_field($_POST['status']);

    $teachers = get_teachers_by_center($center_id);
    $teacher = array_filter($teachers, fn($t) => $t->teacher_id === $teacher_id);
    $teacher = reset($teacher);

    if (!$teacher) {
        wp_send_json_error(['message' => 'Teacher not found']);
    }

    $department_id = get_or_create_department_id($teacher->teacher_department, $center_id);
    $result = $wpdb->insert($table_name, [
        'education_center_id' => $center_id,
        'teacher_id' => $teacher_id,
        'teacher_name' => $teacher->teacher_name,
        'department_id' => $department_id,
        'date' => $date,
        'status' => $status
    ]);

    if ($result !== false) {
        wp_send_json_success('Attendance added successfully');
    } else {
        wp_send_json_error(['message' => $wpdb->last_error]);
    }
}

// AJAX Handler: Get Teacher Attendance Dates
add_action('wp_ajax_su_p_get_teacher_attendance_dates', 'su_p_get_teacher_attendance_dates');
function su_p_get_teacher_attendance_dates() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'teacher_attendance';
    $teacher_id = sanitize_text_field($_POST['teacher_id']);
    $dates = $wpdb->get_results($wpdb->prepare(
        "SELECT date FROM $table_name WHERE teacher_id = %s ORDER BY date DESC",
        $teacher_id
    ));
    wp_send_json_success($dates);
}

// AJAX Handler: Get Teacher Attendance Record
add_action('wp_ajax_su_p_get_teacher_attendance', 'su_p_get_teacher_attendance');
function su_p_get_teacher_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'teacher_attendance';
    $departments_table = $wpdb->prefix . 'departments';

    $teacher_id = sanitize_text_field($_POST['teacher_id']);
    $date = sanitize_text_field($_POST['date']);
    $record = $wpdb->get_row($wpdb->prepare(
        "SELECT ta.*, d.department_name 
         FROM $table_name ta 
         LEFT JOIN $departments_table d ON ta.department_id = d.department_id 
         WHERE ta.teacher_id = %s AND ta.date = %s",
        $teacher_id, $date
    ));

    if ($record) {
        // Ensure both teacher_id and teacher_name are explicitly included
        wp_send_json_success([
            'ta_id' => $record->ta_id,
            'education_center_id' => $record->education_center_id,
            'teacher_id' => $record->teacher_id,
            'teacher_name' => $record->teacher_name,
            'department_name' => $record->department_name ?: 'N/A',
            'date' => $record->date,
            'status' => $record->status
        ]);
    } else {
        wp_send_json_error('No record found');
    }
}
// AJAX Handler: Update Teacher Attendance
add_action('wp_ajax_su_p_update_teacher_attendance', 'su_p_update_teacher_attendance');
function su_p_update_teacher_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'teacher_attendance';

    $ta_id = intval($_POST['ta_id']);
    $date = sanitize_text_field($_POST['date']);
    $status = sanitize_text_field($_POST['status']);

    $result = $wpdb->update(
        $table_name,
        ['date' => $date, 'status' => $status],
        ['ta_id' => $ta_id],
        ['%s', '%s'],
        ['%d']
    );

    if ($result !== false) {
        wp_send_json_success('Attendance updated successfully');
    } else {
        wp_send_json_error(['message' => $wpdb->last_error]);
    }
}



// Reuse generate_unique_staff_id from your sample code
// function generate_unique_staff_id($wpdb, $table_name, $education_center_id) {
//     $max_attempts = 5;
//     $prefix = 'STF-';
//     $id_length = 12;

//     for ($attempt = 1; $attempt <= $max_attempts; $attempt++) {
//         $time_part = substr(str_replace('.', '', microtime(true)), -10);
//         $random_part = strtoupper(substr(bin2hex(random_bytes(1)), 0, 2));
//         $staff_id = $prefix . $time_part . $random_part;

//         if (strlen($staff_id) > 20) {
//             $staff_id = substr($staff_id, 0, 20);
//         }

//         $exists = $wpdb->get_var($wpdb->prepare(
//             "SELECT COUNT(*) FROM $table_name WHERE staff_id = %s AND education_center_id = %s",
//             $staff_id, $education_center_id
//         ));

//         if ($exists == 0) {
//             return $staff_id;
//         }
//         usleep(10000);
//     }
//     return new WP_Error('staff_id_generation_failed', 'Unable to generate a unique Staff ID after multiple attempts.');
// }

//satff attendance
function render_su_p_staff_attendance() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff_attendance';
    $staff_table = $wpdb->prefix . 'staff';
    ob_start();

    // Fetch educational centers for filtering
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ?>
    <div class="attendance-main-wrapper">
        <div class="attendance-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="attendance-management">
                <h2>Staff Attendance</h2>
                <div class="search-filters">
                    <input type="text" id="staff-id-search" placeholder="Search by Staff ID...">
                    <input type="text" id="staff-name-search" placeholder="Search by Staff Name...">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="role-filter">
                        <option value="">All Roles</option>
                        <option value="Accountant">Accountant</option>
                        <option value="Administrator">Administrator</option>
                        <option value="Librarian">Librarian</option>
                        <option value="Support Staff">Support Staff</option>
                    </select>
                    <select id="month-filter">
                        <option value="">Select Month</option>
                        <?php
                        $month_names = [1 => 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                        $current_month = date('n');
                        $current_year = date('Y');
                        $dates = $wpdb->get_results("SELECT DISTINCT YEAR(date) AS year, MONTH(date) AS month FROM $table_name ORDER BY year DESC, month DESC");
                        foreach ($dates as $date) {
                            $selected = ($date->month == $current_month && $date->year == $current_year) ? 'selected' : '';
                            echo "<option value='{$date->month}' data-year='{$date->year}' $selected>" . esc_html($month_names[$date->month] . ' ' . $date->year) . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-attendance-btn">Add Attendance</button>
                    <label for="attendance-per-page">Show:</label>
                    <select id="attendance-per-page">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button id="prev-page" disabled>Previous</button>
                    <span id="page-info"></span>
                    <button id="next-page">Next</button>
                    <button id="refresh-data">Refresh</button>
                </div>
                <div class="attendance-table-wrapper">
                    <div class="actions" id="export-tools"></div>
                    <table id="attendance-table">
                        <thead id="attendance-table-head"></thead>
                        <tbody id="attendance-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Attendance Modal -->
    <div class="edu-modal" id="add-attendance-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-attendance-modal">×</span>
            <h3>Add Staff Attendance</h3>
            <form id="add-attendance-form">
                <div class="search-filters">
                    <label for="add-center-id">Education Center</label>
                    <select id="add-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-staff-id">Staff</label>
                    <select id="add-staff-id" name="staff_id" required>
                        <option value="">Select Staff</option>
                        <!-- Populated via JS based on center selection -->
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-role">Role</label>
                    <input type="text" id="add-role" name="role" readonly required>
                </div>
                <div class="search-filters">
                    <label for="add-attendance-date">Date</label>
                    <input type="date" id="add-attendance-date" name="date" value="<?php echo date('Y-m-d'); ?>" required>
                </div>
                <div class="search-filters">
                    <label for="add-status">Status</label>
                    <select id="add-status" name="status" required>
                        <option value="Present">Present</option>
                        <option value="Late">Late</option>
                        <option value="Absent">Absent</option>
                        <option value="On Leave">On Leave</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>">
                <button type="button" id="save-attendance">Save Attendance</button>
            </form>
            <div id="add-attendance-message" class="message"></div>
        </div>
    </div>

    <!-- Date Selection Modal for Edit -->
    <div class="edu-modal" id="edit-date-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-date-modal">×</span>
            <h3>Select Attendance Date to Edit</h3>
            <form id="edit-date-form">
                <div class="search-filters">
                    <label for="edit-staff-id-display">Staff</label>
                    <input type="text" id="edit-staff-id-display" readonly>
                    <input type="hidden" id="edit-staff-id" name="staff_id">
                </div>
                <div class="search-filters">
                    <label for="edit-date-select">Select Date</label>
                    <select id="edit-date-select" name="date" required>
                        <option value="">Choose a date</option>
                    </select>
                </div>
                <button type="button" id="proceed-edit">Proceed to Edit</button>
            </form>
            <div id="edit-date-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Attendance Modal -->
    <div class="edu-modal" id="edit-attendance-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-attendance-modal">×</span>
            <h3>Edit Staff Attendance</h3>
            <form id="edit-attendance-form">
                <input type="hidden" id="edit-attendance-id" name="attendance_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center ID</label>
                    <input type="text" id="edit-center-id" name="education_center_id" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-staff-id-display">Staff</label>
                    <input type="text" id="edit-staff-id-display" name="staff_id_display" readonly>
                    <input type="hidden" id="edit-staff-id-hidden" name="staff_id">
                </div>
                <div class="search-filters">
                    <label for="edit-role">Role</label>
                    <input type="text" id="edit-role" name="role" readonly required>
                </div>
                <div class="search-filters">
                    <label for="edit-attendance-date">Date</label>
                    <input type="date" id="edit-attendance-date" name="date" required>
                </div>
                <div class="search-filters">
                    <label for="edit-status">Status</label>
                    <select id="edit-status" name="status" required>
                        <option value="Present">Present</option>
                        <option value="Late">Late</option>
                        <option value="Absent">Absent</option>
                        <option value="On Leave">On Leave</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>">
                <button type="button" id="update-attendance">Update Attendance</button>
            </form>
            <div id="edit-attendance-message" class="message"></div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_attendance_nonce'); ?>';

        let currentPage = 1;
        let perPage = 10;
        let staffIdSearch = '';
        let staffNameSearch = '';
        let centerFilter = '';
        let roleFilter = '';
        let monthFilter = '<?php echo date('n'); ?>';
        let yearFilter = '<?php echo date('Y'); ?>';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { 
            showLoader(); 
            $(modalId).css('display', 'flex'); 
            setTimeout(hideLoader, 100); 
            clearMessages(modalId);
        }
        function closeModal(modalId) { 
            $(modalId).css('display', 'none'); 
            clearMessages(modalId); 
            hideLoader(); 
        }
        function clearMessages(modalId) {
            $(modalId + ' .message').css({'background': '', 'color': ''}).text('');
        }

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        function loadAttendance(page, limit, sid, sname, center, role, month, year, showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_staff_attendance',
                    page: page,
                    per_page: limit,
                    search_staff_id: sid,
                    search_staff_name: sname,
                    center_filter: center,
                    role_filter: role,
                    month: month,
                    year: year,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#attendance-table-head').html(response.data.table_head);
                        $('#attendance-table-body').html(response.data.attendance);
                        const totalPages = Math.ceil(response.data.total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages} (Total Records: ${response.data.total})`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                        setupExportButtons();
                    } else {
                        $('#attendance-table-body').html('<tr><td colspan="8">No attendance found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    if (showLoading) hideLoader();
                    $('#attendance-table-body').html('<tr><td colspan="8">Error loading attendance: ' + error + '</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        // Export functions (CSV, Excel, PDF) - Reused from previous code
        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
        }

        function exportToCSV() { /* Implementation from previous code */ }
        function exportToExcel() { /* Implementation from previous code */ }
        function generatePDF() { /* Implementation from previous code */ }

        loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);

        $('#staff-id-search').on('input', debounce(function() {
            staffIdSearch = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        }, 500));

        $('#staff-name-search').on('input', debounce(function() {
            staffNameSearch = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        }, 500));

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        });

        $('#role-filter').on('change', function() {
            roleFilter = $(this).val();
            currentPage = 1;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        });

        $('#month-filter').on('change', function() {
            monthFilter = $(this).val();
            yearFilter = $(this).find('option:selected').data('year') || '<?php echo date('Y'); ?>';
            currentPage = 1;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        });

        $('#attendance-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        });

        $('#refresh-data').on('click', function() {
            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter);
        });

        $('#add-attendance-btn').on('click', function() {
            openModal('#add-attendance-modal');
            $('#add-staff-id').html('<option value="">Select Staff</option>');
        });

        $('#add-center-id').on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_fetch_staff_by_center',
                        center_id: centerId,
                        nonce: ajaxNonce
                    },
                    success: function(response) {
                        if (response.success) {
                            const $staffSelect = $('#add-staff-id');
                            $staffSelect.html('<option value="">Select Staff</option>');
                            response.data.staff.forEach(staff => {
                                $staffSelect.append(`<option value="${staff.staff_id}" data-role="${staff.role}">${staff.name} (${staff.staff_id})</option>`);
                            });
                        }
                    }
                });
            }
        });

        $('#add-staff-id').on('change', function() {
            const $option = $(this).find('option:selected');
            $('#add-role').val($option.data('role') || '');
        });

        $('#save-attendance').on('click', function() {
            const formData = new FormData($('#add-attendance-form')[0]);
            formData.append('action', 'su_p_add_staff_attendance');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-attendance-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#add-attendance-modal');
                            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter, false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#add-attendance-modal'), 3000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#add-attendance-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error adding attendance: ' + error);
                    setTimeout(() => clearMessages('#add-attendance-modal'), 3000);
                }
            });
        });

        $(document).on('click', '.edit-attendance', function() {
            const staffId = $(this).data('staff-id');
            const staffName = $(this).closest('tr').find('td:first').text();
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_get_staff_attendance_dates',
                    staff_id: staffId,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-staff-id').val(staffId);
                        $('#edit-staff-id-display').val(staffName); // Pre-populate with name from table
                        const $dateSelect = $('#edit-date-select');
                        $dateSelect.empty().append('<option value="">Choose a date</option>');
                        response.data.forEach(date => {
                            $dateSelect.append(`<option value="${date.date}">${date.date}</option>`);
                        });
                        openModal('#edit-date-modal');
                    } else {
                        alert('Error: ' + response.data);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error fetching attendance dates: ' + error);
                }
            });
        });

        $('#proceed-edit').on('click', function() {
            const staffId = $('#edit-staff-id').val();
            const date = $('#edit-date-select').val();
            if (!date) {
                $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Please select a date.');
                setTimeout(() => clearMessages('#edit-date-modal'), 3000);
                return;
            }
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_get_staff_attendance',
                    staff_id: staffId,
                    date: date,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const record = response.data;
                        $('#edit-attendance-id').val(record.attendance_id || '');
                        $('#edit-center-id').val(record.education_center_id || '');
                        $('#edit-staff-id-display').val(`${record.name} (${record.staff_id})`);
                        $('#edit-staff-id-hidden').val(record.staff_id || '');
                        $('#edit-role').val(record.role || 'N/A');
                        $('#edit-attendance-date').val(record.date || '');
                        $('#edit-status').val(record.status || 'Present');
                        closeModal('#edit-date-modal');
                        openModal('#edit-attendance-modal');
                    } else {
                        $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data || 'Unknown error'));
                        setTimeout(() => clearMessages('#edit-date-modal'), 3000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    console.error('AJAX Error:', status, error, xhr.responseText); // Debug
                    $('#edit-date-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error fetching attendance: ' + error);
                    setTimeout(() => clearMessages('#edit-date-modal'), 3000);
                }
            });
        });

        $('#update-attendance').on('click', function() {
            const formData = new FormData($('#edit-attendance-form')[0]);
            formData.append('action', 'su_p_update_staff_attendance');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-attendance-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#edit-attendance-modal');
                            loadAttendance(currentPage, perPage, staffIdSearch, staffNameSearch, centerFilter, roleFilter, monthFilter, yearFilter, false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#edit-attendance-modal'), 3000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-attendance-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error updating attendance: ' + error);
                    setTimeout(() => clearMessages('#edit-attendance-modal'), 3000);
                }
            });
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler: Fetch Staff Attendance
add_action('wp_ajax_su_p_fetch_staff_attendance', 'su_p_fetch_staff_attendance');
function su_p_fetch_staff_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff_attendance';
    $staff_table = $wpdb->prefix . 'staff';

    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $sid = sanitize_text_field($_POST['search_staff_id'] ?? '');
    $sname = sanitize_text_field($_POST['search_staff_name'] ?? '');
    $center = sanitize_text_field($_POST['center_filter'] ?? '');
    $role = sanitize_text_field($_POST['role_filter'] ?? '');
    $month = !empty($_POST['month']) ? intval($_POST['month']) : date('n');
    $year = !empty($_POST['year']) ? intval($_POST['year']) : date('Y');

    $days_in_month = cal_days_in_month(CAL_GREGORIAN, $month, $year);

    $query = "SELECT sa.staff_id, sa.date, sa.status, s.name, s.role 
              FROM $table_name sa 
              LEFT JOIN $staff_table s ON sa.staff_id = s.staff_id 
              WHERE YEAR(sa.date) = %d AND MONTH(sa.date) = %d";
    $args = [$year, $month];

    if ($sid) {
        $query .= " AND sa.staff_id LIKE %s";
        $args[] = '%' . $wpdb->esc_like($sid) . '%';
    }
    if ($sname) {
        $query .= " AND s.name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($sname) . '%';
    }
    if ($center) {
        $query .= " AND sa.education_center_id = %s";
        $args[] = $center;
    }
    if ($role) {
        $query .= " AND s.role = %s";
        $args[] = $role;
    }

    $total_query = "SELECT COUNT(DISTINCT sa.staff_id) 
                    FROM $table_name sa 
                    LEFT JOIN $staff_table s ON sa.staff_id = s.staff_id 
                    WHERE YEAR(sa.date) = %d AND MONTH(sa.date) = %d";
    $total_args = [$year, $month];
    if ($sid) {
        $total_query .= " AND sa.staff_id LIKE %s";
        $total_args[] = '%' . $wpdb->esc_like($sid) . '%';
    }
    if ($sname) {
        $total_query .= " AND s.name LIKE %s";
        $total_args[] = '%' . $wpdb->esc_like($sname) . '%';
    }
    if ($center) {
        $total_query .= " AND sa.education_center_id = %s";
        $total_args[] = $center;
    }
    if ($role) {
        $total_query .= " AND s.role = %s";
        $total_args[] = $role;
    }

    $total = $wpdb->get_var($wpdb->prepare($total_query, $total_args));
    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Database error (total): ' . $wpdb->last_error]);
    }

    $offset = ($page - 1) * $per_page;
    $query .= " ORDER BY sa.staff_id LIMIT %d OFFSET %d";
    $args[] = $per_page;
    $args[] = $offset;

    $results = $wpdb->get_results($wpdb->prepare($query, $args));
    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Database error (results): ' . $wpdb->last_error]);
    }

    $staff_data = [];
    foreach ($results as $row) {
        $staff_key = $row->staff_id;
        if (!isset($staff_data[$staff_key])) {
            $staff_data[$staff_key] = [
                'name' => $row->name,
                'role' => $row->role ?: 'N/A',
                'attendance' => array_fill(1, $days_in_month, ''),
                'counts' => ['P' => 0, 'L' => 0, 'A' => 0, 'O' => 0]
            ];
        }
        $day = (int) date('j', strtotime($row->date));
        if ($day >= 1 && $day <= $days_in_month) {
            $status_short = '';
            switch ($row->status) {
                case 'Present': $status_short = 'P'; $staff_data[$staff_key]['counts']['P']++; break;
                case 'Late': $status_short = 'L'; $staff_data[$staff_key]['counts']['L']++; break;
                case 'Absent': $status_short = 'A'; $staff_data[$staff_key]['counts']['A']++; break;
                case 'On Leave': $status_short = 'O'; $staff_data[$staff_key]['counts']['O']++; break;
            }
            $staff_data[$staff_key]['attendance'][$day] = $status_short;
        }
    }

    $table_head = '<tr><th>Name</th><th>Staff ID</th><th>Role</th><th>P</th><th>L</th><th>A</th><th>O</th><th>%</th>';
    for ($day = 1; $day <= $days_in_month; $day++) {
        $date = sprintf('%04d-%02d-%02d', $year, $month, $day);
        $day_name = date('D', strtotime($date));
        $table_head .= "<th>$day<br>$day_name</th>";
    }
    $table_head .= '<th>Actions</th></tr>';

    $attendance = '';
    if (!empty($staff_data)) {
        foreach ($staff_data as $staff_id => $data) {
            $total_days = $days_in_month - $data['counts']['O'];
            $percent = $total_days > 0 ? round(($data['counts']['P'] / $total_days) * 100) : 0;
            $attendance .= "<tr>
                <td>" . esc_html($data['name']) . "</td>
                <td>" . esc_html($staff_id) . "</td>
                <td>" . esc_html($data['role']) . "</td>
                <td>" . esc_html($data['counts']['P']) . "</td>
                <td>" . esc_html($data['counts']['L']) . "</td>
                <td>" . esc_html($data['counts']['A']) . "</td>
                <td>" . esc_html($data['counts']['O']) . "</td>
                <td>" . esc_html($percent . '%') . "</td>";
            for ($day = 1; $day <= $days_in_month; $day++) {
                $attendance .= "<td>" . esc_html($data['attendance'][$day] ?? '') . "</td>";
            }
            $attendance .= "<td><button class='edit-attendance' data-staff-id='" . esc_attr($staff_id) . "'>Edit</button></td>
            </tr>";
        }
    } else {
        $attendance = "<tr><td colspan='" . (8 + $days_in_month) . "'>No attendance records found.</td></tr>";
    }

    wp_send_json_success([
        'table_head' => $table_head,
        'attendance' => $attendance,
        'total' => $total ?: 0
    ]);
}

// AJAX Handler: Fetch Staff by Center
add_action('wp_ajax_su_p_fetch_staff_by_center', 'su_p_fetch_staff_by_center');
function su_p_fetch_staff_by_center() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $center_id = sanitize_text_field($_POST['center_id']);
    $staff = $wpdb->get_results($wpdb->prepare(
        "SELECT staff_id, name, role FROM {$wpdb->prefix}staff WHERE education_center_id = %s",
        $center_id
    ));
    wp_send_json_success(['staff' => $staff]);
}

// AJAX Handler: Add Staff Attendance
add_action('wp_ajax_su_p_add_staff_attendance', 'su_p_add_staff_attendance');
function su_p_add_staff_attendance() {
    // Verify nonce for security
    check_ajax_referer('su_p_attendance_nonce', 'nonce');

    global $wpdb;
    $table_name = $wpdb->prefix . 'staff_attendance';
    $staff_table = $wpdb->prefix . 'staff';

    // Sanitize inputs
    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $staff_id = sanitize_text_field($_POST['staff_id'] ?? '');
    $date = sanitize_text_field($_POST['date'] ?? '');
    $status = sanitize_text_field($_POST['status'] ?? '');

    // Validate required fields
    if (empty($center_id) || empty($staff_id) || empty($date) || empty($status)) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    // Check if staff exists
    $staff = $wpdb->get_row($wpdb->prepare(
        "SELECT staff_id FROM $staff_table WHERE staff_id = %s AND education_center_id = %s",
        $staff_id,
        $center_id
    ));

    if (!$staff) {
        wp_send_json_error(['message' => 'Staff not found']);
        exit;
    }

    // Insert attendance (no 'name' column)
    $result = $wpdb->insert(
        $table_name,
        [
            'education_center_id' => $center_id,
            'staff_id' => $staff_id,
            'date' => $date,
            'status' => $status
        ],
        ['%s', '%s', '%s', '%s'] // Data types for prepare
    );

    if ($result === false) {
        error_log('Staff Attendance Insert Error: ' . $wpdb->last_error);
        wp_send_json_error(['message' => 'Failed to add attendance: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Attendance added successfully');
    }

    exit; // Ensure no extra output
}
// AJAX Handler: Get Staff Attendance Dates
add_action('wp_ajax_su_p_get_staff_attendance_dates', 'su_p_get_staff_attendance_dates');
function su_p_get_staff_attendance_dates() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff_attendance';
    $staff_id = sanitize_text_field($_POST['staff_id']);
    $dates = $wpdb->get_results($wpdb->prepare(
        "SELECT date FROM $table_name WHERE staff_id = %s ORDER BY date DESC",
        $staff_id
    ));
    wp_send_json_success($dates);
}

// AJAX Handler: Get Staff Attendance Record
add_action('wp_ajax_su_p_get_staff_attendance', 'su_p_get_staff_attendance');
function su_p_get_staff_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff_attendance';
    $staff_table = $wpdb->prefix . 'staff';

    $staff_id = sanitize_text_field($_POST['staff_id']);
    $date = sanitize_text_field($_POST['date']);
    $record = $wpdb->get_row($wpdb->prepare(
        "SELECT sa.*, s.name, s.role 
         FROM $table_name sa 
         LEFT JOIN $staff_table s ON sa.staff_id = s.staff_id 
         WHERE sa.staff_id = %s AND sa.date = %s",
        $staff_id, $date
    ));

    if ($record) {
        wp_send_json_success([
            'attendance_id' => $record->attendance_id,
            'education_center_id' => $record->education_center_id,
            'staff_id' => $record->staff_id,
            'name' => $record->name,
            'role' => $record->role ?: 'N/A',
            'date' => $record->date,
            'status' => $record->status
        ]);
    } else {
        wp_send_json_error('No record found');
    }
}

// AJAX Handler: Update Staff Attendance
add_action('wp_ajax_su_p_update_staff_attendance', 'su_p_update_staff_attendance');
function su_p_update_staff_attendance() {
    check_ajax_referer('su_p_attendance_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'staff_attendance';

    $attendance_id = intval($_POST['attendance_id']);
    $date = sanitize_text_field($_POST['date']);
    $status = sanitize_text_field($_POST['status']);

    $result = $wpdb->update(
        $table_name,
        ['date' => $date, 'status' => $status],
        ['attendance_id' => $attendance_id],
        ['%s', '%s'],
        ['%d']
    );

    if ($result !== false) {
        wp_send_json_success('Attendance updated successfully');
    } else {
        wp_send_json_error(['message' => $wpdb->last_error]);
    }
}

//class sections
// Main Render Function (Unchanged, Modal-Based)
function render_su_p_class_management() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Class Management</h2>
                <div class="search-filters">
                    <input type="text" id="class-name-search" placeholder="Search by Class Name...">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-class-btn">Add Class</button>
                    <label for="classes-per-page">Show:</label>
                    <select id="classes-per-page">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button id="prev-page" disabled>Previous</button>
                    <span id="page-info"></span>
                    <button id="next-page">Next</button>
                    <button id="refresh-data">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools"></div>
                    <table id="class-table">
                        <thead id="class-table-head"></thead>
                        <tbody id="class-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Class Modal -->
    <div class="edu-modal" id="add-class-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-class-modal">×</span>
            <h3>Add New Class</h3>
            <form id="add-class-form">
                <div class="search-filters">
                    <label for="add-center-id">Education Center</label>
                    <select id="add-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-class-name">Class Name</label>
                    <input type="text" id="add-class-name" name="class_name" required>
                </div>
                <div class="search-filters">
                    <label for="add-sections">Sections (e.g., A, B, C)</label>
                    <input type="text" id="add-sections" name="sections" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_class_nonce'); ?>">
                <button type="button" id="save-class">Add Class</button>
            </form>
            <div id="add-class-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Class Modal -->
    <div class="edu-modal" id="edit-class-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-class-modal">×</span>
            <h3>Edit Class</h3>
            <form id="edit-class-form">
                <input type="hidden" id="edit-class-id" name="class_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center</label>
                    <select id="edit-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-class-name">Class Name</label>
                    <input type="text" id="edit-class-name" name="class_name" required>
                </div>
                <div class="search-filters">
                    <label for="edit-sections">Sections (e.g., A, B, C)</label>
                    <input type="text" id="edit-sections" name="sections" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_class_nonce'); ?>">
                <button type="button" id="update-class">Update Class</button>
            </form>
            <div id="edit-class-message" class="message"></div>
        </div>
    </div>

    <script>
    // Global Utility Functions
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }
    function openModal(modalId) { 
        showLoader(); 
        jQuery(modalId).css('display', 'flex'); 
        setTimeout(hideLoader, 100); 
        clearMessages(modalId);
    }
    function closeModal(modalId) { 
        jQuery(modalId).css('display', 'none'); 
        clearMessages(modalId); 
        hideLoader(); 
    }
    function clearMessages(modalId) {
        jQuery(modalId + ' .message').css({'background': '', 'color': ''}).text('');
    }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_class_nonce'); ?>';

        let currentPage = 1;
        let perPage = 10;
        let classNameSearch = '';
        let centerFilter = '';

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        function loadClasses(page, limit, className, center, showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: page,
                    per_page: limit,
                    search_class_name: className,
                    center_filter: center,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#class-table-head').html(response.data.table_head);
                        $('#class-table-body').html(response.data.classes);
                        const totalPages = Math.ceil(response.data.total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages} (Total Records: ${response.data.total})`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                        setupExportButtons(response.data.class_data);
                    } else {
                        $('#class-table-body').html('<tr><td colspan="4">No classes found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    if (showLoading) hideLoader();
                    $('#class-table-body').html('<tr><td colspan="4">Error loading classes: ' + error + '</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        function setupExportButtons(classData) {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
            `);
            tools.find('.export-csv').on('click', () => exportToCSV(classData));
            tools.find('.export-pdf').on('click', () => generatePDF(classData));
            tools.find('.export-excel').on('click', () => exportToExcel(classData));
        }

        function exportToCSV(data) {
            const headers = ['Class ID', 'Class Name', 'Sections', 'Education Center ID'];
            const csvRows = [headers.join(',')];
            data.forEach(row => {
                const values = [row.id, row.class_name, row.sections, row.education_center_id].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const csvContent = csvRows.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'class_sections.csv';
            link.click();
        }

        function generatePDF(data) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Class Sections Report', 10, 10);
            doc.setFontSize(12);
            const tableData = data.map(row => [row.id, row.class_name, row.sections, row.education_center_id]);
            doc.autoTable({
                head: [['Class ID', 'Class Name', 'Sections', 'Education Center ID']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('class_sections.pdf');
        }

        function exportToExcel(data) {
            const worksheetData = data.map(row => ({
                'Class ID': row.id,
                'Class Name': row.class_name,
                'Sections': row.sections,
                'Education Center ID': row.education_center_id
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Classes');
            XLSX.writeFile(workbook, 'class_sections.xlsx');
        }

        loadClasses(currentPage, perPage, classNameSearch, centerFilter);

        $('#class-name-search').on('input', debounce(function() {
            classNameSearch = $(this).val();
            currentPage = 1;
            loadClasses(currentPage, perPage, classNameSearch, centerFilter);
        }, 500));

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadClasses(currentPage, perPage, classNameSearch, centerFilter);
        });

        $('#classes-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadClasses(currentPage, perPage, classNameSearch, centerFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadClasses(currentPage, perPage, classNameSearch, centerFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadClasses(currentPage, perPage, classNameSearch, centerFilter);
        });

        $('#refresh-data').on('click', function() {
            loadClasses(currentPage, perPage, classNameSearch, centerFilter);
        });

        $('#add-class-btn').on('click', function() {
            openModal('#add-class-modal');
        });

        $('#save-class').on('click', function() {
            su_p_add_class();
        });

        $('#class-table-body').on('click', '.edit-class', function() {
            const classId = $(this).data('class-id');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_class',
                    class_id: classId,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-class-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.education_center_id);
                        $('#edit-class-name').val(response.data.class_name);
                        $('#edit-sections').val(response.data.sections);
                        openModal('#edit-class-modal');
                    } else {
                        alert('Error fetching class: ' + response.data.message);
                    }
                }
            });
        });

        $('#update-class').on('click', function() {
            su_p_edit_class();
        });

        $('#class-table-body').on('click', '.delete-class', function() {
            if (confirm('Are you sure you want to delete this class?')) {
                su_p_delete_class($(this).data('class-id'));
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    });

    function su_p_add_class() {
        const formData = new FormData(jQuery('#add-class-form')[0]);
        formData.append('action', 'su_p_add_class');
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideLoader();
                const $message = jQuery('#add-class-message');
                if (response.success) {
                    $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                    setTimeout(() => {
                        closeModal('#add-class-modal');
                        loadClasses(currentPage, perPage, classNameSearch, centerFilter, false);
                    }, 2000);
                } else {
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    setTimeout(() => clearMessages('#add-class-modal'), 3000);
                }
            },
            error: function(xhr, status, error) {
                hideLoader();
                jQuery('#add-class-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error adding class: ' + error);
            }
        });
    }

    function su_p_edit_class() {
        const formData = new FormData(jQuery('#edit-class-form')[0]);
        formData.append('action', 'su_p_edit_class');
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideLoader();
                const $message = jQuery('#edit-class-message');
                if (response.success) {
                    $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                    setTimeout(() => {
                        closeModal('#edit-class-modal');
                        loadClasses(currentPage, perPage, classNameSearch, centerFilter, false);
                    }, 2000);
                } else {
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    setTimeout(() => clearMessages('#edit-class-modal'), 3000);
                }
            },
            error: function(xhr, status, error) {
                hideLoader();
                jQuery('#edit-class-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error editing class: ' + error);
            }
        });
    }

    function su_p_delete_class(classId) {
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: {
                action: 'su_p_delete_class',
                class_id: classId,
                nonce: '<?php echo wp_create_nonce('su_p_class_nonce'); ?>'
            },
            success: function(response) {
                hideLoader();
                if (response.success) {
                    loadClasses(currentPage, perPage, classNameSearch, centerFilter, false);
                } else {
                    alert('Error deleting class: ' + (response.data?.message || 'Unknown error'));
                }
            },
            error: function(xhr, status, error) {
                hideLoader();
                alert('Error deleting class: ' + error);
            }
        });
    }
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handlers (Unchanged)
add_action('wp_ajax_su_p_fetch_classes', 'su_p_fetch_classes');
function su_p_fetch_classes() {
    check_ajax_referer('su_p_class_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'class_sections';

    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $class_name = sanitize_text_field($_POST['search_class_name'] ?? '');
    $center = sanitize_text_field($_POST['center_filter'] ?? '');

    $query = "SELECT * FROM $table_name WHERE 1=1";
    $args = [];

    if ($class_name) {
        $query .= " AND class_name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($class_name) . '%';
    }
    if ($center) {
        $query .= " AND education_center_id = %s";
        $args[] = $center;
    }

    $total = $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM $table_name WHERE 1=1" . strstr($query, ' AND'), $args));
    if ($wpdb->last_error) wp_send_json_error(['message' => 'Database error (total): ' . $wpdb->last_error]);

    $offset = ($page - 1) * $per_page;
    $query .= " ORDER BY id DESC LIMIT %d OFFSET %d";
    $args[] = $per_page;
    $args[] = $offset;

    $results = $wpdb->get_results($wpdb->prepare($query, $args));
    if ($wpdb->last_error) wp_send_json_error(['message' => 'Database error (results): ' . $wpdb->last_error]);

    $table_head = '<tr><th>ID</th><th>Class Name</th><th>Sections</th><th>Education Center ID</th><th>Actions</th></tr>';
    $classes = '';
    $class_data = [];
    if ($results) {
        foreach ($results as $row) {
            $classes .= "<tr>
                <td>" . esc_html($row->id) . "</td>
                <td>" . esc_html($row->class_name) . "</td>
                <td>" . esc_html($row->sections) . "</td>
                <td>" . esc_html($row->education_center_id) . "</td>
                <td>
                    <button class='edit-class' data-class-id='" . esc_attr($row->id) . "'>Edit</button>
                    <button class='delete-class' data-class-id='" . esc_attr($row->id) . "'>Delete</button>
                </td>
            </tr>";
            $class_data[] = [
                'id' => $row->id,
                'class_name' => $row->class_name,
                'sections' => $row->sections,
                'education_center_id' => $row->education_center_id
            ];
        }
    } else {
        $classes = '<tr><td colspan="5">No classes found.</td></tr>';
    }

    wp_send_json_success([
        'table_head' => $table_head,
        'classes' => $classes,
        'class_data' => $class_data,
        'total' => $total ?: 0
    ]);
}

add_action('wp_ajax_su_p_fetch_class', 'su_p_fetch_class');
function su_p_fetch_class() {
    check_ajax_referer('su_p_class_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'class_sections';
    $class_id = intval($_POST['class_id'] ?? 0);

    $class = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table_name WHERE id = %d", $class_id));
    if ($class) {
        wp_send_json_success([
            'id' => $class->id,
            'class_name' => $class->class_name,
            'sections' => $class->sections,
            'education_center_id' => $class->education_center_id
        ]);
    } else {
        wp_send_json_error(['message' => 'Class not found']);
    }
}

add_action('wp_ajax_su_p_add_class', 'su_p_add_class');
function su_p_add_class() {
    check_ajax_referer('su_p_class_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'class_sections';

    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_name = sanitize_text_field($_POST['class_name'] ?? '');
    $sections = sanitize_text_field($_POST['sections'] ?? '');

    if (empty($center_id) || empty($class_name) || empty($sections)) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    $result = $wpdb->insert(
        $table_name,
        [
            'education_center_id' => $center_id,
            'class_name' => $class_name,
            'sections' => $sections
        ],
        ['%s', '%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add class: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Class added successfully');
    }
    exit;
}

add_action('wp_ajax_su_p_edit_class', 'su_p_edit_class');
function su_p_edit_class() {
    check_ajax_referer('su_p_class_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'class_sections';

    $class_id = intval($_POST['class_id'] ?? 0);
    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_name = sanitize_text_field($_POST['class_name'] ?? '');
    $sections = sanitize_text_field($_POST['sections'] ?? '');

    if (empty($class_id) || empty($center_id) || empty($class_name) || empty($sections)) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    $result = $wpdb->update(
        $table_name,
        [
            'education_center_id' => $center_id,
            'class_name' => $class_name,
            'sections' => $sections
        ],
        ['id' => $class_id],
        ['%s', '%s', '%s'],
        ['%d']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update class: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Class updated successfully');
    }
    exit;
}

add_action('wp_ajax_su_p_delete_class', 'su_p_delete_class');
function su_p_delete_class() {
    check_ajax_referer('su_p_class_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'class_sections';
    $class_id = intval($_POST['class_id'] ?? 0);

    if (empty($class_id)) {
        wp_send_json_error(['message' => 'Invalid class ID']);
        exit;
    }

    $result = $wpdb->delete($table_name, ['id' => $class_id], ['%d']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete class: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Class deleted successfully');
    }
    exit;
}

// Modified Standalone Functions
function render_su_p_add_class_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Add New Class</h2>
        <div id="add-class-message" class="message"></div>
        <form id="standalone-add-class-form">
            <table class="form-table">
                <tr>
                    <th scope="row"><label for="add-center-id">Education Center</label></th>
                    <td>
                        <select id="add-center-id" name="education_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                            }
                            ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><label for="add-class-name">Class Name</label></th>
                    <td><input type="text" id="add-class-name" name="class_name" class="regular-text" required></td>
                </tr>
                <tr>
                    <th scope="row"><label for="add-sections">Sections (e.g., A, B, C)</label></th>
                    <td><input type="text" id="add-sections" name="sections" class="regular-text" required></td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_class_nonce'); ?>">
            <p class="submit"><button type="button" id="save-class" class="button-primary">Add Class</button></p>
        </form>
        <h3>Existing Classes</h3>
        <table class="wp-list-table widefat fixed striped" id="add-class-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Class Name</th>
                    <th>Sections</th>
                    <th>Education Center ID</th>
                </tr>
            </thead>
            <tbody id="add-class-table-body"></tbody>
        </table>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_class_nonce'); ?>';

        function loadClasses() {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: 1,
                    per_page: 1000, // Fetch all for simplicity
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#add-class-table-body').html(response.data.classes.replace(/<td>.*?(Edit|Delete).*?<\/td>/g, '')); // Remove actions
                    } else {
                        $('#add-class-table-body').html('<tr><td colspan="4">No classes found.</td></tr>');
                    }
                }
            });
        }

        loadClasses();

        $('#save-class').on('click', function() {
            const formData = new FormData($('#standalone-add-class-form')[0]);
            formData.append('action', 'su_p_add_class');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    const $message = $('#add-class-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-class-form')[0].reset();
                        loadClasses();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

function render_su_p_edit_class_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Edit Class Sections</h2>
        <div id="edit-class-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-class-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Class Name</th>
                    <th>Sections</th>
                    <th>Education Center ID</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-class-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Class Section</h3>
            <form id="standalone-edit-class-form">
                <input type="hidden" id="edit-class-id" name="class_id">
                <table class="form-table">
                    <tr>
                        <th scope="row"><label for="edit-center-id">Education Center</label></th>
                        <td>
                            <select id="edit-center-id" name="education_center_id" class="regular-text" required>
                                <option value="">Select Center</option>
                                <?php
                                foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                    echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                                }
                                ?>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="edit-class-name">Class Name</label></th>
                        <td><input type="text" id="edit-class-name" name="class_name" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="edit-sections">Sections (e.g., A, B, C)</label></th>
                        <td><input type="text" id="edit-sections" name="sections" class="regular-text" required></td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_class_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-class" class="button-primary">Update Class</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_class_nonce'); ?>';

        function loadClasses() {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-class-table-body').html(response.data.classes);
                    } else {
                        $('#edit-class-table-body').html('<tr><td colspan="5">No classes found.</td></tr>');
                    }
                }
            });
        }

        loadClasses();

        $('#edit-class-table-body').on('click', '.edit-class', function() {
            const classId = $(this).data('class-id');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_class',
                    class_id: classId,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-class-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.education_center_id);
                        $('#edit-class-name').val(response.data.class_name);
                        $('#edit-sections').val(response.data.sections);
                        $('#edit-form-container').show();
                    } else {
                        alert('Error fetching class: ' + response.data.message);
                    }
                }
            });
        });

        $('#update-class').on('click', function() {
            const formData = new FormData($('#standalone-edit-class-form')[0]);
            formData.append('action', 'su_p_edit_class');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    const $message = $('#edit-class-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadClasses();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

function render_su_p_delete_class_form() {
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Delete Class Sections</h2>
        <div id="delete-class-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-class-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Class Name</th>
                    <th>Sections</th>
                    <th>Education Center ID</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-class-table-body"></tbody>
        </table>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_class_nonce'); ?>';

        function loadClasses() {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#delete-class-table-body').html(response.data.classes);
                    } else {
                        $('#delete-class-table-body').html('<tr><td colspan="5">No classes found.</td></tr>');
                    }
                }
            });
        }

        loadClasses();

        $('#delete-class-table-body').on('click', '.delete-class', function() {
            if (confirm('Are you sure you want to delete this class?')) {
                const classId = $(this).data('class-id');
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_delete_class',
                        class_id: classId,
                        nonce: ajaxNonce
                    },
                    success: function(response) {
                        const $message = $('#delete-class-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadClasses();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    }
                });
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

function render_su_p_student_count() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'class_sections';
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Student Count per Class and Section</h2>
        <div class="form-group search-form">
            <div class="input-group">
                <span class="input-group-addon">Search</span>
                <input type="text" id="search_text_class_count" placeholder="Search by Class or Section" class="form-control" />
            </div>
        </div>
        <p>Total Students: <span id="total-students">0</span></p>
        <table id="class_count" class="wp-list-table widefat fixed striped">
            <thead>
                <tr>
                    <th>Class Name</th>
                    <th>Section</th>
                    <th>Student Count</th>
                </tr>
            </thead>
            <tbody id="class-count-body"></tbody>
        </table>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_class_nonce'); ?>';

        function loadStudentCounts() {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        let html = '';
                        let totalStudents = 0;
                        response.data.class_data.forEach(classItem => {
                            const sections = classItem.sections.split(',');
                            sections.forEach(section => {
                                section = section.trim();
                                $.ajax({
                                    url: ajaxUrl,
                                    method: 'POST',
                                    data: {
                                        action: 'su_p_get_student_count',
                                        class_name: classItem.class_name,
                                        section: section,
                                        education_center_id: classItem.education_center_id,
                                        nonce: ajaxNonce
                                    },
                                    async: false, // Synchronous for simplicity
                                    success: function(countResponse) {
                                        if (countResponse.success) {
                                            html += `<tr>
                                                <td>${classItem.class_name}</td>
                                                <td>${section}</td>
                                                <td>${countResponse.data}</td>
                                            </tr>`;
                                            totalStudents += parseInt(countResponse.data);
                                        }
                                    }
                                });
                            });
                        });
                        $('#class-count-body').html(html);
                        $('#total-students').text(totalStudents);
                    } else {
                        $('#class-count-body').html('<tr><td colspan="3">No classes found.</td></tr>');
                    }
                }
            });
        }

        loadStudentCounts();

        $('#search_text_class_count').keyup(function() {
            var searchText = $(this).val().toLowerCase();
            $('#class_count tbody tr').each(function() {
                var className = $(this).find('td').eq(0).text().toLowerCase();
                var section = $(this).find('td').eq(1).text().toLowerCase();
                if (className.indexOf(searchText) > -1 || section.indexOf(searchText) > -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
add_action('wp_ajax_su_p_get_student_count', 'su_p_get_student_count');
function su_p_get_student_count() {
    check_ajax_referer('su_p_class_nonce', 'nonce');
    $class_name = sanitize_text_field($_POST['class_name'] ?? '');
    $section = sanitize_text_field($_POST['section'] ?? '');
    $educational_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');

    $args = [
        'post_type' => 'students',
        'posts_per_page' => -1,
        'meta_query' => [
            'relation' => 'AND',
            ['key' => 'class', 'value' => $class_name, 'compare' => '='],
            ['key' => 'section', 'value' => $section, 'compare' => '='],
            ['key' => 'educational_center_id', 'value' => $educational_center_id, 'compare' => '=']
        ]
    ];
    $students_query = new WP_Query($args);
    wp_send_json_success($students_query->found_posts);
}
function get_student_count($class_name, $section, $educational_center_id) {
    $args = [
        'post_type' => 'students',
        'posts_per_page' => -1,
        'meta_query' => [
            'relation' => 'AND',
            ['key' => 'class', 'value' => $class_name, 'compare' => '='],
            ['key' => 'section', 'value' => $section, 'compare' => '='],
            ['key' => 'educational_center_id', 'value' => $educational_center_id, 'compare' => '=']
        ]
    ];
    $students_query = new WP_Query($args);
    return $students_query->found_posts;
}

function get_total_students($educational_center_id) {
    $args = [
        'post_type' => 'students',
        'posts_per_page' => -1,
        'meta_query' => [
            ['key' => 'educational_center_id', 'value' => $educational_center_id, 'compare' => '=']
        ]
    ];
    $students_query = new WP_Query($args);
    return $students_query->found_posts;
}

// Enqueue Scripts
add_action('admin_enqueue_scripts', 'enqueue_class_management_scripts');
function enqueue_class_management_scripts() {
    wp_enqueue_script('jquery');
    wp_enqueue_style('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css');
    wp_enqueue_script('jspdf', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js', [], null, true);
    wp_enqueue_script('jspdf-autotable', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js', ['jspdf'], null, true);
    wp_enqueue_script('sheetjs', 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js', [], null, true);
}

//exam
function render_su_p_exam_management() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Exam Management</h2>
                <div class="search-filters">
                    <input type="text" id="exam-name-search" placeholder="Search by Exam Name...">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-exam-btn">Add Exam</button>
                    <label for="exams-per-page">Show:</label>
                    <select id="exams-per-page">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button id="prev-page" disabled>Previous</button>
                    <span id="page-info"></span>
                    <button id="next-page">Next</button>
                    <button id="refresh-data">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools"></div>
                    <table id="exam-table">
                        <thead id="exam-table-head"></thead>
                        <tbody id="exam-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Exam Modal -->
    <div class="edu-modal" id="add-exam-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-exam-modal">×</span>
            <h3>Add New Exam</h3>
            <form id="add-exam-form">
                <div class="search-filters">
                    <label for="add-center-id">Education Center</label>
                    <select id="add-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-exam-name">Exam Name</label>
                    <input type="text" id="add-exam-name" name="exam_name" required>
                </div>
                <div class="search-filters">
                    <label for="add-exam-date">Exam Date</label>
                    <input type="date" id="add-exam-date" name="exam_date" required>
                </div>
                <div class="search-filters">
                    <label for="add-class-id">Class</label>
                    <select id="add-class-id" name="class_id" required>
                        <option value="">Select Class</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_exam_nonce'); ?>">
                <button type="button" id="save-exam">Add Exam</button>
            </form>
            <div id="add-exam-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Exam Modal -->
    <div class="edu-modal" id="edit-exam-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-exam-modal">×</span>
            <h3>Edit Exam</h3>
            <form id="edit-exam-form">
                <input type="hidden" id="edit-exam-id" name="exam_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center</label>
                    <select id="edit-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-exam-name">Exam Name</label>
                    <input type="text" id="edit-exam-name" name="exam_name" required>
                </div>
                <div class="search-filters">
                    <label for="edit-exam-date">Exam Date</label>
                    <input type="date" id="edit-exam-date" name="exam_date" required>
                </div>
                <div class="search-filters">
                    <label for="edit-class-id">Class</label>
                    <select id="edit-class-id" name="class_id" required>
                        <option value="">Select Class</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_exam_nonce'); ?>">
                <button type="button" id="update-exam">Update Exam</button>
            </form>
            <div id="edit-exam-message" class="message"></div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_exam_nonce'); ?>';

        let currentPage = 1;
        let perPage = 10;
        let examNameSearch = '';
        let centerFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { 
            showLoader(); 
            $(modalId).css('display', 'flex'); 
            setTimeout(hideLoader, 100); 
            clearMessages(modalId);
        }
        function closeModal(modalId) { 
            $(modalId).css('display', 'none'); 
            clearMessages(modalId); 
            hideLoader(); 
        }
        function clearMessages(modalId) {
            $(modalId + ' .message').css({'background': '', 'color': ''}).text('');
        }

        function loadExams(page, limit, examName, center, showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_exams',
                    page: page,
                    per_page: limit,
                    search_exam_name: examName,
                    center_filter: center,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#exam-table-head').html(response.data.table_head);
                        $('#exam-table-body').html(response.data.exams);
                        const totalPages = Math.ceil(response.data.total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages} (Total Records: ${response.data.total})`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                        setupExportButtons(response.data.exam_data);
                    } else {
                        $('#exam-table-body').html('<tr><td colspan="5">No exams found.</td></tr>');
                        $('#export-tools').html('');
                    }
                }
            });
        }

        function setupExportButtons(examData) {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
            `);
            tools.find('.export-csv').on('click', () => exportToCSV(examData));
            tools.find('.export-pdf').on('click', () => generatePDF(examData));
            tools.find('.export-excel').on('click', () => exportToExcel(examData));
        }

        function exportToCSV(data) {
            const headers = ['Exam ID', 'Exam Name', 'Exam Date', 'Class ID', 'Education Center ID'];
            const csvRows = [headers.join(',')];
            data.forEach(row => {
                const values = [row.id, row.name, row.exam_date, row.class_id || 'N/A', row.education_center_id].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const csvContent = csvRows.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'exams.csv';
            link.click();
        }

        function generatePDF(data) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Exams Report', 10, 10);
            doc.setFontSize(12);
            const tableData = data.map(row => [row.id, row.name, row.exam_date, row.class_id || 'N/A', row.education_center_id]);
            doc.autoTable({
                head: [['Exam ID', 'Exam Name', 'Exam Date', 'Class ID', 'Education Center ID']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('exams.pdf');
        }

        function exportToExcel(data) {
            const worksheetData = data.map(row => ({
                'Exam ID': row.id,
                'Exam Name': row.name,
                'Exam Date': row.exam_date,
                'Class ID': row.class_id || 'N/A',
                'Education Center ID': row.education_center_id
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Exams');
            XLSX.writeFile(workbook, 'exams.xlsx');
        }

        function loadClasses(selectId, centerId) {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: 1,
                    per_page: 1000,
                    center_filter: centerId,
                    nonce: '<?php echo wp_create_nonce('su_p_class_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        const $select = $(selectId);
                        $select.find('option:not(:first)').remove();
                        response.data.class_data.forEach(cls => {
                            $select.append(`<option value="${cls.class_name}">${cls.class_name}</option>`);
                        });
                    }
                }
            });
        }

        loadExams(currentPage, perPage, examNameSearch, centerFilter);

        $('#exam-name-search').on('input', debounce(function() {
            examNameSearch = $(this).val();
            currentPage = 1;
            loadExams(currentPage, perPage, examNameSearch, centerFilter);
        }, 500));

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadExams(currentPage, perPage, examNameSearch, centerFilter);
        });

        $('#exams-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadExams(currentPage, perPage, examNameSearch, centerFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadExams(currentPage, perPage, examNameSearch, centerFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadExams(currentPage, perPage, examNameSearch, centerFilter);
        });

        $('#refresh-data').on('click', function() {
            loadExams(currentPage, perPage, examNameSearch, centerFilter);
        });

        $('#add-exam-btn').on('click', function() {
            $('#add-center-id').val('');
            $('#add-class-id').html('<option value="">Select Class</option>');
            openModal('#add-exam-modal');
        });

        $('#add-center-id').on('change', function() {
            loadClasses('#add-class-id', $(this).val());
        });

        $('#save-exam').on('click', function() {
            const formData = new FormData($('#add-exam-form')[0]);
            formData.append('action', 'su_p_add_exam');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-exam-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#add-exam-modal');
                            loadExams(currentPage, perPage, examNameSearch, centerFilter, false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    }
                }
            });
        });

        $('#exam-table-body').on('click', '.edit-exam', function() {
            const examId = $(this).data('exam-id');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_exam',
                    exam_id: examId,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-exam-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.education_center_id);
                        $('#edit-exam-name').val(response.data.name);
                        $('#edit-exam-date').val(response.data.exam_date);
                        loadClasses('#edit-class-id', response.data.education_center_id);
                        setTimeout(() => $('#edit-class-id').val(response.data.class_id), 500); // Wait for classes to load
                        openModal('#edit-exam-modal');
                    } else {
                        alert('Error fetching exam: ' + response.data.message);
                    }
                }
            });
        });

        $('#edit-center-id').on('change', function() {
            loadClasses('#edit-class-id', $(this).val());
        });

        $('#update-exam').on('click', function() {
            const formData = new FormData($('#edit-exam-form')[0]);
            formData.append('action', 'su_p_edit_exam');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-exam-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#edit-exam-modal');
                            loadExams(currentPage, perPage, examNameSearch, centerFilter, false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    }
                }
            });
        });

        $('#exam-table-body').on('click', '.delete-exam', function() {
            if (confirm('Are you sure you want to delete this exam?')) {
                const examId = $(this).data('exam-id');
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_delete_exam',
                        exam_id: examId,
                        nonce: ajaxNonce
                    },
                    success: function(response) {
                        if (response.success) {
                            loadExams(currentPage, perPage, examNameSearch, centerFilter, false);
                        } else {
                            alert('Error deleting exam: ' + (response.data?.message || 'Unknown error'));
                        }
                    }
                });
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }
    });
    </script>
    <?php
    return ob_get_clean();
}
function render_su_p_add_exam() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Add New Exam</h2>
        <div id="add-exam-message" class="message"></div>
        <form id="standalone-add-exam-form">
            <table class="form-table">
                <tr>
                    <th scope="row"><label for="add-center-id">Education Center</label></th>
                    <td>
                        <select id="add-center-id" name="education_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                            }
                            ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><label for="add-exam-name">Exam Name</label></th>
                    <td><input type="text" id="add-exam-name" name="exam_name" class="regular-text" required></td>
                </tr>
                <tr>
                    <th scope="row"><label for="add-exam-date">Exam Date</label></th>
                    <td><input type="date" id="add-exam-date" name="exam_date" class="regular-text" required></td>
                </tr>
                <tr>
                    <th scope="row"><label for="add-class-id">Class</label></th>
                    <td>
                        <select id="add-class-id" name="class_id" class="regular-text" required>
                            <option value="">Select Class</option>
                        </select>
                    </td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_exam_nonce'); ?>">
            <p class="submit"><button type="button" id="save-exam" class="button-primary">Add Exam</button></p>
        </form>
        <h3>Existing Exams</h3>
        <table class="wp-list-table widefat fixed striped" id="add-exam-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Exam Name</th>
                    <th>Exam Date</th>
                    <th>Class ID</th>
                    <th>Education Center ID</th>
                </tr>
            </thead>
            <tbody id="add-exam-table-body"></tbody>
        </table>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_exam_nonce'); ?>';

        function loadExams() {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_exams',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#add-exam-table-body').html(response.data.exams.replace(/<td>.*?(Edit|Delete).*?<\/td>/g, ''));
                    } else {
                        $('#add-exam-table-body').html('<tr><td colspan="5">No exams found.</td></tr>');
                    }
                }
            });
        }

        function loadClasses(centerId) {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: 1,
                    per_page: 1000,
                    center_filter: centerId,
                    nonce: '<?php echo wp_create_nonce('su_p_class_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        const $select = $('#add-class-id');
                        $select.find('option:not(:first)').remove();
                        response.data.class_data.forEach(cls => {
                            $select.append(`<option value="${cls.class_name}">${cls.class_name}</option>`);
                        });
                    }
                }
            });
        }

        loadExams();
        $('#add-center-id').on('change', function() {
            loadClasses($(this).val());
        });

        $('#save-exam').on('click', function() {
            const formData = new FormData($('#standalone-add-exam-form')[0]);
            formData.append('action', 'su_p_add_exam');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    const $message = $('#add-exam-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-exam-form')[0].reset();
                        loadExams();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
function render_su_p_edit_exam() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Edit Exams</h2>
        <div id="edit-exam-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-exam-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Exam Name</th>
                    <th>Exam Date</th>
                    <th>Class ID</th>
                    <th>Education Center ID</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-exam-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Exam</h3>
            <form id="standalone-edit-exam-form">
                <input type="hidden" id="edit-exam-id" name="exam_id">
                <table class="form-table">
                    <tr>
                        <th scope="row"><label for="edit-center-id">Education Center</label></th>
                        <td>
                            <select id="edit-center-id" name="education_center_id" class="regular-text" required>
                                <option value="">Select Center</option>
                                <?php
                                foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                    echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                                }
                                ?>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="edit-exam-name">Exam Name</label></th>
                        <td><input type="text" id="edit-exam-name" name="exam_name" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="edit-exam-date">Exam Date</label></th>
                        <td><input type="date" id="edit-exam-date" name="exam_date" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="edit-class-id">Class</label></th>
                        <td>
                            <select id="edit-class-id" name="class_id" class="regular-text" required>
                                <option value="">Select Class</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_exam_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-exam" class="button-primary">Update Exam</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_exam_nonce'); ?>';

        function loadExams() {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_exams',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-exam-table-body').html(response.data.exams);
                    } else {
                        $('#edit-exam-table-body').html('<tr><td colspan="6">No exams found.</td></tr>');
                    }
                }
            });
        }

        function loadClasses(centerId) {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_classes',
                    page: 1,
                    per_page: 1000,
                    center_filter: centerId,
                    nonce: '<?php echo wp_create_nonce('su_p_class_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        const $select = $('#edit-class-id');
                        $select.find('option:not(:first)').remove();
                        response.data.class_data.forEach(cls => {
                            $select.append(`<option value="${cls.class_name}">${cls.class_name}</option>`);
                        });
                    }
                }
            });
        }

        loadExams();

        $('#edit-exam-table-body').on('click', '.edit-exam', function() {
            const examId = $(this).data('exam-id');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_exam',
                    exam_id: examId,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-exam-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.education_center_id);
                        $('#edit-exam-name').val(response.data.name);
                        $('#edit-exam-date').val(response.data.exam_date);
                        loadClasses(response.data.education_center_id);
                        setTimeout(() => $('#edit-class-id').val(response.data.class_id), 500);
                        $('#edit-form-container').show();
                    } else {
                        alert('Error fetching exam: ' + response.data.message);
                    }
                }
            });
        });

        $('#edit-center-id').on('change', function() {
            loadClasses($(this).val());
        });

        $('#update-exam').on('click', function() {
            const formData = new FormData($('#standalone-edit-exam-form')[0]);
            formData.append('action', 'su_p_edit_exam');
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    const $message = $('#edit-exam-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadExams();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
function render_su_p_delete_exam() {
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Delete Exams</h2>
        <div id="delete-exam-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-exam-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Exam Name</th>
                    <th>Exam Date</th>
                    <th>Class ID</th>
                    <th>Education Center ID</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-exam-table-body"></tbody>
        </table>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_exam_nonce'); ?>';

        function loadExams() {
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_exams',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (response.success) {
                        $('#delete-exam-table-body').html(response.data.exams);
                    } else {
                        $('#delete-exam-table-body').html('<tr><td colspan="6">No exams found.</td></tr>');
                    }
                }
            });
        }

        loadExams();

        $('#delete-exam-table-body').on('click', '.delete-exam', function() {
            if (confirm('Are you sure you want to delete this exam?')) {
                const examId = $(this).data('exam-id');
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_delete_exam',
                        exam_id: examId,
                        nonce: ajaxNonce
                    },
                    success: function(response) {
                        const $message = $('#delete-exam-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadExams();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    }
                });
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
add_action('wp_ajax_su_p_fetch_exams', 'su_p_fetch_exams');
function su_p_fetch_exams() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'exams';

    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $exam_name = sanitize_text_field($_POST['search_exam_name'] ?? '');
    $center = sanitize_text_field($_POST['center_filter'] ?? '');

    $query = "SELECT * FROM $table_name WHERE 1=1";
    $args = [];

    if ($exam_name) {
        $query .= " AND name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($exam_name) . '%';
    }
    if ($center) {
        $query .= " AND education_center_id = %s";
        $args[] = $center;
    }

    $total = $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM $table_name WHERE 1=1" . strstr($query, ' AND'), $args));
    $offset = ($page - 1) * $per_page;
    $query .= " ORDER BY id DESC LIMIT %d OFFSET %d";
    $args[] = $per_page;
    $args[] = $offset;

    $results = $wpdb->get_results($wpdb->prepare($query, $args));
    $table_head = '<tr><th>ID</th><th>Exam Name</th><th>Exam Date</th><th>Class ID</th><th>Education Center ID</th><th>Actions</th></tr>';
    $exams = '';
    $exam_data = [];
    if ($results) {
        foreach ($results as $row) {
            $exams .= "<tr>
                <td>" . esc_html($row->id) . "</td>
                <td>" . esc_html($row->name) . "</td>
                <td>" . esc_html($row->exam_date) . "</td>
                <td>" . esc_html($row->class_id ?: 'N/A') . "</td>
                <td>" . esc_html($row->education_center_id) . "</td>
                <td>
                    <button class='edit-exam' data-exam-id='" . esc_attr($row->id) . "'>Edit</button>
                    <button class='delete-exam' data-exam-id='" . esc_attr($row->id) . "'>Delete</button>
                </td>
            </tr>";
            $exam_data[] = [
                'id' => $row->id,
                'name' => $row->name,
                'exam_date' => $row->exam_date,
                'class_id' => $row->class_id,
                'education_center_id' => $row->education_center_id
            ];
        }
    } else {
        $exams = '<tr><td colspan="6">No exams found.</td></tr>';
    }

    wp_send_json_success([
        'table_head' => $table_head,
        'exams' => $exams,
        'exam_data' => $exam_data,
        'total' => $total ?: 0
    ]);
}

add_action('wp_ajax_su_p_fetch_exam', 'su_p_fetch_exam');
function su_p_fetch_exam() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'exams';
    $exam_id = intval($_POST['exam_id'] ?? 0);

    $exam = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table_name WHERE id = %d", $exam_id));
    if ($exam) {
        wp_send_json_success([
            'id' => $exam->id,
            'name' => $exam->name,
            'exam_date' => $exam->exam_date,
            'class_id' => $exam->class_id,
            'education_center_id' => $exam->education_center_id
        ]);
    } else {
        wp_send_json_error(['message' => 'Exam not found']);
    }
}

add_action('wp_ajax_su_p_add_exam', 'su_p_add_exam');
function su_p_add_exam() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'exams';

    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $exam_name = sanitize_text_field($_POST['exam_name'] ?? '');
    $exam_date = sanitize_text_field($_POST['exam_date'] ?? '');
    $class_id = sanitize_text_field($_POST['class_id'] ?? '');

    if (empty($center_id) || empty($exam_name) || empty($exam_date) || empty($class_id)) {
        wp_send_json_error(['message' => 'All fields are required']);
    }

    $result = $wpdb->insert(
        $table_name,
        [
            'education_center_id' => $center_id,
            'name' => $exam_name,
            'exam_date' => $exam_date,
            'class_id' => $class_id
        ],
        ['%s', '%s', '%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add exam: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Exam added successfully');
    }
}

add_action('wp_ajax_su_p_edit_exam', 'su_p_edit_exam');
function su_p_edit_exam() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'exams';

    $exam_id = intval($_POST['exam_id'] ?? 0);
    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $exam_name = sanitize_text_field($_POST['exam_name'] ?? '');
    $exam_date = sanitize_text_field($_POST['exam_date'] ?? '');
    $class_id = sanitize_text_field($_POST['class_id'] ?? '');

    if (empty($exam_id) || empty($center_id) || empty($exam_name) || empty($exam_date) || empty($class_id)) {
        wp_send_json_error(['message' => 'All fields are required']);
    }

    $result = $wpdb->update(
        $table_name,
        [
            'education_center_id' => $center_id,
            'name' => $exam_name,
            'exam_date' => $exam_date,
            'class_id' => $class_id
        ],
        ['id' => $exam_id],
        ['%s', '%s', '%s', '%s'],
        ['%d']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update exam: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Exam updated successfully');
    }
}

add_action('wp_ajax_su_p_delete_exam', 'su_p_delete_exam');
function su_p_delete_exam() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'exams';
    $exam_id = intval($_POST['exam_id'] ?? 0);

    if (empty($exam_id)) {
        wp_send_json_error(['message' => 'Invalid exam ID']);
    }

    $result = $wpdb->delete($table_name, ['id' => $exam_id], ['%d']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete exam: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Exam deleted successfully');
    }
}

//results
function render_su_p_exam_results() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Manage Exam Results</h2>
        <div id="results-message" class="message"></div>
        <div class="form-group search-form" style="margin-bottom: 20px;">
            <div class="input-group">
                <label for="exam-id" class="input-group-addon">Select Exam</label>
                <select id="exam-id" name="exam_id" class="form-control">
                    <option value="">-- Select Exam --</option>
                    <?php
                    $exams = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}exams");
                    foreach ($exams as $exam) {
                        echo "<option value='" . esc_attr($exam->id) . "'>" . esc_html($exam->name) . " (" . esc_html($exam->exam_date) . ")</option>";
                    }
                    ?>
                </select>
            </div>
        </div>
        <div id="results-content">
            <div class="alert alert-info">Please select an exam to view and manage results.</div>
        </div>
    </div>
    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('su_p_exam_nonce'); ?>';

        function loadResults(examId) {
            if (!examId) {
                $('#results-content').html('<div class="alert alert-info">Please select an exam to view and manage results.</div>');
                return;
            }
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'su_p_fetch_exam_results',
                    exam_id: examId,
                    nonce: ajaxNonce
                },
                beforeSend: function() {
                    $('#results-content').html('<div class="loading">Loading...</div>');
                },
                success: function(response) {
                    if (response.success) {
                        $('#results-content').html(response.data.html);
                        setupExportButtons(response.data.results_data);
                    } else {
                        $('#results-content').html('<div class="alert alert-danger">Error: ' + (response.data?.message || 'No results found') + '</div>');
                    }
                }
            });
        }

        function setupExportButtons(resultsData) {
            const $exportTools = $('<div class="actions" id="export-tools" style="margin-bottom: 10px;"></div>');
            $exportTools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i> CSV</button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i> Generate All Results PDF</button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i> Excel</button>
            `);
            $('#results-content').prepend($exportTools);

            $exportTools.find('.export-csv').on('click', () => exportToCSV(resultsData));
            $exportTools.find('.export-pdf').on('click', () => generateFullPDF(resultsData));
            $exportTools.find('.export-excel').on('click', () => exportToExcel(resultsData));
        }

        function exportToCSV(data) {
            const headers = ['Student ID', 'Student Name', ...data.subjects.map(s => `${s.subject_name} (${s.max_marks})`)];
            const csvRows = [headers.join(',')];
            data.students.forEach(student => {
                const values = [student.student_id, student.name, ...data.subjects.map(s => student.marks[s.id] || '')].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const blob = new Blob([csvRows.join('\n')], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `exam_results_${$('#exam-id').val()}.csv`;
            link.click();
        }

        function generateFullPDF(data) {
            const form = $('<form>', {
                method: 'POST',
                action: ajaxUrl,
                css: { display: 'none' }
            }).append(
                $('<input>', { type: 'hidden', name: 'action', value: 'su_p_generate_all_marksheets' }),
                $('<input>', { type: 'hidden', name: 'exam_id', value: $('#exam-id').val() }),
                $('<input>', { type: 'hidden', name: 'nonce', value: ajaxNonce })
            );
            $('body').append(form);
            form.submit();
            form.remove();
        }

        function exportToExcel(data) {
            const worksheetData = data.students.map(student => {
                const row = { 'Student ID': student.student_id, 'Student Name': student.name };
                data.subjects.forEach(s => {
                    row[`${s.subject_name} (${s.max_marks})`] = student.marks[s.id] || '';
                });
                return row;
            });
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Results');
            XLSX.writeFile(workbook, `exam_results_${$('#exam-id').val()}.xlsx`);
        }

        $('#exam-id').on('change', function() {
            loadResults($(this).val());
        });

        $('#results-content').on('click', '#submit-grades', function() {
            const formData = new FormData($('#results-form')[0]);
            formData.append('action', 'su_p_submit_exam_results');
            formData.append('nonce', ajaxNonce);
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    const $message = $('#results-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        loadResults($('#exam-id').val());
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                }
            });
        });

        $('#results-content').on('click', '.generate-pdf', function() {
            const examId = $('#exam-id').val();
            const studentId = $(this).data('student-id');
            const form = $('<form>', {
                method: 'POST',
                action: ajaxUrl,
                css: { display: 'none' }
            }).append(
                $('<input>', { type: 'hidden', name: 'action', value: 'su_p_generate_student_marksheet' }),
                $('<input>', { type: 'hidden', name: 'exam_id', value: examId }),
                $('<input>', { type: 'hidden', name: 'student_id', value: studentId }),
                $('<input>', { type: 'hidden', name: 'nonce', value: ajaxNonce })
            );
            $('body').append(form);
            form.submit();
            form.remove();
        });
    });
    </script>

    <?php
    return ob_get_clean();
}
add_action('wp_ajax_su_p_fetch_exam_results', 'su_p_fetch_exam_results');
function su_p_fetch_exam_results() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;

    $exam_id = intval($_POST['exam_id'] ?? 0);
    $exam = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}exams WHERE id = %d", $exam_id));
    if (!$exam) {
        wp_send_json_error(['message' => 'Exam not found']);
    }

    $subjects = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exam_subjects WHERE exam_id = %d",
        $exam_id
    ));
    if (empty($subjects)) {
        wp_send_json_error(['message' => 'No subjects defined for this exam']);
    }

    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.student_id, er.subject_id, er.marks, p.post_title 
         FROM {$wpdb->prefix}exam_results er 
         LEFT JOIN {$wpdb->prefix}postmeta pm 
             ON pm.meta_key = 'student_id' 
             AND pm.meta_value = er.student_id 
         LEFT JOIN {$wpdb->prefix}posts p 
             ON p.ID = pm.post_id 
             AND p.post_type = 'student' 
             AND p.post_status = 'publish' 
         WHERE er.exam_id = %d",
        $exam_id
    ), ARRAY_A);

    $student_marks = [];
    foreach ($results as $result) {
        $student_id = $result['student_id'];
        $student_name = $result['post_title'] ?: 'Unknown (' . esc_html($student_id) . ')';
        $student_marks[$student_id]['name'] = $student_name;
        $student_marks[$student_id]['marks'][$result['subject_id']] = $result['marks'];
    }

    if (empty($student_marks)) {
        $students = $exam->class_id ? $wpdb->get_results($wpdb->prepare(
            "SELECT p.ID, p.post_title 
             FROM {$wpdb->prefix}posts p 
             JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
             WHERE p.post_type = 'student' 
             AND p.post_status = 'publish' 
             AND pm.meta_key = 'class_name' 
             AND pm.meta_value = %s",
            $exam->class_id
        )) : [];
        foreach ($students as $student) {
            $student_id = "STU-" . md5($student->ID);
            $student_marks[$student_id]['name'] = $student->post_title;
            $student_marks[$student_id]['marks'] = [];
        }
    }

    ob_start();
    ?>
    <h3>Grades for <?php echo esc_html($exam->name); ?></h3>
    <form id="results-form">
        <div class="table-responsive">
            <table class="wp-list-table widefat fixed striped">
                <thead>
                    <tr>
                        <th>Student</th>
                        <?php foreach ($subjects as $subject): ?>
                            <th><?php echo esc_html($subject->subject_name); ?> (<?php echo $subject->max_marks; ?>)</th>
                        <?php endforeach; ?>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <?php
                    if (empty($student_marks)) {
                        echo '<tr><td colspan="' . (count($subjects) + 2) . '">No students found for this exam.</td></tr>';
                    } else {
                        foreach ($student_marks as $student_id => $data) {
                            echo '<tr>';
                            echo '<td>' . esc_html($data['name']) . ' (' . esc_html($student_id) . ')</td>';
                            foreach ($subjects as $subject) {
                                $marks = $data['marks'][$subject->id] ?? '';
                                echo '<td><input type="number" name="marks[' . esc_attr($student_id) . '][' . $subject->id . ']" class="regular-text" value="' . esc_attr($marks) . '" step="0.01" min="0" max="' . $subject->max_marks . '"></td>';
                            }
                            echo '<td><button type="button" class="button generate-pdf" data-student-id="' . esc_attr($student_id) . '">Download Mark Sheet</button></td>';
                            echo '</tr>';
                        }
                    }
                    ?>
                </tbody>
            </table>
        </div>
        <input type="hidden" name="exam_id" value="<?php echo $exam_id; ?>">
        <p class="submit"><button type="button" id="submit-grades" class="button-primary">Submit Grades</button></p>
    </form>
    <?php
    $html = ob_get_clean();

    wp_send_json_success([
        'html' => $html,
        'results_data' => [
            'exam_name' => $exam->name,
            'subjects' => array_map(function($s) { return ['id' => $s->id, 'subject_name' => $s->subject_name, 'max_marks' => $s->max_marks]; }, $subjects),
            'students' => array_map(function($id, $data) { return ['student_id' => $id, 'name' => $data['name'], 'marks' => $data['marks']]; }, array_keys($student_marks), $student_marks)
        ]
    ]);
}

add_action('wp_ajax_su_p_submit_exam_results', 'su_p_submit_exam_results');
function su_p_submit_exam_results() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;

    $exam_id = intval($_POST['exam_id'] ?? 0);
    $exam = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}exams WHERE id = %d", $exam_id));
    if (!$exam) {
        wp_send_json_error(['message' => 'Exam not found']);
    }

    $success = false;
    if (isset($_POST['marks'])) {
        foreach ($_POST['marks'] as $student_id => $subjects) {
            $student_id = sanitize_text_field($student_id);
            foreach ($subjects as $subject_id => $marks) {
                $subject_id = intval($subject_id);
                $marks = floatval($marks);
                $existing = $wpdb->get_var($wpdb->prepare(
                    "SELECT id FROM {$wpdb->prefix}exam_results WHERE exam_id = %d AND subject_id = %d AND student_id = %s",
                    $exam_id, $subject_id, $student_id
                ));
                if ($existing) {
                    $updated = $wpdb->update(
                        $wpdb->prefix . 'exam_results',
                        ['marks' => $marks],
                        ['id' => $existing],
                        ['%f'],
                        ['%d']
                    );
                    if ($updated !== false) $success = true;
                } else {
                    $inserted = $wpdb->insert($wpdb->prefix . 'exam_results', [
                        'exam_id' => $exam_id,
                        'subject_id' => $subject_id,
                        'student_id' => $student_id,
                        'marks' => $marks,
                        'education_center_id' => $exam->education_center_id,
                    ]);
                    if ($inserted) $success = true;
                }
            }
        }
    }

    if ($success) {
        wp_send_json_success('Grades submitted successfully');
    } else {
        wp_send_json_error(['message' => 'Failed to submit grades']);
    }
}

add_action('wp_ajax_su_p_generate_student_marksheet', 'su_p_generate_student_marksheet');
function su_p_generate_student_marksheet() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;

    $dompdf_path =  dirname(__FILE__) .  '/../assets/exam/dompdf/autoload.inc.php';// Adjust path as needed
    if (!file_exists($dompdf_path)) {
        wp_die('Dompdf autoload file not found at: ' . $dompdf_path);
    }
    require_once $dompdf_path;

    $exam_id = intval($_POST['exam_id'] ?? 0);
    $student_id = sanitize_text_field($_POST['student_id'] ?? '');
    if (!$exam_id || !$student_id) {
        wp_die('Invalid exam or student ID');
    }

    $exam = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}exams WHERE id = %d", $exam_id));
    if (!$exam) {
        wp_die('Exam not found');
    }

    $subjects = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exam_subjects WHERE exam_id = %d",
        $exam_id
    ));
    if (empty($subjects)) {
        wp_die('No subjects found');
    }

    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.student_id, er.subject_id, er.marks, p.post_title 
         FROM {$wpdb->prefix}exam_results er 
         LEFT JOIN {$wpdb->prefix}postmeta pm ON pm.meta_key = 'student_id' AND pm.meta_value = er.student_id 
         LEFT JOIN {$wpdb->prefix}posts p ON p.ID = pm.post_id AND p.post_type = 'student' AND p.post_status = 'publish' 
         WHERE er.exam_id = %d AND er.student_id = %s",
        $exam_id, $student_id
    ), ARRAY_A);

    $student_marks = [];
    foreach ($results as $result) {
        $sid = $result['student_id'];
        $student_marks[$sid]['id'] = $sid;
        $student_marks[$sid]['name'] = $result['post_title'] ?: 'Unknown (' . esc_html($sid) . ')';
        $student_marks[$sid]['marks'][$result['subject_id']] = $result['marks'];
    }

    if (!isset($student_marks[$student_id])) {
        // Fallback student lookup from your sample
        $student = get_posts([
            'post_type' => 'student',
            'meta_query' => [
                ['key' => 'student_id', 'value' => $student_id, 'compare' => '=']
            ],
            'posts_per_page' => 1,
            'post_status' => 'publish'
        ]);

        if (empty($student)) {
            $student = $wpdb->get_row($wpdb->prepare(
                "SELECT p.* 
                 FROM {$wpdb->prefix}posts p 
                 JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
                 WHERE pm.meta_key = 'student_id' 
                 AND pm.meta_value = %s 
                 AND p.post_status = 'publish'",
                $student_id
            ));
        }

        if ($student) {
            $student_marks[$student_id] = [
                'id' => $student_id,
                'name' => $student->post_title ?: 'Unknown (' . esc_html($student_id) . ')',
                'marks' => [] // Populate with empty marks if no results yet
            ];
        } else {
            wp_die('Student not found');
        }
    }

    $center = get_posts([
        'post_type' => 'educational-center',
        'meta_key' => 'educational_center_id',
        'meta_value' => $exam->education_center_id,
        'posts_per_page' => 1
    ]);
    $institute_name = $center ? $center[0]->post_title : 'Unknown Center';
    $logo = get_field('institute_logo', $center[0]->ID ?? 0);
    $logo_url = is_array($logo) && isset($logo['url']) ? esc_url($logo['url']) : ($logo ? wp_get_attachment_url($logo) : '');
    $logo_path = $logo_url ? 'file://' . str_replace('\\', '/', realpath(str_replace(home_url(), ABSPATH, $logo_url))) : '';

    $options = new Dompdf\Options();
    $options->set('isRemoteEnabled', true);
    $options->set('isHtml5ParserEnabled', true);
    $options->set('chroot', ABSPATH);
    $options->set('tempDir', sys_get_temp_dir());
    $options->set('defaultFont', 'Helvetica');

    $dompdf = new Dompdf\Dompdf($options);

    $html = '<!DOCTYPE html><html><head><meta charset="UTF-8"><style>
        @page { margin: 15mm; border: 2px solid #1a2b5f; padding: 10mm; }
        body { font-family: Helvetica, sans-serif; font-size: 12pt; color: #333; line-height: 1.4; }
        .container { width: 100%; padding: 15px; background-color: #fff; }
        .header { text-align: center; padding-bottom: 15px; border-bottom: 2px solid #1a2b5f; margin-bottom: 20px; }
        .header img { width: 80px; height: 80px; border-radius: 50%; margin-bottom: 10px; object-fit: cover; }
        .header h1 { font-size: 24pt; color: #1a2b5f; margin: 0; text-transform: uppercase; }
        .header .subtitle { font-size: 14pt; color: #666; margin: 5px 0; }
        .details-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .details-table td { padding: 8px; border: 1px solid #ddd; }
        .details-table .label { font-weight: bold; color: #1a2b5f; width: 150px; background-color: #f9f9f9; }
        .marks-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .marks-table th, .marks-table td { border: 1px solid #ddd; padding: 10px; text-align: center; }
        .marks-table th { background-color: #1a2b5f; color: white; font-weight: bold; }
        .marks-table tr:nth-child(even) { background-color: #f9f9f9; }
        .marks-table .total-row td { font-weight: bold; background-color: #e6f0fa; }
        .footer { text-align: center; margin-top: 30px; font-size: 10pt; color: #666; }
        .footer .generated-by { font-size: 8pt; margin-top: 10px; color: #999; }
        .signature { margin-top: 20px; }
    </style></head><body><div class="container">';

    $html .= generate_su_p_marksheet_content($exam, $subjects, $student_marks[$student_id], $logo_path, $institute_name);
    $html .= '</div></body></html>';

    try {
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'portrait');
        $dompdf->render();
        $pdf_content = $dompdf->output();

        while (ob_get_level()) {
            ob_end_clean();
        }

        header('Content-Type: application/pdf');
        header('Content-Disposition: attachment; filename="marksheet_' . $exam_id . '_' . $student_id . '.pdf"');
        header('Content-Length: ' . strlen($pdf_content));
        header('Cache-Control: no-cache');

        echo $pdf_content;
        flush();
        exit;
    } catch (Exception $e) {
        error_log('Dompdf Error: ' . $e->getMessage());
        wp_die('Error generating PDF: ' . $e->getMessage());
    }
}

add_action('wp_ajax_su_p_generate_all_marksheets', 'su_p_generate_all_marksheets');
function su_p_generate_all_marksheets() {
    check_ajax_referer('su_p_exam_nonce', 'nonce');
    global $wpdb;

    $dompdf_path = dirname(__FILE__) .  '/../assets/exam/dompdf/autoload.inc.php'; // Adjust path as needed
    if (!file_exists($dompdf_path)) {
        wp_die('Dompdf autoload file not found at: ' . $dompdf_path);
    }
    require_once $dompdf_path;

    $exam_id = intval($_POST['exam_id'] ?? 0);
    if (!$exam_id) {
        wp_die('Invalid exam ID');
    }

    $exam = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}exams WHERE id = %d", $exam_id));
    if (!$exam) {
        wp_die('Exam not found');
    }

    $subjects = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exam_subjects WHERE exam_id = %d",
        $exam_id
    ));
    if (empty($subjects)) {
        wp_die('No subjects found');
    }

    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.student_id, er.subject_id, er.marks, p.post_title 
         FROM {$wpdb->prefix}exam_results er 
         LEFT JOIN {$wpdb->prefix}postmeta pm ON pm.meta_key = 'student_id' AND pm.meta_value = er.student_id 
         LEFT JOIN {$wpdb->prefix}posts p ON p.ID = pm.post_id AND p.post_type = 'student' AND p.post_status = 'publish' 
         WHERE er.exam_id = %d",
        $exam_id
    ), ARRAY_A);

    $student_marks = [];
    foreach ($results as $result) {
        $sid = $result['student_id'];
        $student_marks[$sid]['id'] = $sid;
        $student_marks[$sid]['name'] = $result['post_title'] ?: 'Unknown (' . esc_html($sid) . ')';
        $student_marks[$sid]['marks'][$result['subject_id']] = $result['marks'];
    }

    if (empty($student_marks)) {
        wp_die('No results found');
    }

    $center = get_posts([
        'post_type' => 'educational-center',
        'meta_key' => 'educational_center_id',
        'meta_value' => $exam->education_center_id,
        'posts_per_page' => 1
    ]);
    $institute_name = $center ? $center[0]->post_title : 'Unknown Center';
    $logo = get_field('institute_logo', $center[0]->ID ?? 0);
    $logo_url = is_array($logo) && isset($logo['url']) ? esc_url($logo['url']) : ($logo ? wp_get_attachment_url($logo) : '');
    $logo_path = $logo_url ? 'file://' . str_replace('\\', '/', realpath(str_replace(home_url(), ABSPATH, $logo_url))) : '';

    $options = new Dompdf\Options();
    $options->set('isRemoteEnabled', true);
    $options->set('isHtml5ParserEnabled', true);
    $options->set('chroot', ABSPATH);
    $options->set('tempDir', sys_get_temp_dir());
    $options->set('defaultFont', 'Helvetica');

    $dompdf = new Dompdf\Dompdf($options);

    $html = '<!DOCTYPE html><html><head><meta charset="UTF-8"><style>
        @page { margin: 15mm; border: 2px solid #1a2b5f; padding: 10mm; }
        body { font-family: Helvetica, sans-serif; font-size: 12pt; color: #333; line-height: 1.4; }
        .container { width: 100%; padding: 15px; background-color: #fff; }
        .header { text-align: center; padding-bottom: 15px; border-bottom: 2px solid #1a2b5f; margin-bottom: 20px; }
        .header img { width: 80px; height: 80px; border-radius: 50%; margin-bottom: 10px; object-fit: cover; }
        .header h1 { font-size: 24pt; color: #1a2b5f; margin: 0; text-transform: uppercase; }
        .header .subtitle { font-size: 14pt; color: #666; margin: 5px 0; }
        .details-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .details-table td { padding: 8px; border: 1px solid #ddd; }
        .details-table .label { font-weight: bold; color: #1a2b5f; width: 150px; background-color: #f9f9f9; }
        .marks-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .marks-table th, .marks-table td { border: 1px solid #ddd; padding: 10px; text-align: center; }
        .marks-table th { background-color: #1a2b5f; color: white; font-weight: bold; }
        .marks-table tr:nth-child(even) { background-color: #f9f9f9; }
        .marks-table .total-row td { font-weight: bold; background-color: #e6f0fa; }
        .footer { text-align: center; margin-top: 30px; font-size: 10pt; color: #666; }
        .footer .generated-by { font-size: 8pt; margin-top: 10px; color: #999; }
        .signature { margin-top: 20px; }
        .page-break { page-break-before: always; }
    </style></head><body>';

    $first = true;
    foreach ($student_marks as $sid => $data) {
        if (!$first) $html .= '<div class="page-break"></div>';
        $html .= '<div class="container">';
        $html .= generate_su_p_marksheet_content($exam, $subjects, $data, $logo_path, $institute_name);
        $html .= '</div>';
        $first = false;
    }

    $html .= '</body></html>';

    try {
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'portrait');
        $dompdf->render();
        $pdf_content = $dompdf->output();

        while (ob_get_level()) {
            ob_end_clean();
        }

        header('Content-Type: application/pdf');
        header('Content-Disposition: attachment; filename="marksheet_' . $exam_id . '_all.pdf"');
        header('Content-Length: ' . strlen($pdf_content));
        header('Cache-Control: no-cache');

        echo $pdf_content;
        flush();
        exit;
    } catch (Exception $e) {
        error_log('Dompdf Error: ' . $e->getMessage());
        wp_die('Error generating PDF: ' . $e->getMessage());
    }
}

function generate_su_p_marksheet_content($exam, $subjects, $student_data, $logo_path, $institute_name) {
    global $wpdb;

    $student_id = $student_data['id'] ?? 'Unknown';
    $student = get_posts([
        'post_type' => 'student',
        'meta_query' => [
            ['key' => 'student_id', 'value' => $student_id, 'compare' => '=']
        ],
        'posts_per_page' => 1,
        'post_status' => 'publish'
    ]);

    if (empty($student)) {
        $student = $wpdb->get_row($wpdb->prepare(
            "SELECT p.* 
             FROM {$wpdb->prefix}posts p 
             JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
             WHERE pm.meta_key = 'student_id' 
             AND pm.meta_value = %s 
             AND p.post_status = 'publish'",
            $student_id
        ));
    }

    if ($student) {
        $student_name = get_field('student_name', $student->ID) ?: $student->post_title ?: 'N/A';
        $student_roll = get_field('roll_number', $student->ID) ?: 'N/A';
        $student_dob = get_field('date_of_birth', $student->ID) ?: 'N/A';
        $student_gender = get_field('gender', $student->ID) ?: 'N/A';
    } else {
        $student_name = $student_data['name'] ?? 'Unknown (' . esc_html($student_id) . ')';
        $student_roll = 'N/A';
        $student_dob = 'N/A';
        $student_gender = 'N/A';
        error_log("Student not found for ID: $student_id");
    }

    $exam_year = $exam->exam_date ? date('Y', strtotime($exam->exam_date)) : 'N/A';

    $html = '
        <div class="header">
            ' . ($logo_path ? '<img src="' . esc_attr($logo_path) . '" alt="Institute Logo">' : '<p>No logo available</p>') . '
            <h1>' . esc_html($institute_name) . '</h1>
            <div class="subtitle">' . esc_html($exam->name) . ' Marksheet</div>
        </div>
        <table class="details-table">
            <tr>
                <td class="label">Student Name</td>
                <td>' . esc_html($student_name) . '</td>
            </tr>
            <tr>
                <td class="label">Student ID</td>
                <td>' . esc_html($student_id) . '</td>
            </tr>
            <tr>
                <td class="label">Roll Number</td>
                <td>' . esc_html($student_roll) . '</td>
            </tr>
            <tr>
                <td class="label">Date of Birth</td>
                <td>' . esc_html($student_dob) . '</td>
            </tr>
            <tr>
                <td class="label">Gender</td>
                <td>' . esc_html($student_gender) . '</td>
            </tr>
            <tr>
                <td class="label">Examination</td>
                <td>' . esc_html($exam->name) . '</td>
            </tr>
            <tr>
                <td class="label">Class/Course</td>
                <td>' . esc_html($exam->class_id ?: 'N/A') . '</td>
            </tr>
            <tr>
                <td class="label">Academic Year</td>
                <td>' . $exam_year . '</td>
            </tr>
            <tr>
                <td class="label">Exam Date</td>
                <td>' . esc_html($exam->exam_date ?: 'N/A') . '</td>
            </tr>
        </table>
        <table class="marks-table">
            <tr>
                <th>Subject</th>
                <th>Marks Obtained</th>
                <th>Maximum Marks</th>
            </tr>';

    $total = 0;
    $max_total = 0;
    $marks = $student_data['marks'] ?? [];
    foreach ($subjects as $subject) {
        $mark = $marks[$subject->id] ?? '-';
        $total += is_numeric($mark) ? floatval($mark) : 0;
        $max_total += floatval($subject->max_marks);
        $html .= '
            <tr>
                <td>' . esc_html($subject->subject_name) . '</td>
                <td>' . (is_numeric($mark) ? $mark : '-') . '</td>
                <td>' . $subject->max_marks . '</td>
            </tr>';
    }

    $percentage = $max_total > 0 ? round(($total / $max_total) * 100, 2) : 0;

    $html .= '
            <tr class="total-row">
                <td>Total</td>
                <td>' . $total . '</td>
                <td>' . $max_total . '</td>
            </tr>
            <tr class="total-row">
                <td colspan="2">Percentage</td>
                <td>' . $percentage . '%</td>
            </tr>
        </table>
        <div class="footer">
            <p>This is an official marksheet issued by ' . esc_html($institute_name) . '</p>
            <p>Generated on ' . date('Y-m-d') . '</p>
            <div class="signature">
                <p>___________________________</p>
                <p>Registrar / Authorized Signatory</p>
            </div>
            <div class="generated-by">Managed by Instituto Educational Center Management System</div>
        </div>';

    return $html;
}

//reports
$dompdf_path =  dirname(__FILE__) .  '/../assets/exam/dompdf/autoload.inc.php';
if (file_exists($dompdf_path)) {
    require_once $dompdf_path;
} else {
    wp_die('Dompdf autoload file not found at: ' . $dompdf_path);
}

use Dompdf\Dompdf;
use Dompdf\Options;

function su_p_reports_dashboard_shortcode() {
    global $wpdb;
    $current_user = wp_get_current_user();

    if (!is_user_logged_in() || !current_user_can('manage_options')) {
        return '<p>You must be logged in as an administrator to view this dashboard.</p>';
    }

    $centers = get_posts([
        'post_type' => 'educational-center',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);
    if (empty($centers)) {
        return '<div class="alert alert-danger">No Educational Centers found.</div>';
    }

    ob_start();
    ?>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-9 p-4">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 class="card-title">Reports Dashboard</h3>
                        <div class="d-flex">
                            <select id="center-filter" class="form-select me-2" style="width: 200px;">
                                <option value="">All Centers</option>
                                <?php foreach ($centers as $center) {
                                    $center_id = get_field('educational_center_id', $center->ID) ?: $center->ID;
                                    echo '<option value="' . esc_attr($center_id) . '">' . esc_html($center->post_title) . '</option>';
                                } ?>
                            </select>
                            <input type="text" id="search-filter" class="form-control me-2" placeholder="Search exams...">
                        </div>
                    </div>
                    <div class="card-body">
                        <h4>Available Reports</h4>
                        <div id="exam-list-container">
                            <?php
                            // Initial load of exams (unfiltered)
                            $exams = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}exams");
                            if (empty($exams)) {
                                echo '<div class="alert alert-info">No exams found to generate reports for.</div>';
                            } else {
                                echo '<div class="table-responsive">';
                                echo '<table class="table table-bordered table-striped">';
                                echo '<thead><tr><th>Exam Name</th><th>Center</th><th>Average Score</th><th>Students</th><th>Actions</th></tr></thead>';
                                echo '<tbody>';
                                foreach ($exams as $exam) {
                                    $center = array_filter($centers, function($c) use ($exam) {
                                        return (get_field('educational_center_id', $c->ID) ?: $c->ID) == $exam->education_center_id;
                                    });
                                    $center_name = $center ? reset($center)->post_title : 'Unknown';
                                    $results = $wpdb->get_results($wpdb->prepare(
                                        "SELECT AVG(marks) as avg_marks, COUNT(DISTINCT student_id) as student_count 
                                         FROM {$wpdb->prefix}exam_results 
                                         WHERE exam_id = %d",
                                        $exam->id
                                    ));
                                    $avg_marks = $results[0]->avg_marks ? round($results[0]->avg_marks, 2) : 'N/A';
                                    $student_count = $results[0]->student_count ?: 0;
                                    echo '<tr>';
                                    echo '<td>' . esc_html($exam->name) . '</td>';
                                    echo '<td>' . esc_html($center_name) . '</td>';
                                    echo '<td>' . $avg_marks . '</td>';
                                    echo '<td>' . $student_count . '</td>';
                                    echo '<td>';
                                    echo '<button class="btn btn-sm btn-primary me-2 generate-report-btn" data-exam-id="' . esc_attr($exam->id) . '" data-nonce="' . wp_create_nonce('su_p_generate_report_' . $exam->id) . '">Generate Report</button>';
                                    echo '<button class="btn btn-sm btn-info view-exam-details-btn" data-exam-id="' . esc_attr($exam->id) . '" data-nonce="' . wp_create_nonce('su_p_view_exam_details_' . $exam->id) . '">View Details</button>';
                                    echo '</td>';
                                    echo '</tr>';
                                }
                                echo '</tbody></table></div>';
                            }
                            ?>
                        </div>
                        <div id="exam-details-container" class="mt-4" style="display: none;"></div>
                        <div id="edu-loader" class="edu-loader" style="display: none;">
                            <div class="edu-loader-container">
                                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function loadExams(centerFilter, searchQuery) {
            var $container = $('#exam-list-container');
            var $loader = $('#edu-loader');

            $loader.show();
            $container.hide();

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'su_p_filter_exams',
                    center_filter: centerFilter,
                    search_query: searchQuery,
                    nonce: '<?php echo wp_create_nonce('su_p_filter_exams'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $container.html(response.data).show();
                    } else {
                        $container.html('<div class="alert alert-danger">' + response.data + '</div>').show();
                    }
                    $loader.hide();
                },
                error: function() {
                    $container.html('<div class="alert alert-danger">Error loading exams.</div>').show();
                    $loader.hide();
                }
            });
        }

        // Filter exams on center or search change
        $('#center-filter').on('change', function() {
            var centerFilter = $(this).val();
            var searchQuery = $('#search-filter').val();
            loadExams(centerFilter, searchQuery);
        });

        $('#search-filter').on('input', function() {
            var centerFilter = $('#center-filter').val();
            var searchQuery = $(this).val();
            loadExams(centerFilter, searchQuery);
        });

        // Event delegation for Generate Report buttons
        $(document).on('click', '.generate-report-btn', function(e) {
            e.preventDefault();
            var $button = $(this);
            var examId = $button.data('exam-id');
            var nonce = $button.data('nonce');
            var $loader = $('#edu-loader');

            $button.prop('disabled', true).text('Generating...');
            $loader.show();

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'su_p_generate_report_preview',
                    exam_id: examId,
                    nonce: nonce
                },
                success: function(response) {
                    if (response.success) {
                        window.location.href = '<?php echo admin_url('admin-ajax.php'); ?>?action=su_p_download_report_pdf&exam_id=' + examId + '&nonce=' + nonce;
                    } else {
                        alert('Error: ' + response.data);
                    }
                    $button.prop('disabled', false).text('Generate Report');
                    $loader.hide();
                },
                error: function() {
                    alert('An error occurred while generating the report.');
                    $button.prop('disabled', false).text('Generate Report');
                    $loader.hide();
                }
            });
        });

        // Event delegation for View Details buttons
        $(document).on('click', '.view-exam-details-btn', function(e) {
            e.preventDefault();
            var $button = $(this);
            var examId = $button.data('exam-id');
            var nonce = $button.data('nonce');
            var $container = $('#exam-details-container');
            var $loader = $('#edu-loader');

            $button.prop('disabled', true).text('Loading...');
            $loader.show();
            $container.hide().html('');

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'su_p_view_exam_details',
                    exam_id: examId,
                    nonce: nonce,
                    center_filter: $('#center-filter').val(),
                    search_query: $('#search-filter').val(),
                    student_search: ''
                },
                success: function(response) {
                    if (response.success) {
                        $container.html(response.data).slideDown();
                    } else {
                        $container.html('<div class="alert alert-danger">' + response.data + '</div>').slideDown();
                    }
                    $button.prop('disabled', false).text('View Details');
                    $loader.hide();
                },
                error: function() {
                    $container.html('<div class="alert alert-danger">Error loading exam details.</div>').slideDown();
                    $button.prop('disabled', false).text('View Details');
                    $loader.hide();
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
// AJAX Handler for Filtering Exams
add_action('wp_ajax_su_p_filter_exams', 'su_p_filter_exams');
function su_p_filter_exams() {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_filter_exams')) {
        wp_send_json_error('Security check failed.');
    }

    global $wpdb;
    $center_filter = isset($_POST['center_filter']) ? sanitize_text_field($_POST['center_filter']) : '';
    $search_query = isset($_POST['search_query']) ? sanitize_text_field($_POST['search_query']) : '';

    $exams_query = "SELECT * FROM {$wpdb->prefix}exams WHERE 1=1";
    $query_args = [];
    if ($center_filter) {
        $exams_query .= " AND education_center_id = %s";
        $query_args[] = $center_filter;
    }
    if ($search_query) {
        $exams_query .= " AND name LIKE %s";
        $query_args[] = '%' . $wpdb->esc_like($search_query) . '%';
    }

    if (!empty($query_args)) {
        $exams = $wpdb->get_results($wpdb->prepare($exam_query, $exam_id));
    } else {
        $exams = $wpdb->get_results($exams_query);
    }

    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);

    ob_start();
    if (empty($exams)) {
        echo '<div class="alert alert-info">' . ($search_query || $center_filter ? 'No exams found matching your filters.' : 'No exams found to generate reports for.') . '</div>';
    } else {
        echo '<div class="table-responsive">';
        echo '<table class="table table-bordered table-striped">';
        echo '<thead><tr><th>Exam Name</th><th>Center</th><th>Average Score</th><th>Students</th><th>Actions</th></tr></thead>';
        echo '<tbody>';
        foreach ($exams as $exam) {
            $center = array_filter($centers, function($c) use ($exam) {
                return (get_field('educational_center_id', $c->ID) ?: $c->ID) == $exam->education_center_id;
            });
            $center_name = $center ? reset($center)->post_title : 'Unknown';
            $results = $wpdb->get_results($wpdb->prepare(
                "SELECT AVG(marks) as avg_marks, COUNT(DISTINCT student_id) as student_count 
                 FROM {$wpdb->prefix}exam_results 
                 WHERE exam_id = %d",
                $exam->id
            ));
            $avg_marks = $results[0]->avg_marks ? round($results[0]->avg_marks, 2) : 'N/A';
            $student_count = $results[0]->student_count ?: 0;
            echo '<tr>';
            echo '<td>' . esc_html($exam->name) . '</td>';
            echo '<td>' . esc_html($center_name) . '</td>';
            echo '<td>' . $avg_marks . '</td>';
            echo '<td>' . $student_count . '</td>';
            echo '<td>';
            echo '<button class="btn btn-sm btn-primary me-2 generate-report-btn" data-exam-id="' . esc_attr($exam->id) . '" data-nonce="' . wp_create_nonce('su_p_generate_report_' . $exam->id) . '">Generate Report</button>';
            echo '<button class="btn btn-sm btn-info view-exam-details-btn" data-exam-id="' . esc_attr($exam->id) . '" data-nonce="' . wp_create_nonce('su_p_view_exam_details_' . $exam->id) . '">View Details</button>';
            echo '</td>';
            echo '</tr>';
        }
        echo '</tbody></table></div>';
    }
    $html = ob_get_clean();
    wp_send_json_success($html);
}
add_shortcode('su_p_reports_dashboard', 'su_p_reports_dashboard_shortcode');
// AJAX Handler for Exam Details
add_action('wp_ajax_su_p_view_exam_details', 'su_p_view_exam_details');
function su_p_view_exam_details() {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_view_exam_details_' . $_POST['exam_id'])) {
        wp_send_json_error('Security check failed.');
    }

    $exam_id = intval($_POST['exam_id']);
    $student_search = isset($_POST['student_search']) ? sanitize_text_field($_POST['student_search']) : '';
    $center_filter = isset($_POST['center_filter']) ? sanitize_text_field($_POST['center_filter']) : '';
    global $wpdb;

    $exam_query = "SELECT * FROM {$wpdb->prefix}exams WHERE id = %d";
    if ($center_filter) {
        $exam_query .= " AND education_center_id = %s";
        $exam = $wpdb->get_row($wpdb->prepare($exam_query, $exam_id, $center_filter));
    } else {
        $exam = $wpdb->get_row($wpdb->prepare($exam_query, $exam_id));
    }

    if (!$exam) {
        wp_send_json_error('Exam not found or does not match the selected center.');
    }

    $subjects = $wpdb->get_results($wpdb->prepare("SELECT * FROM {$wpdb->prefix}exam_subjects WHERE exam_id = %d", $exam_id));
    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.*, es.subject_name 
         FROM {$wpdb->prefix}exam_results er 
         JOIN {$wpdb->prefix}exam_subjects es ON er.subject_id = es.id 
         WHERE er.exam_id = %d",
        $exam_id
    ), ARRAY_A);

    if (empty($results)) {
        wp_send_json_error('No results available for this exam.');
    }

    $student_marks = [];
    foreach ($results as $result) {
        $student_marks[$result['student_id']]['marks'][$result['subject_id']] = $result['marks'];
    }

    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $center = array_filter($centers, function($c) use ($exam) {
        return (get_field('educational_center_id', $c->ID) ?: $c->ID) == $exam->education_center_id;
    });
    $institute_name = $center ? reset($center)->post_title : 'Unknown Center';
    $logo = get_field('institute_logo', reset($center)->ID ?? 0);
    $logo_url = is_array($logo) && isset($logo['url']) ? esc_url($logo['url']) : ($logo ? wp_get_attachment_url($logo) : '');
    $logo_path = $logo_url ? 'file://' . str_replace('\\', '/', realpath(str_replace(home_url(), ABSPATH, $logo_url))) : '';

    $filtered_results = array_filter($student_marks, function($data) use ($wpdb, $student_search) {
        if (!$student_search) return true;
        $student = $wpdb->get_row($wpdb->prepare(
            "SELECT post_title FROM {$wpdb->prefix}posts p 
             JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
             WHERE pm.meta_key = 'student_id' AND pm.meta_value = %s 
             AND p.post_status = 'publish'",
            $data['student_id']
        ));
        $student_name = $student ? $student->post_title : 'Unknown (' . $data['student_id'] . ')';
        return stripos($student_name, $student_search) !== false;
    }, ARRAY_FILTER_USE_KEY);

    ob_start();
    ?>
    <hr class="my-4">
    <h4>Exam Details: <?php echo esc_html($exam->name); ?></h4>
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card bg-light">
                <div class="card-body">
                    <p><strong>Exam Name:</strong> <?php echo esc_html($exam->name); ?></p>
                    <p><strong>Exam Date:</strong> <?php echo esc_html($exam->exam_date ?: 'N/A'); ?></p>
                    <p><strong>Class/Course:</strong> <?php echo esc_html($exam->class_id ?: 'N/A'); ?></p>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card bg-light">
                <div class="card-body">
                    <p><strong>Total Subjects:</strong> <?php echo count($subjects); ?></p>
                    <p><strong>Total Students:</strong> <?php echo count($student_marks); ?></p>
                    <p><strong>Center:</strong> <?php echo esc_html($institute_name); ?></p>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5>Performance Preview</h5>
        <div class="d-flex">
            <input type="text" id="student-search-input" class="form-control me-2" placeholder="Search students..." value="<?php echo esc_attr($student_search); ?>">
            <button id="student-search-btn" class="btn btn-primary" data-exam-id="<?php echo esc_attr($exam->id); ?>" data-nonce="<?php echo wp_create_nonce('su_p_view_exam_details_' . $exam->id); ?>" data-center="<?php echo esc_attr($center_filter); ?>">Search</button>
        </div>
    </div>
    <?php if (empty($filtered_results)) { ?>
        <div class="alert alert-info">No students found matching your search.</div>
    <?php } else { ?>
        <div class="row">
            <?php
            foreach ($filtered_results as $student_id => $data) {
                $student = $wpdb->get_row($wpdb->prepare(
                    "SELECT post_title FROM {$wpdb->prefix}posts p 
                     JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
                     WHERE pm.meta_key = 'student_id' AND pm.meta_value = %s 
                     AND p.post_status = 'publish'",
                    $student_id
                ));
                $student_name = $student ? $student->post_title : 'Unknown (' . esc_html($student_id) . ')';
                $avg_marks = !empty($student_marks[$student_id]['marks']) ? array_sum($student_marks[$student_id]['marks']) / count($student_marks[$student_id]['marks']) : 0;
                ?>
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title"><?php echo esc_html($student_name); ?></h5>
                            <p class="card-text">Average Marks: <span class="text-primary"><?php echo round($avg_marks, 2); ?></span></p>
                            <button class="btn btn-sm btn-info view-student-details-btn" data-student-id="<?php echo esc_attr($student_id); ?>" data-exam-id="<?php echo esc_attr($exam->id); ?>" data-nonce="<?php echo wp_create_nonce('su_p_view_student_details_' . $student_id); ?>">View Details</button>
                        </div>
                    </div>
                </div>
                <?php
            }
            ?>
        </div>
    <?php } ?>

    <div class="text-center mt-3">
        <button class="btn btn-primary generate-report-btn" data-exam-id="<?php echo esc_attr($exam->id); ?>" data-nonce="<?php echo wp_create_nonce('su_p_generate_report_' . $exam->id); ?>">Download PDF Report</button>
        <button class="btn btn-secondary close-exam-details ms-2">Close</button>
    </div>

    <div id="student-details-container" class="mt-4" style="display: none;"></div>

    <script>
    jQuery(document).ready(function($) {
        $('#student-search-btn').on('click', function(e) {
            e.preventDefault();
            var $button = $(this);
            var examId = $button.data('exam-id');
            var nonce = $button.data('nonce');
            var centerFilter = $button.data('center');
            var studentSearch = $('#student-search-input').val();
            var $container = $('#exam-details-container');
            var $loader = $('#loader');

            $button.prop('disabled', true).text('Searching...');
            $loader.show();
            $container.hide().html('');

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'su_p_view_exam_details',
                    exam_id: examId,
                    nonce: nonce,
                    center_filter: centerFilter,
                    student_search: studentSearch
                },
                success: function(response) {
                    if (response.success) {
                        $container.html(response.data).slideDown();
                    } else {
                        $container.html('<div class="alert alert-danger">' + response.data + '</div>').slideDown();
                    }
                    $button.prop('disabled', false).text('Search');
                    $loader.hide();
                },
                error: function() {
                    $container.html('<div class="alert alert-danger">Error loading exam details.</div>').slideDown();
                    $button.prop('disabled', false).text('Search');
                    $loader.hide();
                }
            });
        });

        $(document).on('click', '.view-student-details-btn', function(e) {
            e.preventDefault();
            var $button = $(this);
            var studentId = $button.data('student-id');
            var examId = $button.data('exam-id');
            var nonce = $button.data('nonce');
            var $container = $('#student-details-container');
            var $loader = $('#loader');

            $button.prop('disabled', true).text('Loading...');
            $loader.show();
            $container.hide().html('');

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'su_p_view_student_details',
                    exam_id: examId,
                    student_id: studentId,
                    nonce: nonce
                },
                success: function(response) {
                    if (response.success) {
                        $container.html(response.data).slideDown();
                    } else {
                        $container.html('<div class="alert alert-danger">' + response.data + '</div>').slideDown();
                    }
                    $button.prop('disabled', false).text('View Details');
                    $loader.hide();
                },
                error: function() {
                    $container.html('<div class="alert alert-danger">Error loading student details.</div>').slideDown();
                    $button.prop('disabled', false).text('View Details');
                    $loader.hide();
                }
            });
        });

        $('.close-exam-details').on('click', function() {
            $('#exam-details-container').slideUp();
        });
    });
    </script>
    <?php
    $html = ob_get_clean();
    wp_send_json_success($html);
}
// AJAX Handler for Student Details
add_action('wp_ajax_su_p_view_student_details', 'su_p_view_student_details');
function su_p_view_student_details() {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_view_student_details_' . $_POST['student_id'])) {
        wp_send_json_error('Security check failed.');
    }

    $exam_id = intval($_POST['exam_id']);
    $student_id = sanitize_text_field($_POST['student_id']);
    global $wpdb;

    $exam = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exams WHERE id = %d",
        $exam_id
    ));
    if (!$exam) {
        wp_send_json_error('Exam not found.');
    }

    $detail_results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.marks, es.subject_name 
         FROM {$wpdb->prefix}exam_results er 
         JOIN {$wpdb->prefix}exam_subjects es ON er.subject_id = es.id 
         WHERE er.exam_id = %d AND er.student_id = %s",
        $exam_id, $student_id
    ), ARRAY_A);

    if (empty($detail_results)) {
        wp_send_json_error('No details found for this student.');
    }

    $student = $wpdb->get_row($wpdb->prepare(
        "SELECT post_title FROM {$wpdb->prefix}posts p 
         JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
         WHERE pm.meta_key = 'student_id' AND pm.meta_value = %s 
         AND p.post_status = 'publish'",
        $student_id
    ));
    $student_name = $student ? $student->post_title : 'Unknown (' . esc_html($student_id) . ')';

    $html = '<div class="card border-primary"><div class="card-header bg-primary text-white"><h5 class="card-title mb-0">Detailed Report: ' . esc_html($student_name) . ' (' . esc_html($exam->name) . ')</h5></div><div class="card-body">';
    $html .= '<ul class="list-group">';
    foreach ($detail_results as $result) {
        $html .= '<li class="list-group-item d-flex justify-content-between align-items-center">' . esc_html($result['subject_name']) . '<span class="badge bg-primary rounded-pill">' . $result['marks'] . '</span></li>';
    }
    $html .= '</ul>';
    $html .= '<button class="btn btn-secondary mt-3 close-details">Close</button></div></div>';
    $html .= '<script>jQuery(".close-details").on("click", function() { jQuery("#student-details-container").slideUp(); });</script>';

    wp_send_json_success($html);
}
add_shortcode('su_p_reports_dashboard', 'su_p_reports_dashboard_shortcode');
function su_p_generate_detailed_pdf($exam, $subjects, $student_marks, $logo_path, $institute_name, $filtered_results = null) {
    global $wpdb;

    $options = new Options();
    $options->set('isRemoteEnabled', true);
    $options->set('isHtml5ParserEnabled', true);
    $options->set('chroot', ABSPATH);
    $options->set('tempDir', sys_get_temp_dir());
    $options->set('defaultFont', 'Helvetica');

    $dompdf = new Dompdf($options);

    $html = '
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            @page { 
                margin: 10mm; 
                border: 4px solid #1a2b5f;
                padding: 4mm;
            }
            body { 
                font-family: Helvetica, sans-serif; 
                font-size: 10pt; 
                color: #333; 
                line-height: 1.4;
            }
            .container {
                width: 100%;
                max-width: 100%;
                padding: 15px;
                border: 1px solid #ccc;
                background-color: #fff;
                box-sizing: border-box;
            }
            .header {
                text-align: center;
                padding-bottom: 10px;
                border-bottom: 2px solid #1a2b5f;
                margin-bottom: 10px;
            }
            .header h1 {
                font-size: 18pt;
                color: #1a2b5f;
                margin: 0;
                text-transform: uppercase;
            }
            .header .subtitle {
                font-size: 12pt;
                color: #666;
                margin: 0;
            }
            .header img {
                width: 60px;
                height: 60px;
                border-radius: 50%;
                margin-bottom: 4px;
                object-fit: cover;
            }
            .details-table, .marks-table {
                width: 100%;
                max-width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                font-size: 11pt;
                table-layout: fixed;
            }
            .details-table td, .marks-table td, .marks-table th {
                padding: 6px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            }
            .details-table td.label {
                width: 25%;
                font-weight: bold;
                background-color: #f5f5f5;
                color: #1a2b5f;
            }
            .marks-table th, .marks-table td {
                width: auto;
                text-align: center;
            }
            .marks-table th {
                background-color: #1a2b5f;
                color: white;
                font-weight: bold;
            }
            .marks-table tr:nth-child(even) {
                background-color: #f9f9f9;
            }
            .marks-table .total-row td {
                font-weight: bold;
                background-color: #e6f0fa;
            }
            .footer {
                text-align: center;
                font-size: 9pt;
                color: #666;
                margin-top: 20px;
            }
            .report-details {
                margin: 20px 0;
                padding: 15px;
                border: 1px solid #ddd;
                background-color: #f9f9f9;
            }
            .report-details .detail-item {
                margin-bottom: 10px;
                display: flex;
            }
            .report-details .label {
                font-weight: bold;
                color: #1a2b5f;
                width: 150px;
                flex-shrink: 0;
            }
            .page-break {
                page-break-before: always;
            }
            @media print {
                .container {
                    width: 100%;
                    max-width: 100%;
                }
                .details-table, .marks-table {
                    width: 100%;
                    max-width: 100%;
                }
            }
        </style>
    </head>
    <body>';

    $html .= '
    <div class="container">
        <div class="header">
            ' . ($logo_path && file_exists(str_replace('file://', '', $logo_path)) ? '<img src="' . esc_attr($logo_path) . '" alt="Institute Logo">' : '<p>No logo available</p>') . '
            <h1>' . esc_html($institute_name) . '</h1>
            <div class="subtitle">Exam Performance Report</div>
        </div>
        <div class="report-details">
            <div class="detail-item">
                <span class="label">Exam Name:</span>
                <span>' . esc_html($exam->name) . '</span>
            </div>
            <div class="detail-item">
                <span class="label">Exam Date:</span>
                <span>' . esc_html($exam->exam_date ?: 'N/A') . '</span>
            </div>
            <div class="detail-item">
                <span class="label">Class/Course:</span>
                <span>' . esc_html($exam->class_id ?: 'N/A') . '</span>
            </div>
            <div class="detail-item">
                <span class="label">Total Subjects:</span>
                <span>' . count($subjects) . '</span>
            </div>
            <div class="detail-item">
                <span class="label">Total Students:</span>
                <span>' . count($student_marks) . '</span>
            </div>
        </div>
    </div>';

    $students_to_process = $filtered_results ?: array_keys($student_marks);
    if (empty($students_to_process)) {
        $html .= '<div class="container"><p>No students available to report.</p></div>';
    } else {
        foreach ($students_to_process as $student_id) {
            if (!is_scalar($student_id)) {
                error_log('Invalid student_id: ' . print_r($student_id, true));
                continue;
            }

            $html .= '<div class="page-break"></div>';

            $student = get_posts([
                'post_type' => 'student',
                'meta_query' => [
                    ['key' => 'student_id', 'value' => $student_id, 'compare' => '=']
                ],
                'posts_per_page' => 1,
                'post_status' => 'publish'
            ]);

            if (empty($student)) {
                $student = $wpdb->get_row($wpdb->prepare(
                    "SELECT p.* 
                     FROM {$wpdb->prefix}posts p 
                     JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
                     WHERE pm.meta_key = 'student_id' 
                     AND pm.meta_value = %s 
                     AND p.post_status = 'publish'",
                    $student_id
                ));
            }

            $student_post = $student ? (is_array($student) ? $student[0] : $student) : null;
            $student_name = $student_post ? $student_post->post_title : 'Unknown (' . esc_html($student_id) . ')';
            $student_roll = $student_post ? (get_field('roll_number', $student_post->ID) ?: 'N/A') : 'N/A';
            $student_dob = $student_post ? (get_field('date_of_birth', $student_post->ID) ?: 'N/A') : 'N/A';
            $student_gender = $student_post ? (get_field('gender', $student_post->ID) ?: 'N/A') : 'N/A';
            $exam_year = $exam->exam_date ? date('Y', strtotime($exam->exam_date)) : 'N/A';

            $html .= '
            <div class="container">
                <div class="header">
                    ' . ($logo_path && file_exists(str_replace('file://', '', $logo_path)) ? '<img src="' . esc_attr($logo_path) . '" alt="Institute Logo">' : '<p>No logo available</p>') . '
                    <h1>' . esc_html($institute_name) . '</h1>
                    <div class="subtitle">' . esc_html($exam->name) . '</div>
                </div>
                <table class="details-table">
                    <tr><td class="label">Student Name</td><td>' . esc_html($student_name) . '</td></tr>
                    <tr><td class="label">Student ID</td><td>' . esc_html($student_id) . '</td></tr>
                    <tr><td class="label">Roll Number</td><td>' . esc_html($student_roll) . '</td></tr>
                    <tr><td class="label">Date of Birth</td><td>' . esc_html($student_dob) . '</td></tr>
                    <tr><td class="label">Gender</td><td>' . esc_html($student_gender) . '</td></tr>
                    <tr><td class="label">Examination</td><td>' . esc_html($exam->name) . '</td></tr>
                    <tr><td class="label">Class/Course</td><td>' . esc_html($exam->class_id ?: 'N/A') . '</td></tr>
                    <tr><td class="label">Academic Year</td><td>' . $exam_year . '</td></tr>
                    <tr><td class="label">Exam Date</td><td>' . esc_html($exam->exam_date ?: 'N/A') . '</td></tr>
                </table>
                <table class="marks-table">
                    <tr><th>Subject</th><th>Marks Obtained</th><th>Maximum Marks</th></tr>';

            $total = 0;
            $max_total = 0;
            foreach ($subjects as $subject) {
                $mark = isset($student_marks[$student_id]['marks'][$subject->id]) ? $student_marks[$student_id]['marks'][$subject->id] : '-';
                $total += is_numeric($mark) ? floatval($mark) : 0;
                $max_total += floatval($subject->max_marks);
                $html .= '
                    <tr>
                        <td>' . esc_html($subject->subject_name) . '</td>
                        <td>' . $mark . '</td>
                        <td>' . $subject->max_marks . '</td>
                    </tr>';
            }

            $percentage = $max_total > 0 ? round(($total / $max_total) * 100, 2) : 0;

            $html .= '
                    <tr class="total-row">
                        <td>Total</td>
                        <td>' . $total . '</td>
                        <td>' . $max_total . '</td>
                    </tr>
                    <tr class="total-row">
                        <td colspan="2">Percentage</td>
                        <td>' . $percentage . '%</td>
                    </tr>
                </table>
                <div class="footer">
                    <p>This is an Online Generated Report issued by ' . esc_html($institute_name) . '</p>
                    <p>Generated on ' . date('Y-m-d') . '</p>
                    <div class="signature">
                        <p>___________________________</p>
                        <p>Registrar / Authorized Signatory</p>
                    </div>
                    <div class="generated-by">
                        Managed by Instituto Educational Center Management System
                    </div>
                </div>
            </div>';
        }
    }

    $html .= '</body></html>';

    try {
        $dompdf->loadHtml($html);
        $dompdf->setPaper('A4', 'portrait');
        $dompdf->render();
        $pdf_content = $dompdf->output();

        while (ob_get_level()) {
            ob_end_clean();
        }

        header('Content-Type: application/pdf');
        header('Content-Disposition: attachment; filename="exam_report_' . $exam->id . '_detailed.pdf"');
        header('Content-Length: ' . strlen($pdf_content));
        header('Cache-Control: no-cache');

        echo $pdf_content;
        flush();
        exit;
    } catch (Exception $e) {
        error_log('Dompdf Error: ' . $e->getMessage());
        wp_die('Error generating PDF: ' . esc_html($e->getMessage()));
    }
}

add_action('wp_ajax_su_p_generate_report_preview', 'su_p_generate_report_preview');
function su_p_generate_report_preview() {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_generate_report_' . $_POST['exam_id'])) {
        wp_send_json_error('Security check failed.');
    }

    $exam_id = intval($_POST['exam_id']);
    global $wpdb;
    $exam = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exams WHERE id = %d",
        $exam_id
    ));
    if (!$exam) {
        wp_send_json_error('Exam not found.');
    }

    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.*, es.subject_name 
         FROM {$wpdb->prefix}exam_results er 
         JOIN {$wpdb->prefix}exam_subjects es ON er.subject_id = es.id 
         WHERE er.exam_id = %d",
        $exam_id
    ), ARRAY_A);

    if (empty($results)) {
        wp_send_json_error('No results available for this exam.');
    }

    wp_send_json_success('Report ready for download.');
}

add_action('wp_ajax_su_p_download_report_pdf', 'su_p_download_report_pdf');
function su_p_download_report_pdf() {
    if (!isset($_GET['nonce']) || !wp_verify_nonce($_GET['nonce'], 'su_p_generate_report_' . $_GET['exam_id'])) {
        wp_die('Security check failed.');
    }

    $exam_id = intval($_GET['exam_id']);
    global $wpdb;
    $exam = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exams WHERE id = %d",
        $exam_id
    ));
    if (!$exam) {
        wp_die('Exam not found.');
    }

    $subjects = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exam_subjects WHERE exam_id = %d",
        $exam_id
    ));
    $results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.*, es.subject_name 
         FROM {$wpdb->prefix}exam_results er 
         JOIN {$wpdb->prefix}exam_subjects es ON er.subject_id = es.id 
         WHERE er.exam_id = %d",
        $exam_id
    ), ARRAY_A);

    if (empty($results)) {
        wp_die('No results available to generate a report.');
    }

    $student_marks = [];
    foreach ($results as $result) {
        $student_marks[$result['student_id']]['marks'][$result['subject_id']] = $result['marks'];
    }

    $centers = get_posts([
        'post_type' => 'educational-center',
        'meta_key' => 'educational_center_id',
        'meta_value' => $exam->education_center_id,
        'posts_per_page' => 1
    ]);
    $institute_name = $centers ? $centers[0]->post_title : 'Unknown Center';
    $logo = get_field('institute_logo', $centers[0]->ID ?? 0);
    $logo_url = is_array($logo) && isset($logo['url']) ? esc_url($logo['url']) : ($logo ? wp_get_attachment_url($logo) : '');
    $logo_path = $logo_url ? 'file://' . str_replace('\\', '/', realpath(str_replace(home_url(), ABSPATH, $logo_url))) : '';

    su_p_generate_detailed_pdf($exam, $subjects, $student_marks, $logo_path, $institute_name);
}

add_action('wp_ajax_su_p_view_report_details', 'su_p_view_report_details');
function su_p_view_report_details() {
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_view_details_' . $_POST['exam_id'])) {
        wp_send_json_error('Security check failed.');
    }

    $exam_id = intval($_POST['exam_id']);
    global $wpdb;
    $exam = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}exams WHERE id = %d",
        $exam_id
    ));
    if (!$exam) {
        wp_send_json_error('Exam not found.');
    }

    $detail_results = $wpdb->get_results($wpdb->prepare(
        "SELECT er.student_id, er.marks, es.subject_name 
         FROM {$wpdb->prefix}exam_results er 
         JOIN {$wpdb->prefix}exam_subjects es ON er.subject_id = es.id 
         WHERE er.exam_id = %d",
        $exam_id
    ), ARRAY_A);

    if (empty($detail_results)) {
        wp_send_json_error('No detailed results found for this exam.');
    }

    $student_marks = [];
    foreach ($detail_results as $result) {
        $student = $wpdb->get_row($wpdb->prepare(
            "SELECT post_title FROM {$wpdb->prefix}posts p JOIN {$wpdb->prefix}postmeta pm ON p.ID = pm.post_id 
             WHERE pm.meta_key = 'student_id' AND pm.meta_value = %s AND p.post_status = 'publish'",
            $result['student_id']
        ));
        $student_name = $student ? $student->post_title : 'Unknown (' . esc_html($result['student_id']) . ')';
        $student_marks[$student_name][$result['subject_name']] = $result['marks'];
    }

    $html = '<div class="card border-primary"><div class="card-header bg-primary text-white"><h5 class="card-title mb-0">Detailed Report: ' . esc_html($exam->name) . '</h5></div><div class="card-body">';
    foreach ($student_marks as $student_name => $marks) {
        $html .= '<h6>' . esc_html($student_name) . '</h6><ul class="list-group mb-3">';
        foreach ($marks as $subject => $mark) {
            $html .= '<li class="list-group-item d-flex justify-content-between align-items-center">' . esc_html($subject) . '<span class="badge bg-primary rounded-pill">' . $mark . '</span></li>';
        }
        $html .= '</ul>';
    }
    $html .= '<button class="btn btn-secondary mt-3 close-details">Close</button></div></div>';
    $html .= '<script>jQuery(".close-details").on("click", function() { jQuery("#report-details-container").slideUp(); });</script>';

    wp_send_json_success($html);
}

add_shortcode('su_p_reports_dashboard', 'su_p_reports_dashboard_shortcode');

//Library
// Main Dashboard Shortcode
function su_p_library_management_dashboard_shortcode() {
    // if (!is_user_logged_in() || !is_super_admin()) { // Fixed typo: is_super_admin
    //     return '<p>You must be logged in as a Super Administrator to view this dashboard.</p>';
    // }

    global $wpdb;
    $table_name = $wpdb->prefix . 'library';

    // Fetch educational centers
    $centers = get_posts([
        'post_type' => 'educational-center',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    // Pre-generate book IDs for each center
    $book_ids = [];
    if (!empty($centers)) {
        foreach ($centers as $center) {
            $center_id = get_field('educational_center_id', $center->ID) ?: $center->ID;
            $book_ids[$center_id] = get_unique_id_for_role('book', $center_id);
            if (is_wp_error($book_ids[$center_id])) {
                $book_ids[$center_id] = 'ERROR-' . uniqid();
            }
        }
    }

    // Handle Add Book submission
    $add_message = '';
    if (isset($_POST['su_p_add_library_book']) && check_admin_referer('su_p_library_add', 'nonce')) {
        $education_center_id = sanitize_text_field($_POST['education_center_id']);
        $isbn = sanitize_text_field($_POST['isbn']);
        $title = sanitize_text_field($_POST['title']);
        $author = sanitize_text_field($_POST['author']);
        $quantity = intval($_POST['quantity']);
        $book_id = get_unique_id_for_role('book', $education_center_id);

        if (empty($education_center_id) || empty($title) || empty($author) || $quantity < 0) {
            $add_message = '<div class="alert alert-danger">Invalid input data</div>';
        } elseif (is_wp_error($book_id)) {
            $add_message = '<div class="alert alert-danger">Error generating book ID: ' . esc_html($book_id->get_error_message()) . '</div>';
        } else {
            $exists = $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM $table_name WHERE book_id = %s AND education_center_id = %s",
                $book_id,
                $education_center_id
            ));

            if ($exists === null) {
                $add_message = '<div class="alert alert-danger">Database error: ' . esc_html($wpdb->last_error) . '</div>';
            } elseif ($exists > 0) {
                $add_message = '<div class="alert alert-danger">Book ID already exists for this center</div>';
            } else {
                $wpdb->insert(
                    $table_name,
                    [
                        'book_id' => $book_id,
                        'isbn' => $isbn,
                        'title' => $title,
                        'author' => $author,
                        'quantity' => $quantity,
                        'available' => $quantity,
                        'education_center_id' => $education_center_id
                    ],
                    ['%s', '%s', '%s', '%s', '%d', '%d', '%s']
                );

                if ($wpdb->last_error) {
                    $add_message = '<div class="alert alert-danger">Failed to add book: ' . esc_html($wpdb->last_error) . '</div>';
                } else {
                    // Redirect to clear POST data
                    wp_redirect('?section=library');
                                        exit;
                }
            }
        }
    }

    // Handle Edit Book submission
    $edit_message = '';
    if (isset($_POST['su_p_edit_library_book']) && check_admin_referer('su_p_library_edit', 'nonce')) {
        $book_id = sanitize_text_field($_POST['book_id']);
        $isbn = sanitize_text_field($_POST['isbn']);
        $title = sanitize_text_field($_POST['title']);
        $author = sanitize_text_field($_POST['author']);
        $quantity = intval($_POST['quantity']);

        if (empty($book_id) || empty($title) || empty($author) || $quantity < 0) {
            $edit_message = '<div class="alert alert-danger">Invalid input data</div>';
        } else {
            $wpdb->update(
                $table_name,
                [
                    'isbn' => $isbn,
                    'title' => $title,
                    'author' => $author,
                    'quantity' => $quantity,
                    'available' => $quantity
                ],
                ['book_id' => $book_id],
                ['%s', '%s', '%s', '%d', '%d'],
                ['%s']
            );

            if ($wpdb->last_error) {
                $edit_message = '<div class="alert alert-danger">Failed to update book: ' . esc_html($wpdb->last_error) . '</div>';
            } else {
                wp_redirect('?section=wp_library');    
                            exit;
            }
        }
    }

    // Handle Delete Book submission
    $delete_message = '';
    if (isset($_POST['su_p_delete_library_book']) && check_admin_referer('su_p_library_delete', 'nonce')) {
        $book_id = sanitize_text_field($_POST['book_id']);

        if (empty($book_id)) {
            $delete_message = '<div class="alert alert-danger">Invalid book ID</div>';
        } else {
            $wpdb->delete($table_name, ['book_id' => $book_id], ['%s']);
            if ($wpdb->last_error) {
                $delete_message = '<div class="alert alert-danger">Failed to delete book: ' . esc_html($wpdb->last_error) . '</div>';
            } else {
                wp_redirect('?section=wp_library');      
                          exit;
            }
        }
    }

    ob_start();
    ?>
    <div class="container-fluid" style="background: linear-gradient(135deg, #e6f7ff, #cce5ff); min-height: 100vh; padding: 20px;">
        <div class="card shadow-lg" style="border-radius: 15px; background: #fff; border: 3px solid #007bff;">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center" style="border-radius: 12px 12px 0 0; padding: 1.5rem;">
                <h3 class="card-title mb-0"><i class="bi bi-book me-2"></i>Library Management Dashboard</h3>
                <div class="d-flex">
                    <select id="su-p-edu-center-filter" class="form-select me-2" style="width: 200px;">
                        <option value="">All Educational Centers</option>
                        <?php
                        if (empty($centers)) {
                            echo '<option value="">No centers found</option>';
                        } else {
                            foreach ($centers as $center) {
                                $center_id = get_field('educational_center_id', $center->ID) ?: $center->ID;
                                echo '<option value="' . esc_attr($center_id) . '">' . esc_html($center->post_title) . '</option>';
                            }
                        }
                        ?>
                    </select>
                    <input type="text" id="su-p-search-filter" class="form-control" placeholder="Search..." style="border-radius: 20px;">
                    <button id="su-p-add-book-btn" class="btn btn-success btn-sm ms-2" type="button">+ New Book</button>
                </div>
            </div>
            <div class="card-body p-4">
                <div id="su-p-dashboard-content">
                    <?php
                    $books = $wpdb->get_results("SELECT * FROM $table_name");
                    if ($wpdb->last_error) {
                        echo '<div class="alert alert-danger">Error loading books: ' . esc_html($wpdb->last_error) . '</div>';
                    } elseif (empty($books)) {
                        echo '<p>No books found.</p>';
                    } else {
                        echo '<table class="table table-hover"><thead><tr><th>ID</th><th>Title</th><th>Author</th><th>Center ID</th><th>Actions</th></tr></thead><tbody>';
                        foreach ($books as $book) {
                            echo '<tr>';
                            echo '<td>' . esc_html($book->book_id) . '</td>';
                            echo '<td>' . esc_html($book->title) . '</td>';
                            echo '<td>' . esc_html($book->author) . '</td>';
                            echo '<td>' . esc_html($book->education_center_id) . '</td>';
                            echo '<td>';
                            echo '<button class="btn btn-warning btn-sm edit-book-btn" data-book-id="' . esc_attr($book->book_id) . '">Edit</button> ';
                            echo '<button class="btn btn-danger btn-sm delete-book-btn" data-book-id="' . esc_attr($book->book_id) . '">Delete</button>';
                            echo '</td>';
                            echo '</tr>';
                        }
                        echo '</tbody></table>';
                    }
                    ?>
                </div>
                <div id="edu-loader" class="edu-loader" style="display: none;">
                    <div class="edu-loader-container">
                        <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Book Modal -->
    <div class="modal" id="addBookModal">
        <div class="modal-content">
            <span class="modal-close">×</span>
            <h5 class="bg-success text-white p-3 mb-3" style="border-radius: 8px 8px 0 0;">Add New Book</h5>
            <div id="add-book-form-container">
                <?php if ($add_message) echo $add_message; ?>
                <form id="add-library-form" method="post" class="needs-validation" novalidate>
                    <div class="row g-4">
                        <div class="col-md-6">
                            <label for="book_id" class="form-label fw-bold">Book ID</label>
                            <input type="text" name="book_id" id="book_id" class="form-control" value="" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="edu_center_id" class="form-label fw-bold">Educational Center</label>
                            <select name="education_center_id" id="edu_center_id" class="form-control" required>
                                <option value="">Select Center</option>
                                <?php
                                if (empty($centers)) {
                                    echo '<option value="">No centers available</option>';
                                } else {
                                    foreach ($centers as $center) {
                                        $center_id = get_field('educational_center_id', $center->ID) ?: $center->ID;
                                        echo '<option value="' . esc_attr($center_id) . '">' . esc_html($center->post_title) . '</option>';
                                    }
                                }
                                ?>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="isbn" class="form-label fw-bold">ISBN</label>
                            <input type="text" name="isbn" id="isbn" class="form-control" placeholder="Enter ISBN">
                        </div>
                        <div class="col-md-12">
                            <label for="title" class="form-label fw-bold">Title</label>
                            <input type="text" name="title" id="title" class="form-control" required>
                        </div>
                        <div class="col-md-6">
                            <label for="author" class="form-label fw-bold">Author</label>
                            <input type="text" name="author" id="author" class="form-control" required>
                        </div>
                        <div class="col-md-6">
                            <label for="quantity" class="form-label fw-bold">Quantity</label>
                            <input type="number" name="quantity" id="quantity" class="form-control" min="0" required>
                        </div>
                    </div>
                    <?php wp_nonce_field('su_p_library_add', 'nonce'); ?>
                    <input type="hidden" name="su_p_add_library_book" value="1">
                </form>
            </div>
            <div class="mt-3 text-end">
                <button type="button" class="btn btn-secondary modal-close-btn me-2">Close</button>
                <button type="submit" form="add-library-form" class="btn btn-success add-book-btn" id="add-book-submit">Add Book</button>
            </div>
        </div>
    </div>

    <!-- Edit Book Modal -->
    <div class="modal" id="editBookModal">
        <div class="modal-content">
            <span class="modal-close">×</span>
            <h5 class="bg-warning text-dark p-3 mb-3" style="border-radius: 8px 8px 0 0;">Edit Library Book</h5>
            <div id="edit-book-form-container">
                <?php if ($edit_message) echo $edit_message; ?>
                <form id="edit-library-form" method="post" class="needs-validation" novalidate>
                    <div class="row g-4" id="edit-form-fields"></div>
                    <?php wp_nonce_field('su_p_library_edit', 'nonce'); ?>
                    <input type="hidden" name="su_p_edit_library_book" value="1">
                </form>
            </div>
            <div class="mt-3 text-end">
                <button type="button" class="btn btn-secondary modal-close-btn me-2">Close</button>
                <button type="submit" form="edit-library-form" class="btn btn-warning update-book-btn">Update Book</button>
            </div>
        </div>
    </div>

    <!-- Delete Book Modal -->
    <div class="modal" id="deleteBookModal">
        <div class="modal-content">
            <span class="modal-close">×</span>
            <h5 class="bg-danger text-white p-3 mb-3" style="border-radius: 8px 8px 0 0;">Confirm Deletion</h5>
            <div id="delete-book-container">
                <?php if ($delete_message) echo $delete_message; ?>
                <p>Are you sure you want to delete this book?</p>
                <form id="delete-library-form" method="post">
                    <input type="hidden" name="book_id" id="delete-book-id">
                    <?php wp_nonce_field('su_p_library_delete', 'nonce'); ?>
                    <input type="hidden" name="su_p_delete_library_book" value="1">
                </form>
            </div>
            <div class="mt-3 text-end">
                <button type="button" class="btn btn-secondary modal-close-btn me-2">Cancel</button>
                <button type="submit" form="delete-library-form" class="btn btn-danger confirm-delete-btn">Delete</button>
            </div>
        </div>
    </div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
    const $loader = document.getElementById('edu-loader');
    const addModal = document.getElementById('addBookModal');
    const editModal = document.getElementById('editBookModal');
    const deleteModal = document.getElementById('deleteBookModal');
    const addButton = document.getElementById('su-p-add-book-btn');
    const bookIds = <?php echo json_encode($book_ids); ?>;
    const $content = document.getElementById('su-p-dashboard-content');
    const centerFilter = document.getElementById('su-p-edu-center-filter');
    const searchFilter = document.getElementById('su-p-search-filter');
    const ajaxUrl = '<?php echo admin_url('admin-ajax.php'); ?>';

    function showLoader() { $loader.style.display = 'flex'; }
    function hideLoader() { $loader.style.display = 'none'; }
    function showModal(modal) { modal.style.display = 'block'; }
    function hideModal(modal) { modal.style.display = 'none'; }

    // Modal close handlers
    [addModal, editModal, deleteModal].forEach(modal => {
        document.querySelectorAll(`#${modal.id} .modal-close, #${modal.id} .modal-close-btn`).forEach(btn => {
            btn.addEventListener('click', () => hideModal(modal));
        });
        window.addEventListener('click', function(e) { if (e.target === modal) hideModal(modal); });
    });

    // Function to load dashboard content via AJAX
    function loadDashboard() {
        showLoader();
        const data = new FormData();
        data.append('action', 'su_p_library_list');
        data.append('nonce', '<?php echo wp_create_nonce('su_p_library_list'); ?>');
        data.append('edu_center_id', centerFilter.value);
        data.append('search_query', searchFilter.value);

        fetch(ajaxUrl, { method: 'POST', body: data })
            .then(response => response.json())
            .then(data => {
                hideLoader();
                if (data.success) {
                    $content.innerHTML = data.data;
                } else {
                    $content.innerHTML = '<div class="alert alert-danger">' + (data.data.message || 'Error loading books') + '</div>';
                }
            })
            .catch(error => {
                hideLoader();
                $content.innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
            });
    }

    // Add Book Modal
    addButton.addEventListener('click', function() {
        document.getElementById('book_id').value = '';
        showModal(addModal);
    });

    document.getElementById('edu_center_id').addEventListener('change', function() {
        const centerId = this.value;
        document.getElementById('book_id').value = centerId ? bookIds[centerId] : '';
    });

    const addForm = document.getElementById('add-library-form');
    const addSubmitBtn = document.getElementById('add-book-submit');
    addForm.addEventListener('submit', function(e) {
        e.preventDefault();
        showLoader();
        addSubmitBtn.disabled = true;
        this.submit();
    });

    // Event listener for center filter
    centerFilter.addEventListener('change', function() {
        loadDashboard();
    });

    // Event listener for search filter (optional, for completeness)
    searchFilter.addEventListener('input', function() {
        loadDashboard();
    });

    // Initial load (optional, if you want the table to load dynamically on page load)
    loadDashboard();

    // Edit Book Modal
    document.querySelectorAll('.edit-book-btn').forEach(button => {
        button.addEventListener('click', function() {
            const bookId = this.getAttribute('data-book-id');
            const book = <?php echo json_encode(array_column($books, null, 'book_id')); ?>[bookId];
            if (book) {
                document.getElementById('edit-form-fields').innerHTML = `
                    <div class="col-md-6">
                        <label for="edit_book_id" class="form-label fw-bold">Book ID</label>
                        <input type="text" name="book_id" id="edit_book_id" class="form-control" value="${book.book_id}" readonly>
                    </div>
                    <div class="col-md-6">
                        <label for="edit_isbn" class="form-label fw-bold">ISBN</label>
                        <input type="text" name="isbn" id="edit_isbn" class="form-control" value="${book.isbn}">
                    </div>
                    <div class="col-md-12">
                        <label for="edit_title" class="form-label fw-bold">Title</label>
                        <input type="text" name="title" id="edit_title" class="form-control" value="${book.title}" required>
                    </div>
                    <div class="col-md-6">
                        <label for="edit_author" class="form-label fw-bold">Author</label>
                        <input type="text" name="author" id="edit_author" class="form-control" value="${book.author}" required>
                    </div>
                    <div class="col-md-6">
                        <label for="edit_quantity" class="form-label fw-bold">Quantity</label>
                        <input type="number" name="quantity" id="edit_quantity" class="form-control" value="${book.quantity}" min="0" required>
                    </div>
                `;
                showModal(editModal);
            }
        });
    });

    const editForm = document.getElementById('edit-library-form');
    editForm.addEventListener('submit', function(e) {
        e.preventDefault();
        showLoader();
        this.submit();
    });

    // Delete Book Modal
    document.querySelectorAll('.delete-book-btn').forEach(button => {
        button.addEventListener('click', function() {
            const bookId = this.getAttribute('data-book-id');
            document.getElementById('delete-book-id').value = bookId;
            document.getElementById('delete-book-container').innerHTML = `<p>Are you sure you want to delete book "${bookId}"?</p>` + document.getElementById('delete-library-form').outerHTML;
            showModal(deleteModal);
        });
    });

    const deleteForm = document.getElementById('delete-library-form');
    deleteForm.addEventListener('submit', function(e) {
        e.preventDefault();
        showLoader();
        this.submit();
    });
    });
</script>
    <?php
    return ob_get_clean();
}
add_shortcode('su_p_library_management_dashboard', 'su_p_library_management_dashboard_shortcode');

// Library List AJAX Handler
add_action('wp_ajax_su_p_library_list', 'su_p_library_list');
function su_p_library_list() {
    // if (!is_user_logged_in() || !is_super_admin()) {
    //     wp_send_json_error(['message' => 'Access denied']);
    // }
    check_ajax_referer('su_p_library_list', 'nonce');

    global $wpdb;
    $table_name = $wpdb->prefix . 'library';
    $edu_center_id = sanitize_text_field($_POST['edu_center_id'] ?? '');
    $search_query = sanitize_text_field($_POST['search_query'] ?? '');

    $query = "SELECT * FROM $table_name";
    $args = [];
    if ($edu_center_id) {
        $query .= " WHERE education_center_id = %s";
        $args[] = $edu_center_id;
    }
    if ($search_query) {
        $query .= $edu_center_id ? " AND" : " WHERE";
        $query .= " (title LIKE %s OR author LIKE %s OR isbn LIKE %s)";
        $args[] = '%' . $wpdb->esc_like($search_query) . '%';
        $args[] = '%' . $wpdb->esc_like($search_query) . '%';
        $args[] = '%' . $wpdb->esc_like($search_query) . '%';
    }
    $books = $args ? $wpdb->get_results($wpdb->prepare($query, $args)) : $wpdb->get_results($query);

    ob_start();
    ?>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead style="background: #f8f9fa;">
                <tr>
                    <th>ID</th>
                    <th>ISBN</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Total</th>
                    <th>Available</th>
                    <th>Center ID</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php
                if (empty($books)) {
                    echo '<tr><td colspan="8" class="text-center py-4">No books found.</td></tr>';
                } else {
                    foreach ($books as $book) {
                        echo '<tr>';
                        echo '<td>' . esc_html($book->book_id) . '</td>';
                        echo '<td>' . esc_html($book->isbn) . '</td>';
                        echo '<td>' . esc_html($book->title) . '</td>';
                        echo '<td>' . esc_html($book->author) . '</td>';
                        echo '<td>' . esc_html($book->quantity) . '</td>';
                        echo '<td>' . ($book->available < 1 ? '<span class="badge bg-danger">Out</span>' : esc_html($book->available)) . '</td>';
                        echo '<td>' . esc_html($book->education_center_id) . '</td>';
                        echo '<td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary transact-book-btn" data-book-id="' . esc_attr($book->book_id) . '" data-nonce="' . wp_create_nonce('transact_book_' . $book->book_id) . '">Transact</button>
                                <button class="btn btn-sm btn-warning edit-book-btn" data-book-id="' . esc_attr($book->book_id) . '" data-nonce="' . wp_create_nonce('edit_book_' . $book->book_id) . '">Edit</button>
                                <button class="btn btn-sm btn-danger delete-book-btn" data-book-id="' . esc_attr($book->book_id) . '" data-nonce="' . wp_create_nonce('delete_book_' . $book->book_id) . '">Delete</button>
                            </div>
                        </td>';
                        echo '</tr>';
                    }
                }
                ?>
            </tbody>
        </table>
    </div>
    <?php
    wp_send_json_success(ob_get_clean());
}
// Library Add Form AJAX Handler
add_action('wp_ajax_su_p_library_add_form', 'su_p_library_add_form');
function su_p_library_add_form() {
    // Clear any previous output to prevent JSON corruption
    if (ob_get_length()) {
        ob_end_clean();
    }

    // if (!is_user_logged_in() || !is_super_admin()) {
    //     wp_send_json_error(['message' => 'Access denied']);
    //     return;
    // }

    if (!check_ajax_referer('su_p_library_add', 'nonce', false)) {
        wp_send_json_error(['message' => 'Invalid nonce']);
        return;
    }

    global $wpdb;
    $table_name = $wpdb->prefix . 'library';

    if (!function_exists('generate_unique_id')) {
        wp_send_json_error(['message' => 'generate_unique_id function missing']);
        return;
    }
    $new_book_id = generate_unique_id($wpdb, $table_name, 'BOOK-');

    ob_start();
    ?>
    <form id="add-library-form" class="needs-validation" novalidate>
        <div class="row g-4">
            <div class="col-md-6">
                <label for="book_id" class="form-label fw-bold">Book ID</label>
                <input type="text" name="book_id" id="book_id" class="form-control" value="<?php echo esc_attr($new_book_id); ?>" readonly>
            </div>
            <div class="col-md-6">
                <label for="edu_center_id" class="form-label fw-bold">Educational Center</label>
                <select name="education_center_id" id="edu_center_id" class="form-control" required>
                    <option value="">Select Center</option>
                    <?php
                    $centers = $wpdb->get_results("SELECT center_id AS id, center_name AS name FROM {$wpdb->prefix}educational_centers");
                    if ($wpdb->last_error) {
                        echo '<option value="">Error: ' . esc_html($wpdb->last_error) . '</option>';
                    } elseif (empty($centers)) {
                        echo '<option value="">No centers available</option>';
                    } else {
                        foreach ($centers as $center) {
                            echo '<option value="' . esc_attr($center->id) . '">' . esc_html($center->name) . '</option>';
                        }
                    }
                    ?>
                </select>
            </div>
            <div class="col-md-6">
                <label for="isbn" class="form-label fw-bold">ISBN</label>
                <input type="text" name="isbn" id="isbn" class="form-control" placeholder="Enter ISBN">
            </div>
            <div class="col-md-12">
                <label for="title" class="form-label fw-bold">Title</label>
                <input type="text" name="title" id="title" class="form-control" required>
            </div>
            <div class="col-md-6">
                <label for="author" class="form-label fw-bold">Author</label>
                <input type="text" name="author" id="author" class="form-control" required>
            </div>
            <div class="col-md-6">
                <label for="quantity" class="form-label fw-bold">Quantity</label>
                <input type="number" name="quantity" id="quantity" class="form-control" min="0" required>
            </div>
        </div>
        <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('library_nonce'); ?>">
    </form>
    <?php
    $form_html = ob_get_clean();

    wp_send_json_success(['form_html' => $form_html]);
}
// Library Add AJAX Handler
add_action('wp_ajax_su_p_add_library_book', 'su_p_add_library_book');
function su_p_add_library_book() {
    global $wpdb;
    check_ajax_referer('library_nonce', 'nonce');

    $table_name = $wpdb->prefix . 'library';
    $book_id = sanitize_text_field($_POST['book_id']);
    $education_center_id = sanitize_text_field($_POST['education_center_id']);
    $isbn = sanitize_text_field($_POST['isbn']);
    $title = sanitize_text_field($_POST['title']);
    $author = sanitize_text_field($_POST['author']);
    $quantity = intval($_POST['quantity']);

    if (empty($book_id) || empty($education_center_id) || empty($title) || empty($author) || $quantity < 0) {
        wp_send_json_error(['message' => 'Invalid input data']);
    }

    $exists = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table_name WHERE book_id = %s AND education_center_id = %s",
        $book_id, $education_center_id
    ));

    if ($exists > 0) {
        wp_send_json_error(['message' => 'Book ID already exists for this center']);
    }

    $wpdb->insert(
        $table_name,
        [
            'book_id' => $book_id,
            'isbn' => $isbn,
            'title' => $title,
            'author' => $author,
            'quantity' => $quantity,
            'available' => $quantity,
            'education_center_id' => $education_center_id
        ],
        ['%s', '%s', '%s', '%s', '%d', '%d', '%s']
    );

    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Failed to add book: ' . $wpdb->last_error]);
    }

    wp_send_json_success(['message' => 'Book added successfully']);
}

// Library Edit Form AJAX Handler
add_action('wp_ajax_su_p_library_edit_form', 'su_p_library_edit_form');
function su_p_library_edit_form() {
    // if (!is_user_logged_in() || !is_super_admin()) {
    //     wp_send_json_error(['message' => 'Access denied']);
    // }
    check_ajax_referer('edit_book_' . sanitize_text_field($_POST['book_id']), 'nonce');

    global $wpdb;
    $book_id = sanitize_text_field($_POST['book_id']);
    $book = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}library WHERE book_id = %s", $book_id));

    if (!$book) {
        wp_send_json_error(['message' => 'Book not found']);
    }

    ob_start();
    ?>
    <form id="edit-library-form" class="needs-validation" novalidate>
        <div class="row g-4">
            <div class="col-md-6">
                <label for="isbn" class="form-label fw-bold">ISBN</label>
                <input type="text" name="isbn" id="isbn" class="form-control" value="<?php echo esc_attr($book->isbn); ?>">
            </div>
            <div class="col-md-6">
                <label for="title" class="form-label fw-bold">Title</label>
                <input type="text" name="title" id="title" class="form-control" value="<?php echo esc_attr($book->title); ?>" required>
            </div>
            <div class="col-md-6">
                <label for="author" class="form-label fw-bold">Author</label>
                <input type="text" name="author" id="author" class="form-control" value="<?php echo esc_attr($book->author); ?>" required>
            </div>
            <div class="col-md-6">
                <label for="quantity" class="form-label fw-bold">Quantity</label>
                <input type="number" name="quantity" id="quantity" class="form-control" value="<?php echo esc_attr($book->quantity); ?>" min="0" required>
            </div>
            <div class="col-md-6">
                <label for="available" class="form-label fw-bold">Available</label>
                <input type="number" name="available" id="available" class="form-control" value="<?php echo esc_attr($book->available); ?>" min="0" max="<?php echo esc_attr($book->quantity); ?>" required>
            </div>
        </div>
        <input type="hidden" name="book_id" value="<?php echo esc_attr($book_id); ?>">
        <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('library_edit_nonce'); ?>">
    </form>
    <?php
    wp_send_json_success(['form_html' => ob_get_clean()]);
}

// Library Edit AJAX Handler
add_action('wp_ajax_su_p_edit_library_book', 'su_p_edit_library_book');
function su_p_edit_library_book() {
    global $wpdb;
    check_ajax_referer('library_edit_nonce', 'nonce');

    $table_name = $wpdb->prefix . 'library';
    $book_id = sanitize_text_field($_POST['book_id']);
    $isbn = sanitize_text_field($_POST['isbn']);
    $title = sanitize_text_field($_POST['title']);
    $author = sanitize_text_field($_POST['author']);
    $quantity = intval($_POST['quantity']);
    $available = intval($_POST['available']);

    $updated = $wpdb->update(
        $table_name,
        [
            'isbn' => $isbn,
            'title' => $title,
            'author' => $author,
            'quantity' => $quantity,
            'available' => $available
        ],
        ['book_id' => $book_id],
        ['%s', '%s', '%s', '%d', '%d'],
        ['%s']
    );

    if ($updated === false) {
        wp_send_json_error(['message' => 'Failed to update book: ' . $wpdb->last_error]);
    }

    wp_send_json_success(['message' => 'Book updated successfully']);
}

// Library Delete Form AJAX Handler
add_action('wp_ajax_su_p_library_delete_form', 'su_p_library_delete_form');
function su_p_library_delete_form() {
    // if (!is_user_logged_in() || !is_super_admin()) {
    //     wp_send_json_error(['message' => 'Access denied']);
    // }
    check_ajax_referer('delete_book_' . sanitize_text_field($_POST['book_id']), 'nonce');

    global $wpdb;
    $book_id = sanitize_text_field($_POST['book_id']);
    $book = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}library WHERE book_id = %s", $book_id));

    if (!$book) {
        wp_send_json_error(['message' => 'Book not found']);
    }

    ob_start();
    ?>
    <p>Are you sure you want to delete the following book?</p>
    <ul>
        <li><strong>ID:</strong> <?php echo esc_html($book->book_id); ?></li>
        <li><strong>ISBN:</strong> <?php echo esc_html($book->isbn); ?></li>
        <li><strong>Title:</strong> <?php echo esc_html($book->title); ?></li>
        <li><strong>Author:</strong> <?php echo esc_html($book->author); ?></li>
        <li><strong>Quantity:</strong> <?php echo esc_html($book->quantity); ?></li>
        <li><strong>Available:</strong> <?php echo esc_html($book->available); ?></li>
    </ul>
    <?php
    wp_send_json_success(['confirm_html' => ob_get_clean()]);
}
// Library Delete AJAX Handler
add_action('wp_ajax_su_p_delete_library_book', 'su_p_delete_library_book');
function su_p_delete_library_book() {
    global $wpdb;
    check_ajax_referer('delete_book_' . sanitize_text_field($_POST['book_id']), 'nonce');

    $book_id = sanitize_text_field($_POST['book_id']);
    $deleted = $wpdb->delete($wpdb->prefix . 'library', ['book_id' => $book_id], ['%s']);

    if ($deleted === false || $deleted === 0) {
        wp_send_json_error(['message' => 'Failed to delete book']);
    }

    wp_send_json_success(['message' => 'Book deleted successfully']);
}

// Library Transaction Form AJAX Handler
add_action('wp_ajax_su_p_library_transaction_form', 'su_p_library_transaction_form');
function su_p_library_transaction_form() {
    // if (!is_user_logged_in() || !is_super_admin()) {
    //     wp_send_json_error(['message' => 'Access denied']);
    // }
    check_ajax_referer('transact_book_' . sanitize_text_field($_POST['book_id']), 'nonce');

    global $wpdb;
    $book_id = sanitize_text_field($_POST['book_id']);
    $book = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}library WHERE book_id = %s", $book_id));

    if (!$book) {
        wp_send_json_error(['message' => 'Book not found']);
    }

    $students = get_posts([
        'post_type' => 'students',
        'posts_per_page' => -1,
        'meta_query' => [['key' => 'educational_center_id', 'value' => $book->education_center_id, 'compare' => '=']]
    ]);
    $staff = $wpdb->get_results($wpdb->prepare(
        "SELECT staff_id, name FROM {$wpdb->prefix}staff WHERE education_center_id = %s",
        $book->education_center_id
    ));

    ob_start();
    ?>
    <form id="library-transaction-form" class="needs-validation" novalidate>
        <div class="mb-3">
            <label for="user_select_<?php echo esc_attr($book_id); ?>" class="form-label fw-bold">Select User (Optional)</label>
            <select name="user_select" id="user_select_<?php echo esc_attr($book_id); ?>" class="form-select select2-transact" style="width: 100%;">
                <option value="" selected>Select a student or staff member</option>
                <optgroup label="Students">
                    <?php foreach ($students as $student) {
                        $student_id = get_field('student_id', $student->ID);
                        if ($student_id) {
                            echo '<option value="' . esc_attr($student_id) . '" data-type="Student">' . esc_html($student_id . ' - ' . $student->post_title) . '</option>';
                        }
                    } ?>
                </optgroup>
                <optgroup label="Staff">
                    <?php foreach ($staff as $staff_member) {
                        echo '<option value="' . esc_attr($staff_member->staff_id) . '" data-type="Staff">' . esc_html($staff_member->staff_id . ' - ' . $staff_member->name) . '</option>';
                    } ?>
                </optgroup>
            </select>
        </div>
        <div class="mb-3">
            <label for="user_id" class="form-label fw-bold">User ID</label>
            <input type="text" name="user_id" id="user_id" class="form-control" placeholder="Enter User ID or select from above" required>
        </div>
        <div class="mb-3">
            <label for="user_type" class="form-label fw-bold">User Type</label>
            <select name="user_type" id="user_type" class="form-control" required>
                <option value="" disabled selected>Select user type</option>
                <option value="Student">Student</option>
                <option value="Staff">Staff</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="due_date" class="form-label fw-bold">Due Date</label>
            <input type="datetime-local" name="due_date" id="due_date" class="form-control" min="<?php echo date('Y-m-d\TH:i', current_time('timestamp')); ?>" required>
        </div>
        <input type="hidden" name="book_id" value="<?php echo esc_attr($book_id); ?>">
        <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('library_transaction_nonce'); ?>">
    </form>
    <script>
    jQuery(document).ready(function($) {
        var $select = $('#user_select_<?php echo esc_js($book_id); ?>');
        if ($select.hasClass('select2-hidden-accessible')) { $select.select2('destroy'); }
        $select.select2({
            placeholder: 'Search for a student or staff member...',
            allowClear: true,
            width: '100%',
            dropdownParent: $('#transactBookModal')
        });
        $select.on('change', function() {
            var userId = $(this).val();
            if (userId) {
                var $selectedOption = $(this).find(':selected');
                var userType = $selectedOption.data('type');
                $('#user_id').val(userId);
                $('#user_type').val(userType);
            } else {
                $('#user_id').val('');
                $('#user_type').val('');
            }
        });
        $('#user_id').on('input', function() { $select.val(null).trigger('change'); });
    });
    </script>
    <?php
    wp_send_json_success(['form_html' => ob_get_clean()]);
}

// Library Transaction AJAX Handler
add_action('wp_ajax_su_p_process_library_transaction', 'su_p_process_library_transaction');
function su_p_process_library_transaction() {
    global $wpdb;
    check_ajax_referer('library_transaction_nonce', 'nonce');

    $library_table = $wpdb->prefix . 'library';
    $trans_table = $wpdb->prefix . 'library_transactions';

    $book_id = sanitize_text_field($_POST['book_id']);
    $user_id = sanitize_text_field($_POST['user_id']);
    $user_type = sanitize_text_field($_POST['user_type']);
    $due_date = sanitize_text_field($_POST['due_date']);

    if (empty($book_id) || empty($user_id) || empty($user_type) || empty($due_date)) {
        wp_send_json_error(['message' => 'Missing required fields']);
    }

    if (!in_array($user_type, ['Student', 'Staff'])) {
        wp_send_json_error(['message' => 'Invalid user type']);
    }

    $due_timestamp = strtotime($due_date);
    $current_timestamp = current_time('timestamp');
    if ($due_timestamp <= $current_timestamp) {
        wp_send_json_error(['message' => 'Due date must be in the future']);
    }
    $due_date_mysql = date('Y-m-d H:i:s', $due_timestamp);

    $book = $wpdb->get_row($wpdb->prepare("SELECT * FROM $library_table WHERE book_id = %s", $book_id));
    if (!$book || $book->available <= 0) {
        wp_send_json_error(['message' => 'No copies available to borrow']);
    }

    $wpdb->insert(
        $trans_table,
        [
            'book_id' => $book_id,
            'user_id' => $user_id,
            'user_type' => $user_type,
            'issue_date' => current_time('mysql'),
            'due_date' => $due_date_mysql,
            'return_date' => null,
            'fine' => 0.00
        ],
        ['%s', '%s', '%s', '%s', '%s', '%s', '%f']
    );

    $new_available = $book->available - 1;
    $wpdb->update($library_table, ['available' => $new_available], ['book_id' => $book_id], ['%d'], ['%s']);

    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Failed to process transaction: ' . $wpdb->last_error]);
    }

    wp_send_json_success(['message' => 'Transaction processed successfully']);
}

// Library Transactions Shortcode
function su_p_library_transactions_shortcode() {
    // if (!is_user_logged_in() || !is_super_admin()) {
    //     return '<p>Access denied.</p>';
    // }

    ob_start();
    ?>
    <div class="card shadow-lg" style="margin: 20px auto; border: 3px solid #007bff; background: #fff;">
        <div class="card-header bg-primary text-white text-center" style="border-radius: 10px 10px 0 0;">
            <h3 class="card-title mb-0"><i class="bi bi-list-ul me-2"></i>Library Transactions</h3>
        </div>
        <div class="card-body p-4">
            <div id="su-p-transactions-content"></div>
        </div>
    </div>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const $content = document.getElementById('su-p-transactions-content');
        const ajaxUrl = '<?php echo admin_url('admin-ajax.php'); ?>';

        function loadTransactions() {
            $content.innerHTML = '<p>Loading...</p>';
            const data = new FormData();
            data.append('action', 'su_p_library_transactions');
            data.append('nonce', '<?php echo wp_create_nonce('su_p_library_transactions'); ?>');

            fetch(ajaxUrl, { method: 'POST', body: data })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        $content.innerHTML = data.data;
                        attachTransactionHandlers();
                    } else {
                        $content.innerHTML = '<div class="alert alert-danger">' + (data.data.message || 'Error loading transactions') + '</div>';
                    }
                })
                .catch(error => {
                    $content.innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
                });
        }

        loadTransactions();
    });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('su_p_library_transactions', 'su_p_library_transactions_shortcode');
// Library Transactions AJAX Handler
add_action('wp_ajax_su_p_library_transactions', 'su_p_library_transactions');
function su_p_library_transactions() {
    // if (!is_user_logged_in() || !is_super_admin()) {
    //     wp_send_json_error(['message' => 'Access denied']);
    // }
    check_ajax_referer('su_p_library_transactions', 'nonce');

    global $wpdb;
    $trans_table = $wpdb->prefix . 'library_transactions';
    $library_table = $wpdb->prefix . 'library';
    $transactions = $wpdb->get_results("SELECT t.*, l.title, l.education_center_id 
        FROM $trans_table t 
        JOIN $library_table l ON t.book_id = l.book_id 
        ORDER BY t.issue_date DESC");

    ob_start();
    ?>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead style="background: #e6f3ff;">
                <tr>
                    <th>Book ID</th>
                    <th>Title</th>
                    <th>User ID</th>
                    <th>User Type</th>
                    <th>Issue Date</th>
                    <th>Due Date</th>
                    <th>Return Date</th>
                    <th>Fine</th>
                    <th>Center ID</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php
                if (empty($transactions)) {
                    echo '<tr><td colspan="10" class="text-center py-4">No transactions recorded.</td></tr>';
                } else {
                    foreach ($transactions as $trans) {
                        $is_overdue = !$trans->return_date && strtotime($trans->due_date) < current_time('timestamp');
                        $days_overdue = $is_overdue ? max(0, (current_time('timestamp') - strtotime($trans->due_date)) / (60 * 60 * 24)) : 0;
                        $potential_fine = $days_overdue * 0.50;

                        echo '<tr>';
                        echo '<td>' . esc_html($trans->book_id) . '</td>';
                        echo '<td>' . esc_html($trans->title) . '</td>';
                        echo '<td>' . esc_html($trans->user_id) . '</td>';
                        echo '<td>' . esc_html($trans->user_type) . '</td>';
                        echo '<td>' . esc_html($trans->issue_date) . '</td>';
                        echo '<td>' . esc_html($trans->due_date) . '</td>';
                        echo '<td>' . ($trans->return_date ? esc_html($trans->return_date) : '<span class="badge bg-warning">Pending</span>') . '</td>';
                        echo '<td>' . ($trans->return_date ? number_format($trans->fine, 2) : ($is_overdue ? number_format($potential_fine, 2) . ' (Pending)' : '0.00')) . '</td>';
                        echo '<td>' . esc_html($trans->education_center_id) . '</td>';
                        echo '<td>';
                        if (!$trans->return_date) {
                            echo '<button class="btn btn-sm btn-primary return-book-btn" 
                                    data-transaction-id="' . esc_attr($trans->transaction_id) . '" 
                                    data-book-id="' . esc_attr($trans->book_id) . '" 
                                    data-user-id="' . esc_attr($trans->user_id) . '" 
                                    data-nonce="' . wp_create_nonce('return_book_' . $trans->transaction_id) . '">Return</button>';
                        }
                        echo '</td>';
                        echo '</tr>';
                    }
                }
                ?>
            </tbody>
        </table>
    </div>
    <?php
    wp_send_json_success(ob_get_clean());
}

// Library Return Form AJAX Handler
add_action('wp_ajax_su_p_library_return_form', 'su_p_library_return_form');
function su_p_library_return_form() {
    // if (!is_user_logged_in() || !is_super_admin()) {
    //     wp_send_json_error(['message' => 'Access denied']);
    // }
    check_ajax_referer('return_book_' . sanitize_text_field($_POST['transaction_id']), 'nonce');

    global $wpdb;
    $transaction_id = sanitize_text_field($_POST['transaction_id']);
    $book_id = sanitize_text_field($_POST['book_id']);
    $user_id = sanitize_text_field($_POST['user_id']);
    $trans = $wpdb->get_row($wpdb->prepare(
        "SELECT t.*, l.title FROM {$wpdb->prefix}library_transactions t 
         JOIN {$wpdb->prefix}library l ON t Lists.t.book_id = l.book_id 
         WHERE t.transaction_id = %d AND t.book_id = %s AND t.user_id = %s AND t.return_date IS NULL",
        $transaction_id, $book_id, $user_id
    ));

    if (!$trans) {
        wp_send_json_error(['message' => 'Transaction not found or already returned']);
    }

    ob_start();
    ?>
    <p>Are you sure you want to return the following book?</p>
    <ul>
        <li><strong>Book ID:</strong> <?php echo esc_html($trans->book_id); ?></li>
        <li><strong>Title:</strong> <?php echo esc_html($trans->title); ?></li>
        <li><strong>User ID:</strong> <?php echo esc_html($trans->user_id); ?></li>
        <li><strong>User Type:</strong> <?php echo esc_html($trans->user_type); ?></li>
        <li><strong>Issue Date:</strong> <?php echo esc_html($trans->issue_date); ?></li>
        <li><strong>Due Date:</strong> <?php echo esc_html($trans->due_date); ?></li>
    </ul>
    <?php
    wp_send_json_success(['confirm_html' => ob_get_clean()]);
}
// Library Return AJAX Handler
add_action('wp_ajax_su_p_process_book_return', 'su_p_process_book_return');
function su_p_process_book_return() {
    global $wpdb;
    check_ajax_referer('return_book_' . sanitize_text_field($_POST['transaction_id']), 'nonce');

    $trans_table = $wpdb->prefix . 'library_transactions';
    $library_table = $wpdb->prefix . 'library';

    $transaction_id = sanitize_text_field($_POST['transaction_id']);
    $book_id = sanitize_text_field($_POST['book_id']);
    $user_id = sanitize_text_field($_POST['user_id']);

    $trans = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM $trans_table WHERE transaction_id = %d AND book_id = %s AND user_id = %s AND return_date IS NULL",
        $transaction_id, $book_id, $user_id
    ));

    if (!$trans) {
        wp_send_json_error(['message' => 'No active borrowing record found']);
    }

    $return_date = current_time('mysql');
    $days_overdue = max(0, (strtotime($return_date) - strtotime($trans->due_date)) / (60 * 60 * 24));
    $fine = $days_overdue * 0.50;

    $wpdb->update(
        $trans_table,
        ['return_date' => $return_date, 'fine' => $fine],
        ['transaction_id' => $transaction_id],
        ['%s', '%f'],
        ['%d']
    );

    $book = $wpdb->get_row($wpdb->prepare("SELECT available FROM $library_table WHERE book_id = %s", $book_id));
    $new_available = $book->available + 1;
    $wpdb->update($library_table, ['available' => $new_available], ['book_id' => $book_id], ['%d'], ['%s']);

    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Failed to process return: ' . $wpdb->last_error]);
    }

    wp_send_json_success(['message' => 'Book returned successfully']);
}

// Library Overdue Shortcode
function su_p_library_overdue_shortcode() {
    ob_start();
    ?>
    <div class="card shadow-lg" style="margin: 20px auto; border: 3px solid #dc3545; background: #ffe6e6;">
        <div class="card-header bg-danger text-white text-center" style="border-radius: 10px 10px 0 0;">
            <h3 class="card-title mb-0"><i class="bi bi-book me-2"></i>Borrowed Books</h3>
        </div>
        <div class="card-body p-4">
            <div id="su-p-overdue-content"></div>
        </div>
    </div>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const $content = document.getElementById('su-p-overdue-content');
        const ajaxUrl = '<?php echo admin_url('admin-ajax.php'); ?>';

        function loadBorrowed() {
            $content.innerHTML = '<p>Loading borrowed books...</p>';
            const data = new FormData();
            data.append('action', 'su_p_library_overdue');
            data.append('nonce', '<?php echo wp_create_nonce('su_p_library_overdue'); ?>');

            fetch(ajaxUrl, { method: 'POST', body: data })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        $content.innerHTML = data.data.html;
                    } else {
                        $content.innerHTML = '<div class="alert alert-danger">' + (data.data?.message || 'Error loading borrowed books') + '</div>';
                    }
                })
                .catch(error => {
                    $content.innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
                    console.error('Fetch error:', error);
                });
        }

        $content.addEventListener('click', function(e) {
            const button = e.target.closest('.return-book-btn');
            if (button) {
                const transactionId = button.getAttribute('data-transaction-id');
                if (confirm('Mark this book as returned?')) {
                    const data = new FormData();
                    data.append('action', 'su_p_library_return_book');
                    data.append('transaction_id', transactionId);
                    data.append('nonce', '<?php echo wp_create_nonce('su_p_library_return'); ?>');

                    fetch(ajaxUrl, { method: 'POST', body: data })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('Book marked as returned.');
                                loadBorrowed();
                            } else {
                                alert('Error: ' + (data.data?.message || 'Failed to return book'));
                            }
                        })
                        .catch(error => {
                            alert('Error: ' + error.message);
                            console.error('Return error:', error);
                        });
                }
            }
        });

        loadBorrowed();
    });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('su_p_library_overdue', 'su_p_library_overdue_shortcode');
add_action('wp_ajax_su_p_library_overdue', 'su_p_library_overdue');
function su_p_library_overdue() {
    check_ajax_referer('su_p_library_overdue', 'nonce');

    global $wpdb;
    $trans_table = $wpdb->prefix . 'library_transactions';
    $library_table = $wpdb->prefix . 'library';
    $current_time = current_time('mysql');
    $borrowed = $wpdb->get_results(
        "SELECT t.*, l.title, l.education_center_id 
         FROM $trans_table t 
         JOIN $library_table l ON t.book_id = l.book_id 
         WHERE t.return_date IS NULL"
    );

    if ($wpdb->last_error) {
        wp_send_json_error(['message' => 'Database error: ' . $wpdb->last_error]);
    }

    ob_start();
    ?>
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead style="background: #ffcccc;">
                <tr>
                    <th>Book ID</th>
                    <th>Title</th>
                    <th>User ID</th>
                    <th>User Name</th>
                    <th>User Type</th>
                    <th>Issue Date</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Days Overdue</th>
                    <th>Fine ($)</th>
                    <th>Center ID</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php
                if (empty($borrowed)) {
                    echo '<tr><td colspan="12" class="text-center py-4">No borrowed books found.</td></tr>';
                } else {
                    foreach ($borrowed as $item) {
                        $days_overdue = max(0, floor((strtotime($current_time) - strtotime($item->due_date)) / (60 * 60 * 24)));
                        $fine = $days_overdue * 0.50;
                        $status = $days_overdue > 0 ? 'Overdue' : 'Borrowed';

                        $user_name = 'Unknown';
                        if ($item->user_type === 'Student') {
                            $student = get_posts([
                                'post_type' => 'student',
                                'meta_key' => 'student_id',
                                'meta_value' => $item->user_id,
                                'posts_per_page' => 1
                            ]);
                            if (!empty($student)) {
                                $user_name = get_the_title($student[0]->ID);
                            }
                        } elseif ($item->user_type === 'Staff') {
                            $staff_table = $wpdb->prefix . 'staff';
                            $staff = $wpdb->get_row($wpdb->prepare(
                                "SELECT name FROM $staff_table WHERE staff_id = %s",
                                $item->user_id
                            ));
                            if ($staff) {
                                $user_name = $staff->name;
                            }
                        }

                        echo '<tr' . ($days_overdue > 0 ? ' class="table-danger"' : '') . '>';
                        echo '<td>' . esc_html($item->book_id) . '</td>';
                        echo '<td>' . esc_html($item->title) . '</td>';
                        echo '<td>' . esc_html($item->user_id) . '</td>';
                        echo '<td>' . esc_html($user_name) . '</td>';
                        echo '<td>' . esc_html($item->user_type) . '</td>';
                        echo '<td>' . esc_html($item->issue_date) . '</td>';
                        echo '<td>' . esc_html($item->due_date) . '</td>';
                        echo '<td>' . esc_html($status) . '</td>';
                        echo '<td>' . esc_html($days_overdue) . '</td>';
                        echo '<td>' . number_format($fine, 2) . '</td>';
                        echo '<td>' . esc_html($item->education_center_id) . '</td>';
                        echo '<td><button class="btn btn-sm btn-primary return-book-btn" data-transaction-id="' . esc_attr($item->transaction_id) . '">Return</button></td>';
                        echo '</tr>';
                    }
                }
                ?>
            </tbody>
        </table>
    </div>
    <?php
    $output = ob_get_clean();
    wp_send_json_success(['html' => $output]);
}
add_action('wp_ajax_su_p_library_return_book', 'su_p_library_return_book');
function su_p_library_return_book() {
    check_ajax_referer('su_p_library_return', 'nonce');
    global $wpdb;

    $transaction_id = sanitize_text_field($_POST['transaction_id'] ?? '');
    error_log('Return attempt for transaction_id: ' . $transaction_id);

    if (empty($transaction_id)) {
        error_log('Error: Invalid transaction ID');
        wp_send_json_error(['message' => 'Invalid transaction ID']);
    }

    $trans_table = $wpdb->prefix . 'library_transactions';
    $library_table = $wpdb->prefix . 'library';

    // Fetch book_id from transactions
    $transaction = $wpdb->get_row($wpdb->prepare(
        "SELECT book_id FROM $trans_table WHERE transaction_id = %d AND return_date IS NULL",
        $transaction_id
    ));

    if (!$transaction) {
        error_log('Error: Transaction not found or already returned for ID ' . $transaction_id);
        wp_send_json_error(['message' => 'Transaction not found or already returned']);
    }

    // Fetch education_center_id from wp_library
    $center_info = $wpdb->get_row($wpdb->prepare(
        "SELECT education_center_id FROM $library_table WHERE book_id = %s",
        $transaction->book_id
    ));

    if (!$center_info) {
        error_log('Error: Book not found in library for book_id ' . $transaction->book_id);
        wp_send_json_error(['message' => 'Book not found in library']);
    }

    // Update return_date
    $result = $wpdb->update(
        $trans_table,
        ['return_date' => current_time('mysql')],
        ['transaction_id' => $transaction_id],
        ['%s'],
        ['%d']
    );

    if ($result === false) {
        error_log('Error: Failed to update return date - ' . $wpdb->last_error);
        wp_send_json_error(['message' => 'Failed to update return date: ' . $wpdb->last_error]);
    }

    // Update availability in wp_library
    $wpdb->query($wpdb->prepare(
        "UPDATE $library_table SET available = available + 1 WHERE book_id = %s AND education_center_id = %s",
        $transaction->book_id,
        $center_info->education_center_id
    ));

    if ($wpdb->last_error) {
        error_log('Error: Failed to update book availability - ' . $wpdb->last_error);
        wp_send_json_error(['message' => 'Failed to update book availability: ' . $wpdb->last_error]);
    }

    error_log('Success: Book returned for transaction_id ' . $transaction_id);
    wp_send_json_success(['message' => 'Book returned successfully']);
}

// JavaScript Handlers for Modals (Added to Dashboard)
add_action('wp_footer', 'su_p_library_modal_handlers');
function su_p_library_modal_handlers() {
    // Note: Keeping this check as is unless you confirm it should be commented out too
    if (!is_user_logged_in() || !is_super_admin()) return;
    ?>
    <script>
    function attachEditFormHandler(bookId) {
        const form = document.getElementById('edit-book-form-container').querySelector('#edit-library-form');
        const updateButton = document.querySelector('.update-book-btn');
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                updateButton.disabled = true;
                updateButton.textContent = 'Updating...';

                const formData = new FormData(this);
                formData.append('action', 'su_p_edit_library_book');

                fetch('<?php echo admin_url('admin-ajax.php'); ?>', { method: 'POST', body: formData })
                    .then(response => response.json())
                    .then(data => {
                        const container = document.getElementById('edit-book-form-container');
                        if (data.success) {
                            container.innerHTML = '<div class="alert alert-success">Book updated successfully!</div>';
                            setTimeout(() => {
                                document.getElementById('editBookModal').style.display = 'none';
                                document.getElementById('su-p-dashboard-content').innerHTML = '';
                                loadDashboard();
                            }, 1500);
                        } else {
                            container.innerHTML = '<div class="alert alert-danger">' + (data.data.message || 'Error updating book') + '</div>';
                            updateButton.disabled = false;
                            updateButton.textContent = 'Update Book';
                        }
                    })
                    .catch(error => {
                        document.getElementById('edit-book-form-container').innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
                        updateButton.disabled = false;
                        updateButton.textContent = 'Update Book';
                    });
            });
            updateButton.onclick = () => form.dispatchEvent(new Event('submit'));
        }
    }

    function attachDeleteHandler(bookId, nonce) {
        const confirmButton = document.querySelector('.confirm-delete-btn');
        confirmButton.onclick = function() {
            confirmButton.disabled = true;
            confirmButton.textContent = 'Deleting...';

            const data = new FormData();
            data.append('action', 'su_p_delete_library_book');
            data.append('book_id', bookId);
            data.append('nonce', nonce);

            fetch('<?php echo admin_url('admin-ajax.php'); ?>', { method: 'POST', body: data })
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('delete-book-container');
                    if (data.success) {
                        container.innerHTML = '<div class="alert alert-success">Book deleted successfully!</div>';
                        setTimeout(() => {
                            document.getElementById('deleteBookModal').style.display = 'none';
                            document.getElementById('su-p-dashboard-content').innerHTML = '';
                            loadDashboard();
                        }, 1500);
                    } else {
                        container.innerHTML = '<div class="alert alert-danger">' + (data.data.message || 'Error deleting book') + '</div>';
                        confirmButton.disabled = false;
                        confirmButton.textContent = 'Delete';
                    }
                })
                .catch(error => {
                    document.getElementById('delete-book-container').innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
                    confirmButton.disabled = false;
                    confirmButton.textContent = 'Delete';
                });
        };
    }

    function attachTransactionFormHandler(bookId) {
        const form = document.getElementById('transact-book-form-container').querySelector('#library-transaction-form');
        const processButton = document.querySelector('.process-transaction-btn');
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                processButton.disabled = true;
                processButton.textContent = 'Processing...';

                const formData = new FormData(this);
                formData.append('action', 'su_p_process_library_transaction');

                fetch('<?php echo admin_url('admin-ajax.php'); ?>', { method: 'POST', body: formData })
                    .then(response => response.json())
                    .then(data => {
                        const container = document.getElementById('transact-book-form-container');
                        if (data.success) {
                            container.innerHTML = '<div class="alert alert-success">Transaction processed successfully!</div>';
                            setTimeout(() => {
                                document.getElementById('transactBookModal').style.display = 'none';
                                document.getElementById('su-p-dashboard-content').innerHTML = '';
                                loadDashboard();
                            }, 1500);
                        } else {
                            container.innerHTML = '<div class="alert alert-danger">' + (data.data.message || 'Error processing transaction') + '</div>';
                            processButton.disabled = false;
                            processButton.textContent = 'Process';
                        }
                    })
                    .catch(error => {
                        document.getElementById('transact-book-form-container').innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
                        processButton.disabled = false;
                        processButton.textContent = 'Process';
                    });
            });
            processButton.onclick = () => form.dispatchEvent(new Event('submit'));
        }
    }

    function attachTransactionHandlers() {
        document.querySelectorAll('.return-book-btn').forEach(button => {
            button.addEventListener('click', function() {
                const transactionId = this.getAttribute('data-transaction-id');
                const bookId = this.getAttribute('data-book-id');
                const userId = this.getAttribute('data-user-id');
                const nonce = this.getAttribute('data-nonce');
                document.getElementById('edu-loader').style.display = 'flex';

                const data = new FormData();
                data.append('action', 'su_p_library_return_form');
                data.append('transaction_id', transactionId);
                data.append('book_id', bookId);
                data.append('user_id', userId);
                data.append('nonce', nonce);

                fetch('<?php echo admin_url('admin-ajax.php'); ?>', { method: 'POST', body: data })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById('return-book-container').innerHTML = data.data.confirm_html;
                            document.getElementById('returnBookModal').style.display = 'block';
                            attachReturnHandler(transactionId, bookId, userId, nonce);
                        } else {
                            alert('Error: ' + (data.data.message || 'Unable to load return form'));
                        }
                        document.getElementById('edu-loader').style.display = 'none';
                    })
                    .catch(error => {
                        alert('Error: ' + error.message);
                        document.getElementById('edu-loader').style.display = 'none';
                    });
            });
        });
    }

    function attachReturnHandler(transactionId, bookId, userId, nonce) {
        const confirmButton = document.querySelector('.confirm-return-btn');
        confirmButton.onclick = function() {
            confirmButton.disabled = true;
            confirmButton.textContent = 'Returning...';

            const data = new FormData();
            data.append('action', 'su_p_process_book_return');
            data.append('transaction_id', transactionId);
            data.append('book_id', bookId);
            data.append('user_id', userId);
            data.append('nonce', nonce);

            fetch('<?php echo admin_url('admin-ajax.php'); ?>', { method: 'POST', body: data })
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('return-book-container');
                    if (data.success) {
                        container.innerHTML = '<div class="alert alert-success">Book returned successfully!</div>';
                        setTimeout(() => {
                            document.getElementById('returnBookModal').style.display = 'none';
                            document.getElementById('su-p-transactions-content').innerHTML = '';
                            loadTransactions();
                        }, 1500);
                    } else {
                        container.innerHTML = '<div class="alert alert-danger">' + (data.data.message || 'Error returning book') + '</div>';
                        confirmButton.disabled = false;
                        confirmButton.textContent = 'Return Book';
                    }
                })
                .catch(error => {
                    document.getElementById('return-book-container').innerHTML = '<div class="alert alert-danger">Error: ' + error.message + '</div>';
                    confirmButton.disabled = false;
                    confirmButton.textContent = 'Return Book';
                });
        };
    }
    </script>
    <?php
}
function render_su_p_library_add_form() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'library';

    // Fetch educational centers
    $centers = get_posts([
        'post_type' => 'educational-center',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    // Initialize variables
    $message = '';
    $book_id = '';
    $existing_books = $wpdb->get_results("SELECT * FROM $table_name ORDER BY book_id DESC");

    // Handle form submission (non-AJAX for adding book)
    if (isset($_POST['su_p_add_library_book']) && check_admin_referer('su_p_library_add', 'nonce')) {
        $education_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
        $isbn = sanitize_text_field($_POST['isbn'] ?? '');
        $title = sanitize_text_field($_POST['title'] ?? '');
        $author = sanitize_text_field($_POST['author'] ?? '');
        $quantity = intval($_POST['quantity'] ?? 0);
        $book_id = sanitize_text_field($_POST['book_id'] ?? '');

        if (empty($education_center_id) || empty($title) || empty($author) || $quantity < 0 || empty($book_id)) {
            $message = '<div class="message alert-danger">Invalid input data. All fields except ISBN are required, and quantity must be non-negative.</div>';
        } else {
            // Check if book ID already exists
            $exists = $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM $table_name WHERE book_id = %s AND education_center_id = %s",
                $book_id,
                $education_center_id
            ));

            if ($exists === null) {
                $message = '<div class="message alert-danger">Database error: ' . esc_html($wpdb->last_error) . '</div>';
            } elseif ($exists > 0) {
                $message = '<div class="message alert-danger">Book ID already exists for this center.</div>';
            } else {
                // Insert the book
                $result = $wpdb->insert(
                    $table_name,
                    [
                        'book_id' => $book_id,
                        'isbn' => $isbn,
                        'title' => $title,
                        'author' => $author,
                        'quantity' => $quantity,
                        'available' => $quantity,
                        'education_center_id' => $education_center_id
                    ],
                    ['%s', '%s', '%s', '%s', '%d', '%d', '%s']
                );

                if ($result === false) {
                    $message = '<div class="message alert-danger">Failed to add book: ' . esc_html($wpdb->last_error) . '</div>';
                } else {
                    $message = '<div class="message alert-success">Book added successfully!</div>';
                    // Redirect to clear POST data and prevent duplicates
                    wp_redirect('su_p-dashboard?section=library&action=add-library');
                    exit;
                }
            }
        }
    }

    // Check if redirected after success
    if (isset($_GET['added']) && $_GET['added'] === '1') {
        $message = '<div class="message alert-success">Book added successfully!</div>';
    }

    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Add New Book</h2>
        <div id="add-book-message" style="padding: 15px; margin-bottom: 20px; border-radius: 5px;">
            <?php echo $message; ?>
        </div>
        <form id="standalone-add-book-form" method="post" class="needs-validation" novalidate>
            <table class="form-table">
                <tr>
                    <th scope="row"><label for="book_id">Book ID</label></th>
                    <td><input type="text" name="book_id" id="book_id" class="regular-text" value="<?php echo esc_attr($book_id); ?>" readonly placeholder="Select a center to generate"></td>
                </tr>
                <tr>
                    <th scope="row"><label for="edu_center_id">Educational Center</label></th>
                    <td>
                        <select name="education_center_id" id="edu_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php
                            if (empty($centers)) {
                                echo '<option value="">No centers available</option>';
                            } else {
                                foreach ($centers as $center) {
                                    $center_id = get_field('educational_center_id', $center->ID) ?: $center->ID;
                                    $selected = (isset($_POST['education_center_id']) && $_POST['education_center_id'] === $center_id) ? 'selected' : '';
                                    echo '<option value="' . esc_attr($center_id) . '" ' . $selected . '>' . esc_html($center->post_title) . '</option>';
                                }
                            }
                            ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><label for="isbn">ISBN</label></th>
                    <td><input type="text" name="isbn" id="isbn" class="regular-text" value="<?php echo esc_attr($_POST['isbn'] ?? ''); ?>" placeholder="Enter ISBN"></td>
                </tr>
                <tr>
                    <th scope="row"><label for="title">Title</label></th>
                    <td><input type="text" name="title" id="title" class="regular-text" value="<?php echo esc_attr($_POST['title'] ?? ''); ?>" required></td>
                </tr>
                <tr>
                    <th scope="row"><label for="author">Author</label></th>
                    <td><input type="text" name="author" id="author" class="regular-text" value="<?php echo esc_attr($_POST['author'] ?? ''); ?>" required></td>
                </tr>
                <tr>
                    <th scope="row"><label for="quantity">Quantity</label></th>
                    <td><input type="number" name="quantity" id="quantity" class="regular-text" value="<?php echo esc_attr($_POST['quantity'] ?? ''); ?>" min="0" required></td>
                </tr>
            </table>
            <?php wp_nonce_field('su_p_library_add', 'nonce'); ?>
            <input type="hidden" name="su_p_add_library_book" value="1">
            <p class="submit"><button type="submit" id="save-book" class="button-primary" disabled>Add Book</button></p>
        </form>
        <h3>Existing Books</h3>
        <table class="wp-list-table widefat fixed striped" id="add-book-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>ISBN</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Total</th>
                    <th>Available</th>
                    <th>Center ID</th>
                </tr>
            </thead>
            <tbody id="add-book-table-body">
                <?php
                if ($wpdb->last_error) {
                    echo '<tr><td colspan="7">Error loading books: ' . esc_html($wpdb->last_error) . '</td></tr>';
                } elseif (empty($existing_books)) {
                    echo '<tr><td colspan="7">No books found.</td></tr>';
                } else {
                    foreach ($existing_books as $book) {
                        echo '<tr>';
                        echo '<td>' . esc_html($book->book_id) . '</td>';
                        echo '<td>' . esc_html($book->isbn) . '</td>';
                        echo '<td>' . esc_html($book->title) . '</td>';
                        echo '<td>' . esc_html($book->author) . '</td>';
                        echo '<td>' . esc_html($book->quantity) . '</td>';
                        echo '<td>' . esc_html($book->available) . '</td>';
                        echo '<td>' . esc_html($book->education_center_id) . '</td>';
                        echo '</tr>';
                    }
                }
                ?>
            </tbody>
        </table>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const $eduCenterId = $('#edu_center_id');
        const $bookIdField = $('#book_id');
        const $saveButton = $('#save-book');
        const $message = $('#add-book-message');

        // Generate book ID on center selection
        $eduCenterId.on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_generate_book_id',
                        education_center_id: centerId,
                        nonce: '<?php echo wp_create_nonce('su_p_generate_book_id'); ?>'
                    },
                    success: function(response) {
                        if (response.success) {
                            $bookIdField.val(response.data.book_id);
                            $saveButton.prop('disabled', false);
                        } else {
                            $bookIdField.val('');
                            $saveButton.prop('disabled', true);
                            $message
                                .addClass('alert-danger')
                                .text('Error generating book ID: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function(xhr, status, error) {
                        $bookIdField.val('');
                        $saveButton.prop('disabled', true);
                        $message
                            .addClass('alert-danger')
                            .text('AJAX error: ' + error);
                        setTimeout(() => $message.text(''), 4000);
                    }
                });
            } else {
                $bookIdField.val('');
                $saveButton.prop('disabled', true);
            }
        });

        // Client-side form validation
        $('#standalone-add-book-form').on('submit', function(e) {
            if (!this.checkValidity()) {
                e.preventDefault();
                this.reportValidity();
                $message
                    .addClass('alert-danger')
                    .text('Please fill out all required fields correctly.');
                setTimeout(() => $message.text(''), 4000);
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('su_p_library_add_form', 'render_su_p_library_add_form');

// AJAX handler to generate book ID (your provided code)
add_action('wp_ajax_su_p_generate_book_id', 'su_p_generate_book_id');
function su_p_generate_book_id() {
    check_ajax_referer('su_p_generate_book_id', 'nonce');
    $education_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');

    if (empty($education_center_id)) {
        wp_send_json_error(['message' => 'No educational center selected']);
    }

    $book_id = get_unique_id_for_role('book', $education_center_id); // Assumes this function exists
    if (is_wp_error($book_id)) {
        wp_send_json_error(['message' => $book_id->get_error_message()]);
    }

    wp_send_json_success(['book_id' => $book_id]);
}

function render_su_p_library_edit_form() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'library';

    // Fetch educational centers
    $centers = get_posts([
        'post_type' => 'educational-center',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    // Fetch books
    $books = $wpdb->get_results("SELECT * FROM $table_name ORDER BY book_id DESC");

    // Handle form submission
    $message = '';
    if (isset($_POST['su_p_edit_library_book']) && check_admin_referer('su_p_library_edit', 'nonce')) {
        $book_id = sanitize_text_field($_POST['book_id'] ?? '');
        $education_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
        $isbn = sanitize_text_field($_POST['isbn'] ?? '');
        $title = sanitize_text_field($_POST['title'] ?? '');
        $author = sanitize_text_field($_POST['author'] ?? '');
        $quantity = intval($_POST['quantity'] ?? 0);
        $available = intval($_POST['available'] ?? 0);

        if (empty($book_id) || empty($education_center_id) || empty($title) || empty($author) || $quantity < 0 || $available < 0 || $available > $quantity) {
            $message = '<div class="message alert-danger">Invalid input data. All fields except ISBN are required, and quantities must be valid.</div>';
        } else {
            $result = $wpdb->update(
                $table_name,
                [
                    'education_center_id' => $education_center_id,
                    'isbn' => $isbn,
                    'title' => $title,
                    'author' => $author,
                    'quantity' => $quantity,
                    'available' => $available
                ],
                ['book_id' => $book_id],
                ['%s', '%s', '%s', '%s', '%d', '%d'],
                ['%s']
            );

            if ($result === false) {
                $message = '<div class="message alert-danger">Failed to update book: ' . esc_html($wpdb->last_error) . '</div>';
            } else {
                $message = '<div class="message alert-success">Book updated successfully!</div>';
                wp_redirect($_SERVER['REQUEST_URI']);
                exit;
            }
        }
    }

    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Edit Books</h2>
        <div id="edit-book-message" style="padding: 15px; margin-bottom: 20px; border-radius: 5px;">
            <?php echo $message; ?>
        </div>
        <table class="wp-list-table widefat fixed striped" id="edit-book-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>ISBN</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Total</th>
                    <th>Available</th>
                    <th>Center ID</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-book-table-body">
                <?php
                if ($wpdb->last_error) {
                    echo '<tr><td colspan="8">Error loading books: ' . esc_html($wpdb->last_error) . '</td></tr>';
                } elseif (empty($books)) {
                    echo '<tr><td colspan="8">No books found.</td></tr>';
                } else {
                    foreach ($books as $book) {
                        echo '<tr>';
                        echo '<td>' . esc_html($book->book_id) . '</td>';
                        echo '<td>' . esc_html($book->isbn) . '</td>';
                        echo '<td>' . esc_html($book->title) . '</td>';
                        echo '<td>' . esc_html($book->author) . '</td>';
                        echo '<td>' . esc_html($book->quantity) . '</td>';
                        echo '<td>' . esc_html($book->available) . '</td>';
                        echo '<td>' . esc_html($book->education_center_id) . '</td>';
                        echo '<td><button class="edit-book button" data-book-id="' . esc_attr($book->book_id) . '">Edit</button></td>';
                        echo '</tr>';
                    }
                }
                ?>
            </tbody>
        </table>

        <!-- Edit Book Modal -->
        <div class="modal" id="editBookModal" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background: rgba(0,0,0,0.5);">
            <div class="modal-content" style="background: #fff; margin: 15% auto; padding: 20px; border-radius: 10px; width: 90%; max-width: 600px; box-shadow: 0 5px 15px rgba(0,0,0,0.3);">
                <span class="modal-close" style="float: right; font-size: 24px; cursor: pointer;">×</span>
                <h3>Edit Book</h3>
                <form id="standalone-edit-book-form" method="post" class="needs-validation" novalidate>
                    <table class="form-table">
                        <tr>
                            <th scope="row"><label for="edit-book-id">Book ID</label></th>
                            <td><input type="text" name="book_id" id="edit-book-id" class="regular-text" readonly></td>
                        </tr>
                        <tr>
                            <th scope="row"><label for="edit-edu-center-id">Educational Center</label></th>
                            <td>
                                <select name="education_center_id" id="edit-edu-center-id" class="regular-text" required>
                                    <option value="">Select Center</option>
                                    <?php
                                    if (empty($centers)) {
                                        echo '<option value="">No centers available</option>';
                                    } else {
                                        foreach ($centers as $center) {
                                            $center_id = get_field('educational_center_id', $center->ID) ?: $center->ID;
                                            echo '<option value="' . esc_attr($center_id) . '">' . esc_html($center->post_title) . '</option>';
                                        }
                                    }
                                    ?>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row"><label for="edit-isbn">ISBN</label></th>
                            <td><input type="text" name="isbn" id="edit-isbn" class="regular-text" value="<?php echo esc_attr($_POST['isbn'] ?? ''); ?>"></td>
                        </tr>
                        <tr>
                            <th scope="row"><label for="edit-title">Title</label></th>
                            <td><input type="text" name="title" id="edit-title" class="regular-text" value="<?php echo esc_attr($_POST['title'] ?? ''); ?>" required></td>
                        </tr>
                        <tr>
                            <th scope="row"><label for="edit-author">Author</label></th>
                            <td><input type="text" name="author" id="edit-author" class="regular-text" value="<?php echo esc_attr($_POST['author'] ?? ''); ?>" required></td>
                        </tr>
                        <tr>
                            <th scope="row"><label for="edit-quantity">Quantity</label></th>
                            <td><input type="number" name="quantity" id="edit-quantity" class="regular-text" min="0" value="<?php echo esc_attr($_POST['quantity'] ?? ''); ?>" required></td>
                        </tr>
                        <tr>
                            <th scope="row"><label for="edit-available">Available</label></th>
                            <td><input type="number" name="available" id="edit-available" class="regular-text" min="0" value="<?php echo esc_attr($_POST['available'] ?? ''); ?>" required></td>
                        </tr>
                    </table>
                    <?php wp_nonce_field('su_p_library_edit', 'nonce'); ?>
                    <input type="hidden" name="su_p_edit_library_book" value="1">
                    <p class="submit">
                        <button type="submit" id="update-book" class="button-primary">Update Book</button>
                        <button type="button" class="button modal-close-btn">Cancel</button>
                    </p>
                </form>
            </div>
        </div>
    </div>
 
    <script>
    jQuery(document).ready(function($) {
        const $modal = $('#editBookModal');
        const $message = $('#edit-book-message');

        // Open modal and populate form
        $('#edit-book-table-body').on('click', '.edit-book', function() {
            const $row = $(this).closest('tr');
            $('#edit-book-id').val($row.find('td:eq(0)').text());
            $('#edit-isbn').val($row.find('td:eq(1)').text());
            $('#edit-title').val($row.find('td:eq(2)').text());
            $('#edit-author').val($row.find('td:eq(3)').text());
            $('#edit-quantity').val($row.find('td:eq(4)').text());
            $('#edit-available').val($row.find('td:eq(5)').text());
            $('#edit-edu-center-id').val($row.find('td:eq(6)').text());
            $modal.show();
        });

        // Close modal
        $('.modal-close, .modal-close-btn').on('click', function() {
            $modal.hide();
        });

        // Close modal on outside click
        $(window).on('click', function(e) {
            if (e.target === $modal[0]) {
                $modal.hide();
            }
        });

        // Form validation
        $('#standalone-edit-book-form').on('submit', function(e) {
            if (!this.checkValidity()) {
                e.preventDefault();
                this.reportValidity();
                $message
                    .addClass('alert-danger')
                    .text('Please fill out all required fields correctly.');
                setTimeout(() => $message.text(''), 4000);
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('su_p_library_edit_form', 'render_su_p_library_edit_form');
function render_su_p_library_delete_form() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'library';

    // Fetch books
    $books = $wpdb->get_results("SELECT * FROM $table_name ORDER BY book_id DESC");

    // Handle deletion submission
    $message = '';
    if (isset($_POST['su_p_delete_library_book']) && check_admin_referer('su_p_library_delete', 'nonce')) {
        $book_id = sanitize_text_field($_POST['book_id'] ?? '');

        if (empty($book_id)) {
            $message = '<div class="message alert-danger">Invalid book ID.</div>';
        } else {
            $result = $wpdb->delete(
                $table_name,
                ['book_id' => $book_id],
                ['%s']
            );

            if ($result === false) {
                $message = '<div class="message alert-danger">Failed to delete book: ' . esc_html($wpdb->last_error) . '</div>';
            } else {
                // Store success message in transient to display after redirect
                set_transient('su_p_delete_success', 'Book deleted successfully!', 10);
                wp_redirect($_SERVER['REQUEST_URI']);
                exit;
            }
        }
    }

    // Check for success message after redirect
    if ($success_message = get_transient('su_p_delete_success')) {
        $message = '<div class="message alert-success">' . esc_html($success_message) . '</div>';
        delete_transient('su_p_delete_success');
    }

    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Delete Books</h2>
        <div id="delete-book-message" style="padding: 15px; margin-bottom: 20px; border-radius: 5px;">
            <?php echo $message; ?>
        </div>
        <table class="wp-list-table widefat fixed striped" id="delete-book-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>ISBN</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Total</th>
                    <th>Available</th>
                    <th>Center ID</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-book-table-body">
                <?php
                if ($wpdb->last_error) {
                    echo '<tr><td colspan="8">Error loading books: ' . esc_html($wpdb->last_error) . '</td></tr>';
                } elseif (empty($books)) {
                    echo '<tr><td colspan="8">No books found.</td></tr>';
                } else {
                    foreach ($books as $book) {
                        echo '<tr>';
                        echo '<td>' . esc_html($book->book_id) . '</td>';
                        echo '<td>' . esc_html($book->isbn) . '</td>';
                        echo '<td>' . esc_html($book->title) . '</td>';
                        echo '<td>' . esc_html($book->author) . '</td>';
                        echo '<td>' . esc_html($book->quantity) . '</td>';
                        echo '<td>' . esc_html($book->available) . '</td>';
                        echo '<td>' . esc_html($book->education_center_id) . '</td>';
                        echo '<td><button class="delete-book button" data-book-id="' . esc_attr($book->book_id) . '">Delete</button></td>';
                        echo '</tr>';
                    }
                }
                ?>
            </tbody>
        </table>

        <!-- Delete Book Modal -->
        <div class="modal" id="deleteBookModal" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background: rgba(0,0,0,0.5);">
            <div class="modal-content" style="background: #fff; margin: 15% auto; padding: 20px; border-radius: 10px; width: 90%; max-width: 400px; box-shadow: 0 5px 15px rgba(0,0,0,0.3);">
                <span class="modal-close" style="float: right; font-size: 24px; cursor: pointer;">×</span>
                <h3>Confirm Deletion</h3>
                <p id="delete-book-text">Are you sure you want to delete this book?</p>
                <form id="standalone-delete-book-form" method="post">
                    <input type="hidden" name="book_id" id="delete-book-id">
                    <?php wp_nonce_field('su_p_library_delete', 'nonce'); ?>
                    <input type="hidden" name="su_p_delete_library_book" value="1">
                    <p class="submit" style="text-align: right;">
                        <button type="button" class="button modal-close-btn">Cancel</button>
                        <button type="submit" class="button-primary delete-confirm">Delete</button>
                    </p>
                </form>
            </div>
        </div>
    </div>
  
    <script>
    jQuery(document).ready(function($) {
        const $modal = $('#deleteBookModal');
        const $message = $('#delete-book-message');

        // Open modal and set book ID
        $('#delete-book-table-body').on('click', '.delete-book', function() {
            const bookId = $(this).data('book-id');
            $('#delete-book-id').val(bookId);
            $('#delete-book-text').text(`Are you sure you want to delete book "${bookId}"?`);
            $modal.show();
        });

        // Close modal
        $('.modal-close, .modal-close-btn').on('click', function() {
            $modal.hide();
        });

        // Close modal on outside click
        $(window).on('click', function(e) {
            if (e.target === $modal[0]) {
                $modal.hide();
            }
        });

        // Form submission validation
        $('#standalone-delete-book-form').on('submit', function(e) {
            if (!$(this).find('#delete-book-id').val()) {
                e.preventDefault();
                $message
                    .addClass('alert-danger')
                    .text('No book selected for deletion.');
                setTimeout(() => $message.removeClass('alert-danger').text(''), 4000);
            }
        });
    });
    </script>
    <?php
    $output = ob_get_clean();
    return $output;
}
add_shortcode('su_p_library_delete_form', 'render_su_p_library_delete_form');

function render_su_p_library_transaction_form() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'library_transactions';

    $centers = get_posts([
        'post_type' => 'educational-center',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    $message = '';
    if (isset($_POST['su_p_process_library_transaction']) && check_admin_referer('su_p_library_transaction', 'nonce')) {
        $education_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
        $book_id = sanitize_text_field($_POST['book_id'] ?? '');
        $user_id = sanitize_text_field($_POST['user_id'] ?? '');
        $user_type = sanitize_text_field($_POST['user_type'] ?? '');
        $due_date = sanitize_text_field($_POST['due_date'] ?? '');
        $return_date = !empty($_POST['return_date']) ? sanitize_text_field($_POST['return_date']) : null;

        if (empty($education_center_id) || empty($book_id) || empty($user_id) || empty($user_type) || empty($due_date)) {
            $message = '<div class="message alert-danger">All fields except return date are required.</div>';
        } else {
            $available = $wpdb->get_var($wpdb->prepare(
                "SELECT available FROM {$wpdb->prefix}library WHERE book_id = %s AND education_center_id = %s",
                $book_id,
                $education_center_id
            ));

            if ($available === null) {
                $message = '<div class="message alert-danger">Book not found.</div>';
            } elseif ($available <= 0) {
                $message = '<div class="message alert-danger">Book is not available for borrowing.</div>';
            } else {
                $data = [
                    'book_id' => $book_id,
                    'user_id' => $user_id, // Now uses student_id or staff_id
                    'user_type' => $user_type,
                    'issue_date' => current_time('mysql'),
                    'due_date' => $due_date
                  
                ];
                $formats = ['%s', '%s', '%s', '%s', '%s', '%s'];

                if ($return_date) {
                    $data['return_date'] = $return_date;
                    $formats[] = '%s';
                }

                $result = $wpdb->insert($table_name, $data, $formats);

                if ($result === false) {
                    $message = '<div class="message alert-danger">Failed to process transaction: ' . esc_html($wpdb->last_error) . '</div>';
                } else {
                    $update_result = $wpdb->update(
                        $wpdb->prefix . 'library',
                        ['available' => $available - 1],
                        ['book_id' => $book_id, 'education_center_id' => $education_center_id],
                        ['%d'],
                        ['%s', '%s']
                    );

                    if ($update_result === false) {
                        $message = '<div class="message alert-danger">Failed to update book availability: ' . esc_html($wpdb->last_error) . '</div>';
                        $wpdb->delete($table_name, ['book_id' => $book_id, 'user_id' => $user_id, 'issue_date' => current_time('mysql')], ['%s', '%s', '%s']);
                    } else {
                        set_transient('su_p_transaction_success', 'Book borrowed successfully!', 10);
                        wp_redirect($_SERVER['REQUEST_URI']);
                        exit;
                    }
                }
            }
        }
    }

    if ($success_message = get_transient('su_p_transaction_success')) {
        $message = '<div class="message alert-success">' . esc_html($success_message) . '</div>';
        delete_transient('su_p_transaction_success');
    }

    ob_start();
    ?>
    <div class="wrap" style="padding: 20px;">
        <h2>Borrow a Book</h2>
        <div id="transaction-message" style="padding: 15px; margin-bottom: 20px; border-radius: 5px;">
            <?php echo $message; ?>
        </div>
        <form id="standalone-transaction-form" method="post" class="needs-validation" novalidate>
            <table class="form-table">
                <tr>
                    <th scope="row"><label for="trans-center-id">Educational Center</label></th>
                    <td>
                        <select name="education_center_id" id="trans-center-id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php
                            if (empty($centers)) {
                                echo '<option value="">No centers available</option>';
                            } else {
                                foreach ($centers as $center) {
                                    $center_id = get_field('educational_center_id', $center->ID) ?: $center->ID;
                                    $selected = (isset($_POST['education_center_id']) && $_POST['education_center_id'] === $center_id) ? 'selected' : '';
                                    echo '<option value="' . esc_attr($center_id) . '" ' . $selected . '>' . esc_html($center->post_title) . '</option>';
                                }
                            }
                            ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><label for="trans-book-id">Book</label></th>
                    <td>
                        <select name="book_id" id="trans-book-id" class="regular-text" required>
                            <option value="">Select Book</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><label for="trans-user-id">User</label></th>
                    <td>
                        <select name="user_id" id="trans-user-id" class="regular-text" required>
                            <option value="">Select User</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><label for="trans-user-type">User Type</label></th>
                    <td>
                        <select name="user_type" id="trans-user-type" class="regular-text" required>
                            <option value="">Select Type</option>
                            <option value="Student" <?php echo (isset($_POST['user_type']) && $_POST['user_type'] === 'Student') ? 'selected' : ''; ?>>Student</option>
                            <option value="Staff" <?php echo (isset($_POST['user_type']) && $_POST['user_type'] === 'Staff') ? 'selected' : ''; ?>>Staff</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><label for="trans-due-date">Due Date</label></th>
                    <td><input type="datetime-local" name="due_date" id="trans-due-date" class="regular-text" min="<?php echo esc_attr(date('Y-m-d\TH:i', current_time('timestamp'))); ?>" value="<?php echo esc_attr($_POST['due_date'] ?? ''); ?>" required></td>
                </tr>
                <tr>
                    <th scope="row"><label for="trans-return-date">Return Date (Optional)</label></th>
                    <td><input type="datetime-local" name="return_date" id="trans-return-date" class="regular-text" min="<?php echo esc_attr(date('Y-m-d\TH:i', current_time('timestamp'))); ?>" value="<?php echo esc_attr($_POST['return_date'] ?? ''); ?>"></td>
                </tr>
            </table>
            <?php wp_nonce_field('su_p_library_transaction', 'nonce'); ?>
            <input type="hidden" name="su_p_process_library_transaction" value="1">
            <p class="submit"><button type="submit" id="process-transaction" class="button-primary">Borrow Book</button></p>
        </form>

        <div id="edu-loader" class="edu-loader" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;">
            <div class="edu-loader-container" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <img src="<?php echo esc_url(plugin_dir_url(__FILE__) . '../custom-loader.png'); ?>" alt="Loading..." class="edu-loader-png" style="max-width: 100px;">
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const $centerSelect = $('#trans-center-id');
        const $bookSelect = $('#trans-book-id');
        const $userSelect = $('#trans-user-id');
        const $message = $('#transaction-message');
        const $loader = $('#edu-loader');

        function showLoader() { $loader.show(); }
        function hideLoader() { $loader.hide(); }

        $centerSelect.on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                showLoader();

                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_library_list',
                        edu_center_id: centerId,
                        nonce: '<?php echo esc_js(wp_create_nonce('su_p_library_list')); ?>'
                    },
                    success: function(response) {
                        if (response.success) {
                            const $books = $(response.data).find('tbody tr');
                            let options = '<option value="">Select Book</option>';
                            $books.each(function() {
                                const bookId = $(this).find('td:eq(0)').text();
                                const title = $(this).find('td:eq(2)').text();
                                options += `<option value="${bookId}">${title} (${bookId})</option>`;
                            });
                            $bookSelect.html(options);
                        } else {
                            $bookSelect.html('<option value="">No books available</option>');
                        }
                    },
                    error: function(xhr, status, error) {
                        $message
                            .addClass('alert-danger')
                            .text('Error loading books: ' + error);
                        setTimeout(() => $message.removeClass('alert-danger').text(''), 4000);
                    },
                    complete: function() {
                        hideLoader();
                    }
                });

                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: {
                        action: 'su_p_library_users_by_center',
                        education_center_id: centerId,
                        nonce: '<?php echo esc_js(wp_create_nonce('su_p_library_users')); ?>'
                    },
                    success: function(response) {
                        if (response.success) {
                            let options = '<option value="">Select User</option>';
                            if (response.data && response.data.users) {
                                response.data.users.forEach(function(user) {
                                    options += `<option value="${user.id}">${user.name}</option>`;
                                });
                                $userSelect.html(options);
                            } else {
                                $userSelect.html('<option value="">No users available</option>');
                            }
                            if (response.data.debug) {
                                console.log('User fetch debug: ' + response.data.debug);
                            }
                        } else {
                            $userSelect.html('<option value="">No users available</option>');
                            $message
                                .addClass('alert-danger')
                                .text('Error: ' + (response.data?.message || 'No users found'));
                            setTimeout(() => $message.removeClass('alert-danger').text(''), 4000);
                        }
                    },
                    error: function(xhr, status, error) {
                        $userSelect.html('<option value="">No users available</option>');
                        $message
                            .addClass('alert-danger')
                            .text('Error loading users: ' + error);
                        setTimeout(() => $message.removeClass('alert-danger').text(''), 4000);
                    },
                    complete: function() {
                        hideLoader();
                    }
                });
            } else {
                $bookSelect.html('<option value="">Select Book</option>');
                $userSelect.html('<option value="">Select User</option>');
            }
        });

        $('#standalone-transaction-form').on('submit', function(e) {
            if (!this.checkValidity()) {
                e.preventDefault();
                this.reportValidity();
                $message
                    .addClass('alert-danger')
                    .text('Please fill out all required fields correctly.');
                setTimeout(() => $message.removeClass('alert-danger').text(''), 4000);
            }
        });
    });
    </script>
    <?php
    $output = ob_get_clean();
    return $output;
}
add_shortcode('su_p_library_transaction_form', 'render_su_p_library_transaction_form');
// Updated AJAX handler for users by center
function su_p_library_users_by_center() {
    global $wpdb;
    check_ajax_referer('su_p_library_users', 'nonce');
    $education_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');

    if (empty($education_center_id)) {
        wp_send_json_error(['message' => 'No educational center selected']);
    }

    $users = [];

    // Fetch students as posts
    $students = get_posts([
        'post_type' => 'students',
        'posts_per_page' => -1,
        'post_status' => 'any',
        'meta_query' => [
            [
                'key' => 'educational_center_id',
                'value' => $education_center_id,
                'compare' => '='
            ]
        ]
    ]);

    error_log('Students found: ' . count($students));
    if (!empty($students)) {
        foreach ($students as $student) {
            $student_id = get_post_meta($student->ID, 'student_id', true); // Fetch student_id meta
            $student_name = get_the_title($student->ID);
            if (empty($student_id)) {
                $student_id = 'STU-' . $student->ID; // Fallback if no student_id meta
                error_log('No student_id meta for student ' . $student->ID . ', using fallback: ' . $student_id);
            }
            $users[] = [
                'id' => $student_id, // Use student_id instead of post ID
                'name' => $student_name
            ];
        }
    }

    // Fetch staff from custom table
    $staff_table = $wpdb->prefix . 'staff';
    if ($wpdb->get_var("SHOW TABLES LIKE '$staff_table'") == $staff_table) {
        $staff = $wpdb->get_results($wpdb->prepare(
            "SELECT staff_id AS id, name AS name FROM $staff_table WHERE education_center_id = %s",
            $education_center_id
        ));
        if (!empty($staff)) {
            foreach ($staff as $member) {
                $users[] = ['id' => $member->id, 'name' => $member->name];
            }
        }
    }

    if (empty($users)) {
        wp_send_json_success(['users' => [], 'debug' => 'No users found for center ' . $education_center_id]);
    } else {
        wp_send_json_success(['users' => $users, 'debug' => count($users) . ' users found']);
    }
}
add_action('wp_ajax_su_p_library_users_by_center', 'su_p_library_users_by_center');
// Enqueue Scripts
// function su_p_enqueue_library_scripts() {
//     wp_enqueue_style('bootstrap', 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');
//     wp_enqueue_script('bootstrap', 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js', ['jquery'], null, true);
//     wp_enqueue_style('select2', 'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css', [], '4.1.0');
//     wp_enqueue_script('select2', 'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js', ['jquery'], '4.1.0', true);
//     wp_enqueue_style('bootstrap-icons', 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css');
//     wp_enqueue_script('jquery');
// }
// add_action('wp_enqueue_scripts', 'su_p_enqueue_library_scripts');

//timetable
// Main Render Function
function render_su_p_timetable_management() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    
    // Pagination and filter variables
    $page = isset($_GET['page']) ? max(1, intval($_GET['page'])) : 1;
    $per_page = isset($_GET['per_page']) ? intval($_GET['per_page']) : 10;
    $class_name_search = isset($_GET['class_name_search']) ? sanitize_text_field($_GET['class_name_search']) : '';
    $center_filter = isset($_GET['center_filter']) ? sanitize_text_field($_GET['center_filter']) : '';
    $class_filter = isset($_GET['class_filter']) ? intval($_GET['class_filter']) : '';
    $section_filter = isset($_GET['section_filter']) ? sanitize_text_field($_GET['section_filter']) : '';

    // Fetch ALL timetable data initially
    $table_name = $wpdb->prefix . 'timetables';
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';

    $query = "SELECT t.*, c.class_name, s.subject_name 
              FROM $table_name t 
              JOIN $class_table c ON t.class_id = c.id 
              LEFT JOIN $subject_table s ON t.subject_id = s.subject_id 
              WHERE 1=1";
    
    $args = [];
    if ($class_name_search) {
        $query .= " AND c.class_name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($class_name_search) . '%';
    }
    if ($center_filter) {
        $query .= " AND t.education_center_id = %s";
        $args[] = $center_filter;
    }
    if ($class_filter) {
        $query .= " AND t.class_id = %d";
        $args[] = $class_filter;
    }
    if ($section_filter) {
        $query .= " AND t.section = %s";
        $args[] = $section_filter;
    }
    
    $query .= " ORDER BY t.day, t.start_time";
    $timetable_slots = !empty($args) ? $wpdb->get_results($wpdb->prepare($query, $args)) : $wpdb->get_results($query);
    $total = count($timetable_slots);

    // Fetch classes and subjects
    $classes_query = $center_filter 
        ? $wpdb->prepare("SELECT id, class_name, sections, education_center_id FROM $class_table WHERE education_center_id = %s", $center_filter) 
        : "SELECT id, class_name, sections, education_center_id FROM $class_table";
    $all_classes = $wpdb->get_results($classes_query);
    $sections_data = [];
    foreach ($all_classes as $class) {
        $sections_data[$class->id] = array_filter(explode(',', $class->sections));
    }

    $subjects_query = $center_filter 
        ? $wpdb->prepare("SELECT subject_id, subject_name FROM $subject_table WHERE education_center_id = %s OR education_center_id IS NULL", $center_filter) 
        : "SELECT subject_id, subject_name FROM $subject_table";
    $subjects = $wpdb->get_results($subjects_query);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Timetable Management</h2>
                <div class="search-filters">
                    <input type="text" id="class-name-search" placeholder="Search by Class Name..." value="<?php echo esc_attr($class_name_search); ?>">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id' " . selected($center_filter, $center_id, false) . ">" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="class-filter">
                        <option value="">All Classes</option>
                        <?php
                        foreach ($all_classes as $class) {
                            echo "<option value='" . esc_attr($class->id) . "' " . selected($class_filter, $class->id, false) . ">" . esc_html($class->class_name) . "</option>";
                        }
                        ?>
                    </select>
                    <select id="section-filter">
                        <option value="">All Sections</option>
                        <?php
                        $unique_sections = [];
                        foreach ($sections_data as $sections) {
                            foreach ($sections as $sec) {
                                if (!in_array($sec, $unique_sections)) {
                                    $unique_sections[] = $sec;
                                    echo "<option value='$sec' " . selected($section_filter, $sec, false) . ">" . esc_html($sec) . "</option>";
                                }
                            }
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-timetable-btn">Add Timetable Slot</button>
                    <select id="slots-per-page" name="per_page">
                        <option value="10" <?php selected($per_page, 10); ?>>10</option>
                        <option value="20" <?php selected($per_page, 20); ?>>20</option>
                        <option value="50" <?php selected($per_page, 50); ?>>50</option>
                    </select>
                    <button id="prev-page" class="button" <?php echo $page <= 1 ? 'disabled' : ''; ?>>Previous</button>
                    <span id="page-info">Page <?php echo $page; ?> of <?php echo ceil($total / $per_page); ?> (Total Records: <?php echo $total; ?>)</span>
                    <button id="next-page" class="button" <?php echo $page >= ceil($total / $per_page) ? 'disabled' : ''; ?>>Next</button>
                    <button id="refresh-table" class="button">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools">
                        <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                        <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                        <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                    </div>
                    <table id="timetable-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Day</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Class Name</th>
                                <th>Section</th>
                                <th>Subject</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            $start = ($page - 1) * $per_page;
                            $end = min($start + $per_page, $total);
                            for ($i = $start; $i < $end && $i < count($timetable_slots); $i++) {
                                $slot = $timetable_slots[$i];
                                echo "<tr>
                                    <td>" . esc_html($slot->timetable_id) . "</td>
                                    <td>" . esc_html($slot->day) . "</td>
                                    <td>" . esc_html($slot->start_time) . "</td>
                                    <td>" . esc_html($slot->end_time) . "</td>
                                    <td>" . esc_html($slot->class_name) . "</td>
                                    <td>" . esc_html($slot->section) . "</td>
                                    <td>" . esc_html($slot->subject_name ?: 'N/A') . "</td>
                                    <td>" . esc_html($slot->education_center_id) . "</td>
                                    <td>
                                        <button class='edit-timetable' data-timetable-id='" . esc_attr($slot->timetable_id) . "'>Edit</button>
                                        <button class='delete-timetable' data-timetable-id='" . esc_attr($slot->timetable_id) . "'>Delete</button>
                                    </td>
                                </tr>";
                            }
                            if (empty($timetable_slots)) {
                                echo '<tr><td colspan="9">No timetable slots found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Timetable Modal -->
    <div class="edu-modal" id="edit-timetable-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-timetable-modal">×</span>
            <h3>Edit Timetable Slot</h3>
            <form id="edit-timetable-form" method="POST">
                <input type="hidden" id="edit-timetable-id" name="timetable_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center</label>
                    <select id="edit-center-id" name="education_center_id" required onchange="updateEditClasses()">
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-class-id">Class</label>
                    <select id="edit-class-id" name="class_id" required onchange="updateEditSections()">
                        <option value="">Select Class</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-section">Section</label>
                    <select id="edit-section" name="section" required>
                        <option value="">Select Section</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-subject-id">Subject</label>
                    <select id="edit-subject-id" name="subject_id">
                        <option value="">None</option>
                        <?php
                        foreach ($subjects as $subject) {
                            echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-day">Day</label>
                    <select id="edit-day" name="day" required>
                        <option value="">Select Day</option>
                        <?php foreach (['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] as $day) : ?>
                            <option value="<?php echo $day; ?>"><?php echo $day; ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-start-time">Start Time</label>
                    <input type="time" id="edit-start-time" name="start_time" required>
                </div>
                <div class="search-filters">
                    <label for="edit-end-time">End Time</label>
                    <input type="time" id="edit-end-time" name="end_time" required>
                </div>
                <input type="hidden" name="action" value="edit_timetable">
                <button type="submit" id="update-timetable">Update Slot</button>
            </form>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allSlots = <?php echo json_encode(array_map(function($slot) {
            return [
                'id' => $slot->timetable_id,
                'day' => $slot->day,
                'start_time' => $slot->start_time,
                'end_time' => $slot->end_time,
                'class_name' => $slot->class_name,
                'class_id' => $slot->class_id,
                'section' => $slot->section,
                'subject_name' => $slot->subject_name ?: 'N/A',
                'subject_id' => $slot->subject_id,
                'education_center_id' => $slot->education_center_id
            ];
        }, $timetable_slots)); ?>;

        const allClasses = <?php echo json_encode(array_map(function($class) {
            return [
                'id' => $class->id,
                'class_name' => $class->class_name,
                'education_center_id' => $class->education_center_id,
                'sections' => array_filter(explode(',', $class->sections))
            ];
        }, $all_classes)); ?>;

        let currentPage = <?php echo $page; ?>;
        let perPage = <?php echo $per_page; ?>;
        let totalRecords = <?php echo $total; ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        function filterAndRender() {
            showLoader();
            const classNameSearch = $('#class-name-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();
            const classFilter = $('#class-filter').val();
            const sectionFilter = $('#section-filter').val();

            let filteredSlots = allSlots.filter(slot => {
                return (!classNameSearch || slot.class_name.toLowerCase().includes(classNameSearch)) &&
                       (!centerFilter || slot.education_center_id === centerFilter) &&
                       (!classFilter || slot.class_id == classFilter) &&
                       (!sectionFilter || slot.section === sectionFilter);
            });

            totalRecords = filteredSlots.length;
            const totalPages = Math.ceil(totalRecords / perPage);
            currentPage = Math.min(currentPage, Math.max(1, totalPages));

            const start = (currentPage - 1) * perPage;
            const end = Math.min(start + perPage, filteredSlots.length);
            const paginatedSlots = filteredSlots.slice(start, end);

            let html = '';
            if (paginatedSlots.length > 0) {
                paginatedSlots.forEach(slot => {
                    html += `<tr>
                        <td>${slot.id}</td>
                        <td>${slot.day}</td>
                        <td>${slot.start_time}</td>
                        <td>${slot.end_time}</td>
                        <td>${slot.class_name}</td>
                        <td>${slot.section}</td>
                        <td>${slot.subject_name}</td>
                        <td>${slot.education_center_id}</td>
                        <td>
                            <button class="edit-timetable" data-timetable-id="${slot.id}">Edit</button>
                            <button class="delete-timetable" data-timetable-id="${slot.id}">Delete</button>
                        </td>
                    </tr>`;
                });
            } else {
                html = '<tr><td colspan="9">No timetable slots found.</td></tr>';
            }
            $('#timetable-table tbody').html(html);

            $('#page-info').text(`Page ${currentPage} of ${totalPages} (Total Records: ${totalRecords})`);
            $('#prev-page').prop('disabled', currentPage <= 1);
            $('#next-page').prop('disabled', currentPage >= totalPages);

            hideLoader();
        }

        // Event handlers
        $('#class-name-search').on('keyup', debounce(filterAndRender, 300));
        $('#center-filter, #class-filter, #section-filter').on('change', filterAndRender);
        $('#slots-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            filterAndRender();
        });
        $('#prev-page').on('click', function() {
            if (currentPage > 1) {
                currentPage--;
                filterAndRender();
            }
        });
        $('#next-page').on('click', function() {
            if (currentPage < Math.ceil(totalRecords / perPage)) {
                currentPage++;
                filterAndRender();
            }
        });
        $('#refresh-table').on('click', function() {
            $('#class-name-search').val('');
            $('#center-filter').val('');
            $('#class-filter').val('');
            $('#section-filter').val('');
            currentPage = 1;
            filterAndRender();
        });

        // Edit Functionality
        $(document).on('click', '.edit-timetable', function() {
            const timetableId = $(this).data('timetable-id').toString();
            const slot = allSlots.find(s => s.id.toString() === timetableId);

            if (slot) {
                $('#edit-timetable-id').val(slot.id);
                $('#edit-center-id').val(slot.education_center_id);

                $('#edit-class-id').empty().append('<option value="">Select Class</option>');
                allClasses.forEach(cls => {
                    if (cls.education_center_id === slot.education_center_id) {
                        $('#edit-class-id').append(`<option value="${cls.id}" data-center-id="${cls.education_center_id}">${cls.class_name}</option>`);
                    }
                });
                $('#edit-class-id').val(slot.class_id);

                const classData = allClasses.find(c => c.id.toString() === slot.class_id.toString());
                $('#edit-section').empty().append('<option value="">Select Section</option>');
                if (classData && classData.sections) {
                    classData.sections.forEach(section => {
                        $('#edit-section').append(`<option value="${section}">${section}</option>`);
                    });
                }
                $('#edit-section').val(slot.section);

                $('#edit-subject-id').val(slot.subject_id || '');
                $('#edit-day').val(slot.day);
                $('#edit-start-time').val(slot.start_time);
                $('#edit-end-time').val(slot.end_time);

                openModal('#edit-timetable-modal');
            } else {
                console.error('Timetable slot not found for ID:', timetableId);
                alert('Timetable slot not found.');
            }
        });

        // Delete Functionality
        $(document).on('click', '.delete-timetable', function() {
            if (confirm('Are you sure you want to delete this timetable slot?')) {
                showLoader();
                const timetableId = $(this).data('timetable-id').toString();

                // Use the current page URL as the endpoint
                fetch('<?php echo esc_url(admin_url('admin-ajax.php')); ?>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({
                        'action': 'delete_timetable_slot', // Custom action for WordPress AJAX
                        'timetable_id': timetableId,
                        'nonce': '<?php echo wp_create_nonce('delete_timetable_nonce'); ?>'
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(result => {
                    if (result.success) {
                        // Reload the page to reflect the updated data
                        window.location.reload();
                    } else {
                        alert('Failed to delete timetable slot: ' + (result.data.message || 'Unknown error'));
                        hideLoader();
                    }
                })
                .catch(error => {
                    console.error('Delete error:', error);
                    alert('An error occurred while deleting the timetable slot: ' + error.message);
                    hideLoader();
                });
            }
        });

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        // Export functionality (unchanged)
        $('.export-csv').on('click', function() {
            const headers = ['ID', 'Day', 'Start Time', 'End Time', 'Class Name', 'Section', 'Subject', 'Education Center ID'];
            const csvRows = [headers.join(',')];
            const filteredSlots = getFilteredSlots();
            filteredSlots.forEach(row => {
                const values = [row.id, row.day, row.start_time, row.end_time, row.class_name, row.section, row.subject_name, row.education_center_id].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const csvContent = csvRows.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'timetable_slots.csv';
            link.click();
        });

        $('.export-pdf').on('click', function() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Timetable Slots Report', 10, 10);
            doc.setFontSize(12);
            const filteredSlots = getFilteredSlots();
            const tableData = filteredSlots.map(row => [row.id, row.day, row.start_time, row.end_time, row.class_name, row.section, row.subject_name, row.education_center_id]);
            doc.autoTable({
                head: [['ID', 'Day', 'Start Time', 'End Time', 'Class Name', 'Section', 'Subject', 'Education Center ID']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('timetable_slots.pdf');
        });

        $('.export-excel').on('click', function() {
            const filteredSlots = getFilteredSlots();
            const worksheetData = filteredSlots.map(row => ({
                'ID': row.id,
                'Day': row.day,
                'Start Time': row.start_time,
                'End Time': row.end_time,
                'Class Name': row.class_name,
                'Section': row.section,
                'Subject': row.subject_name,
                'Education Center ID': row.education_center_id
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Timetable');
            XLSX.writeFile(workbook, 'timetable_slots.xlsx');
        });

        function getFilteredSlots() {
            const classNameSearch = $('#class-name-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();
            const classFilter = $('#class-filter').val();
            const sectionFilter = $('#section-filter').val();
            return allSlots.filter(slot => {
                return (!classNameSearch || slot.class_name.toLowerCase().includes(classNameSearch)) &&
                       (!centerFilter || slot.education_center_id === centerFilter) &&
                       (!classFilter || slot.class_id == classFilter) &&
                       (!sectionFilter || slot.section === sectionFilter);
            });
        }

        function updateEditClasses() {
            const centerId = $('#edit-center-id').val();
            $('#edit-class-id').empty().append('<option value="">Select Class</option>');
            allClasses.forEach(cls => {
                if (cls.education_center_id === centerId) {
                    $('#edit-class-id').append(`<option value="${cls.id}" data-center-id="${cls.education_center_id}">${cls.class_name}</option>`);
                }
            });
            updateEditSections();
        }

        function updateEditSections() {
            const classId = $('#edit-class-id').val();
            const classData = allClasses.find(c => c.id.toString() === classId.toString());
            $('#edit-section').empty().append('<option value="">Select Section</option>');
            if (classData && classData.sections) {
                classData.sections.forEach(section => {
                    $('#edit-section').append(`<option value="${section}">${section}</option>`);
                });
            }
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    });
    </script>
    <?php
    // Handle POST for edit
    if (isset($_POST['action']) && $_POST['action'] === 'edit_timetable') {
        $timetable_id = intval($_POST['timetable_id']);
        $education_center_id = sanitize_text_field($_POST['education_center_id']);
        $class_id = intval($_POST['class_id']);
        $section = sanitize_text_field($_POST['section']);
        $subject_id = !empty($_POST['subject_id']) ? intval($_POST['subject_id']) : null;
        $day = sanitize_text_field($_POST['day']);
        $start_time = sanitize_text_field($_POST['start_time']);
        $end_time = sanitize_text_field($_POST['end_time']);

        $wpdb->update(
            $table_name,
            [
                'education_center_id' => $education_center_id,
                'class_id' => $class_id,
                'section' => $section,
                'subject_id' => $subject_id,
                'day' => $day,
                'start_time' => $start_time,
                'end_time' => $end_time
            ],
            ['timetable_id' => $timetable_id],
            ['%s', '%d', '%s', '%d', '%s', '%s', '%s'],
            ['%d']
        );
        wp_redirect($_SERVER['REQUEST_URI']);
        exit;
    }

    return ob_get_clean();
}

// Register AJAX handler for delete (outside the render function)
add_action('wp_ajax_delete_timetable_slot', 'handle_delete_timetable_slot');
function handle_delete_timetable_slot() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';

    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'delete_timetable_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $timetable_id = intval($_POST['timetable_id'] ?? 0);
    if (empty($timetable_id)) {
        wp_send_json_error(['message' => 'Invalid timetable ID']);
        wp_die();
    }

    $result = $wpdb->delete($table_name, ['timetable_id' => $timetable_id], ['%d']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Database error: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Timetable slot deleted successfully']);
    }
    wp_die();
}
// AJAX Handlers
add_action('wp_ajax_su_p_fetch_timetable', 'su_p_fetch_timetable');
function su_p_fetch_timetable() {
    check_ajax_referer('su_p_timetable_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';

    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $class_name = sanitize_text_field($_POST['search_class_name'] ?? '');
    $center = sanitize_text_field($_POST['center_filter'] ?? '');
    $section = sanitize_text_field($_POST['section_filter'] ?? '');

    $query = "SELECT t.*, c.class_name, s.subject_name 
              FROM $table_name t 
              JOIN $class_table c ON t.class_id = c.id 
              LEFT JOIN $subject_table s ON t.subject_id = s.subject_id 
              WHERE 1=1";
    $args = [];

    if ($class_name) {
        $query .= " AND c.class_name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($class_name) . '%';
    }
    if ($center) {
        $query .= " AND t.education_center_id = %s";
        $args[] = $center;
    }
    if ($section) {
        $query .= " AND t.section = %s";
        $args[] = $section;
    }

    $total = $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM $table_name t JOIN $class_table c ON t.class_id = c.id WHERE 1=1" . strstr($query, ' AND'), $args));
    if ($wpdb->last_error) wp_send_json_error(['message' => 'Database error (total): ' . $wpdb->last_error]);

    $offset = ($page - 1) * $per_page;
    $query .= " ORDER BY t.day, t.start_time LIMIT %d OFFSET %d";
    $args[] = $per_page;
    $args[] = $offset;

    $results = $wpdb->get_results($wpdb->prepare($query, $args));
    if ($wpdb->last_error) wp_send_json_error(['message' => 'Database error (results): ' . $wpdb->last_error]);

    $table_head = '<tr><th>ID</th><th>Day</th><th>Start Time</th><th>End Time</th><th>Class Name</th><th>Section</th><th>Subject</th><th>Education Center ID</th><th>Actions</th></tr>';
    $slots = '';
    $slot_data = [];
    $sections_data = [];

    $classes = $wpdb->get_results($center ? $wpdb->prepare("SELECT id, sections FROM $class_table WHERE education_center_id = %s", $center) : "SELECT id, sections FROM $class_table");
    foreach ($classes as $class) {
        $sections_data[$class->id] = array_filter(explode(',', $class->sections));
    }

    if ($results) {
        foreach ($results as $row) {
            $slots .= "<tr>
                <td>" . esc_html($row->timetable_id) . "</td>
                <td>" . esc_html($row->day) . "</td>
                <td>" . esc_html($row->start_time) . "</td>
                <td>" . esc_html($row->end_time) . "</td>
                <td>" . esc_html($row->class_name) . "</td>
                <td>" . esc_html($row->section) . "</td>
                <td>" . esc_html($row->subject_name ?: 'N/A') . "</td>
                <td>" . esc_html($row->education_center_id) . "</td>
                <td>
                    <button class='edit-timetable' data-timetable-id='" . esc_attr($row->timetable_id) . "'>Edit</button>
                    <button class='delete-timetable' data-timetable-id='" . esc_attr($row->timetable_id) . "'>Delete</button>
                </td>
            </tr>";
            $slot_data[] = [
                'id' => $row->timetable_id,
                'day' => $row->day,
                'start_time' => $row->start_time,
                'end_time' => $row->end_time,
                'class_name' => $row->class_name,
                'section' => $row->section,
                'subject_name' => $row->subject_name,
                'education_center_id' => $row->education_center_id
            ];
        }
    } else {
        $slots = '<tr><td colspan="9">No timetable slots found.</td></tr>';
    }

    wp_send_json_success([
        'table_head' => $table_head,
        'slots' => $slots,
        'slot_data' => $slot_data,
        'sections_data' => $sections_data,
        'total' => $total ?: 0
    ]);
}

add_action('wp_ajax_su_p_fetch_timetable_slot', 'su_p_fetch_timetable_slot');
function su_p_fetch_timetable_slot() {
    check_ajax_referer('su_p_timetable_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';
    $timetable_id = intval($_POST['timetable_id'] ?? 0);

    $slot = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table_name WHERE timetable_id = %d", $timetable_id));
    if ($slot) {
        wp_send_json_success([
            'id' => $slot->timetable_id,
            'education_center_id' => $slot->education_center_id,
            'class_id' => $slot->class_id,
            'section' => $slot->section,
            'subject_id' => $slot->subject_id,
            'day' => $slot->day,
            'start_time' => $slot->start_time,
            'end_time' => $slot->end_time
        ]);
    } else {
        wp_send_json_error(['message' => 'Timetable slot not found']);
    }
}

add_action('wp_ajax_su_p_fetch_subjects', 'su_p_fetch_subjects');
function su_p_fetch_subjects() {
    check_ajax_referer('su_p_timetable_nonce', 'nonce');
    global $wpdb;
    $center = sanitize_text_field($_POST['center_filter'] ?? '');
    $query = "SELECT * FROM {$wpdb->prefix}subjects WHERE education_center_id = %s OR education_center_id IS NULL";
    $subjects = $wpdb->get_results($wpdb->prepare($query, $center));
    wp_send_json_success($subjects);
}

add_action('wp_ajax_su_p_add_timetable', 'su_p_add_timetable');
function su_p_add_timetable() {
    check_ajax_referer('su_p_timetable_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';

    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_id = intval($_POST['class_id'] ?? 0);
    $section = sanitize_text_field($_POST['section'] ?? '');
    $subject_id = !empty($_POST['subject_id']) ? intval($_POST['subject_id']) : null;
    $day = sanitize_text_field($_POST['day'] ?? '');
    $start_time = sanitize_text_field($_POST['start_time'] ?? '');
    $end_time = sanitize_text_field($_POST['end_time'] ?? '');

    if (empty($center_id) || empty($class_id) || empty($section) || empty($day) || empty($start_time) || empty($end_time)) {
        wp_send_json_error(['message' => 'All fields except subject are required']);
        exit;
    }

    if ($start_time >= $end_time) {
        wp_send_json_error(['message' => 'Start time must be before end time']);
        exit;
    }

    $conflict = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table_name 
         WHERE education_center_id = %s AND class_id = %d AND section = %s AND day = %s AND (
            (start_time <= %s AND end_time > %s) OR 
            (start_time < %s AND end_time >= %s)
         )",
        $center_id, $class_id, $section, $day, $start_time, $start_time, $end_time, $end_time
    ));

    if ($conflict > 0) {
        wp_send_json_error(['message' => 'Time conflict detected']);
        exit;
    }

    $result = $wpdb->insert(
        $table_name,
        [
            'education_center_id' => $center_id,
            'class_id' => $class_id,
            'section' => $section,
            'subject_id' => $subject_id,
            'day' => $day,
            'start_time' => $start_time,
            'end_time' => $end_time
        ],
        ['%s', '%d', '%s', '%d', '%s', '%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add timetable slot: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Timetable slot added successfully');
    }
    exit;
}

add_action('wp_ajax_su_p_edit_timetable', 'su_p_edit_timetable');
function su_p_edit_timetable() {
    check_ajax_referer('su_p_timetable_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';

    $timetable_id = intval($_POST['timetable_id'] ?? 0);
    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_id = intval($_POST['class_id'] ?? 0);
    $section = sanitize_text_field($_POST['section'] ?? '');
    $subject_id = !empty($_POST['subject_id']) ? intval($_POST['subject_id']) : null;
    $day = sanitize_text_field($_POST['day'] ?? '');
    $start_time = sanitize_text_field($_POST['start_time'] ?? '');
    $end_time = sanitize_text_field($_POST['end_time'] ?? '');

    if (empty($timetable_id) || empty($center_id) || empty($class_id) || empty($section) || empty($day) || empty($start_time) || empty($end_time)) {
        wp_send_json_error(['message' => 'All fields except subject are required']);
        exit;
    }

    if ($start_time >= $end_time) {
        wp_send_json_error(['message' => 'Start time must be before end time']);
        exit;
    }

    $conflict = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table_name 
         WHERE education_center_id = %s AND class_id = %d AND section = %s AND day = %s AND (
            (start_time <= %s AND end_time > %s) OR 
            (start_time < %s AND end_time >= %s)
         ) AND timetable_id != %d",
        $center_id, $class_id, $section, $day, $start_time, $start_time, $end_time, $end_time, $timetable_id
    ));

    if ($conflict > 0) {
        wp_send_json_error(['message' => 'Time conflict detected']);
        exit;
    }

    $result = $wpdb->update(
        $table_name,
        [
            'education_center_id' => $center_id,
            'class_id' => $class_id,
            'section' => $section,
            'subject_id' => $subject_id,
            'day' => $day,
            'start_time' => $start_time,
            'end_time' => $end_time
        ],
        ['timetable_id' => $timetable_id],
        ['%s', '%d', '%s', '%d', '%s', '%s', '%s'],
        ['%d']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update timetable slot: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Timetable slot updated successfully');
    }
    exit;
}

add_action('wp_ajax_su_p_delete_timetable', 'su_p_delete_timetable');
function su_p_delete_timetable() {
    check_ajax_referer('su_p_timetable_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';
    $timetable_id = intval($_POST['timetable_id'] ?? 0);

    if (empty($timetable_id)) {
        wp_send_json_error(['message' => 'Invalid timetable ID']);
    }

    $result = $wpdb->delete($table_name, ['timetable_id' => $timetable_id], ['%d']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete timetable slot: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Timetable slot deleted successfully']);
    }
    exit;
}
//
function render_su_p_add_timetable() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';
    $all_classes = $wpdb->get_results("SELECT id, class_name, sections, education_center_id FROM $class_table");
    $subjects = $wpdb->get_results("SELECT subject_id, subject_name FROM $subject_table");

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Add Timetable Slot</h2>
                <form id="add-timetable-form" method="POST">
                    <div class="search-filters">
                        <label for="add-center-id">Education Center</label>
                        <select id="add-center-id" name="education_center_id" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                            }
                            ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-class-id">Class</label>
                        <select id="add-class-id" name="class_id" required>
                            <option value="">Select Class</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-section">Section</label>
                        <select id="add-section" name="section" required>
                            <option value="">Select Section</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-subject-id">Subject</label>
                        <select id="add-subject-id" name="subject_id">
                            <option value="">None</option>
                            <?php
                            foreach ($subjects as $subject) {
                                echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                            }
                            ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-day">Day</label>
                        <select id="add-day" name="day" required>
                            <option value="">Select Day</option>
                            <?php foreach (['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] as $day) : ?>
                                <option value="<?php echo $day; ?>"><?php echo $day; ?></option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-start-time">Start Time</label>
                        <input type="time" id="add-start-time" name="start_time" required>
                    </div>
                    <div class="search-filters">
                        <label for="add-end-time">End Time</label>
                        <input type="time" id="add-end-time" name="end_time" required>
                    </div>
                    <input type="hidden" name="action" value="su_p_add_timetable_standalone">
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_timetable_nonce'); ?>">
                    <button type="submit">Add Timetable Slot</button>
                </form>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allClasses = <?php echo json_encode(array_map(function($class) {
            return [
                'id' => $class->id,
                'class_name' => $class->class_name,
                'education_center_id' => $class->education_center_id,
                'sections' => array_filter(explode(',', $class->sections))
            ];
        }, $all_classes)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function updateAddClasses() {
            const centerId = $('#add-center-id').val();
            $('#add-class-id').empty().append('<option value="">Select Class</option>');
            allClasses.forEach(cls => {
                if (cls.education_center_id === centerId) {
                    $('#add-class-id').append(`<option value="${cls.id}">${cls.class_name}</option>`);
                }
            });
            updateAddSections();
        }

        function updateAddSections() {
            const classId = $('#add-class-id').val();
            const classData = allClasses.find(c => c.id.toString() === classId.toString());
            $('#add-section').empty().append('<option value="">Select Section</option>');
            if (classData && classData.sections) {
                classData.sections.forEach(section => {
                    $('#add-section').append(`<option value="${section}">${section}</option>`);
                });
            }
        }

        // Attach event handlers using jQuery
        $('#add-center-id').on('change', updateAddClasses);
        $('#add-class-id').on('change', updateAddSections);

        $('#add-timetable-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: formData,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Timetable slot added successfully');
                        $('#add-timetable-form')[0].reset();
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Standalone Add
add_action('wp_ajax_su_p_add_timetable_standalone', 'su_p_add_timetable_standalone');
function su_p_add_timetable_standalone() {
    check_ajax_referer('su_p_timetable_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';

    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_id = intval($_POST['class_id'] ?? 0);
    $section = sanitize_text_field($_POST['section'] ?? '');
    $subject_id = !empty($_POST['subject_id']) ? intval($_POST['subject_id']) : null;
    $day = sanitize_text_field($_POST['day'] ?? '');
    $start_time = sanitize_text_field($_POST['start_time'] ?? '');
    $end_time = sanitize_text_field($_POST['end_time'] ?? '');

    if (empty($center_id) || empty($class_id) || empty($section) || empty($day) || empty($start_time) || empty($end_time)) {
        wp_send_json_error(['message' => 'All fields except subject are required']);
        wp_die();
    }

    if ($start_time >= $end_time) {
        wp_send_json_error(['message' => 'Start time must be before end time']);
        wp_die();
    }

    $conflict = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table_name 
         WHERE education_center_id = %s AND class_id = %d AND section = %s AND day = %s AND (
            (start_time <= %s AND end_time > %s) OR 
            (start_time < %s AND end_time >= %s)
         )",
        $center_id, $class_id, $section, $day, $start_time, $start_time, $end_time, $end_time
    ));

    if ($conflict > 0) {
        wp_send_json_error(['message' => 'Time conflict detected']);
        wp_die();
    }

    $result = $wpdb->insert(
        $table_name,
        [
            'education_center_id' => $center_id,
            'class_id' => $class_id,
            'section' => $section,
            'subject_id' => $subject_id,
            'day' => $day,
            'start_time' => $start_time,
            'end_time' => $end_time
        ],
        ['%s', '%d', '%s', '%d', '%s', '%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add timetable slot: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Timetable slot added successfully']);
    }
    wp_die();
}

function render_su_p_edit_timetable() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    $all_classes = $wpdb->get_results("SELECT id, class_name, sections, education_center_id FROM $class_table");
    $subjects = $wpdb->get_results("SELECT subject_id, subject_name FROM $subject_table");

    // Fetch all timetable slots
    $query = "SELECT t.*, c.class_name, s.subject_name 
              FROM $table_name t 
              JOIN $class_table c ON t.class_id = c.id 
              LEFT JOIN $subject_table s ON t.subject_id = s.subject_id 
              ORDER BY t.day, t.start_time";
    $timetable_slots = $wpdb->get_results($query);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Edit Timetable Slots</h2>
                <div class="management-table-wrapper">
                    <table id="timetable-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Day</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Class Name</th>
                                <th>Section</th>
                                <th>Subject</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($timetable_slots)) {
                                foreach ($timetable_slots as $slot) {
                                    echo "<tr>
                                        <td>" . esc_html($slot->timetable_id) . "</td>
                                        <td>" . esc_html($slot->day) . "</td>
                                        <td>" . esc_html($slot->start_time) . "</td>
                                        <td>" . esc_html($slot->end_time) . "</td>
                                        <td>" . esc_html($slot->class_name) . "</td>
                                        <td>" . esc_html($slot->section) . "</td>
                                        <td>" . esc_html($slot->subject_name ?: 'N/A') . "</td>
                                        <td>" . esc_html($slot->education_center_id) . "</td>
                                        <td>
                                            <button class='edit-timetable' data-timetable-id='" . esc_attr($slot->timetable_id) . "'>Edit</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="9">No timetable slots found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>

                <!-- Edit Timetable Modal -->
                <div class="edu-modal" id="edit-timetable-modal" style="display: none;">
                    <div class="edu-modal-content">
                        <span class="edu-modal-close" data-modal="edit-timetable-modal">×</span>
                        <h3>Edit Timetable Slot</h3>
                        <form id="edit-timetable-form" method="POST">
                            <input type="hidden" id="edit-timetable-id" name="timetable_id">
                            <div class="search-filters">
                                <label for="edit-center-id">Education Center</label>
                                <select id="edit-center-id" name="education_center_id" required onchange="updateEditClasses()">
                                    <option value="">Select Center</option>
                                    <?php
                                    foreach ($centers as $center) {
                                        $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                        echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                                    }
                                    ?>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-class-id">Class</label>
                                <select id="edit-class-id" name="class_id" required onchange="updateEditSections()">
                                    <option value="">Select Class</option>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-section">Section</label>
                                <select id="edit-section" name="section" required>
                                    <option value="">Select Section</option>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-subject-id">Subject</label>
                                <select id="edit-subject-id" name="subject_id">
                                    <option value="">None</option>
                                    <?php
                                    foreach ($subjects as $subject) {
                                        echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                                    }
                                    ?>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-day">Day</label>
                                <select id="edit-day" name="day" required>
                                    <option value="">Select Day</option>
                                    <?php foreach (['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] as $day) : ?>
                                        <option value="<?php echo $day; ?>"><?php echo $day; ?></option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-start-time">Start Time</label>
                                <input type="time" id="edit-start-time" name="start_time" required>
                            </div>
                            <div class="search-filters">
                                <label for="edit-end-time">End Time</label>
                                <input type="time" id="edit-end-time" name="end_time" required>
                            </div>
                            <input type="hidden" name="action" value="su_p_edit_timetable_standalone">
                            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_timetable_nonce'); ?>">
                            <button type="submit" id="update-timetable">Update Slot</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allSlots = <?php echo json_encode(array_map(function($slot) {
            return [
                'id' => $slot->timetable_id,
                'day' => $slot->day,
                'start_time' => $slot->start_time,
                'end_time' => $slot->end_time,
                'class_name' => $slot->class_name,
                'class_id' => $slot->class_id,
                'section' => $slot->section,
                'subject_name' => $slot->subject_name ?: 'N/A',
                'subject_id' => $slot->subject_id,
                'education_center_id' => $slot->education_center_id
            ];
        }, $timetable_slots)); ?>;

        const allClasses = <?php echo json_encode(array_map(function($class) {
            return [
                'id' => $class->id,
                'class_name' => $class->class_name,
                'education_center_id' => $class->education_center_id,
                'sections' => array_filter(explode(',', $class->sections))
            ];
        }, $all_classes)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        function updateEditClasses() {
            const centerId = $('#edit-center-id').val();
            $('#edit-class-id').empty().append('<option value="">Select Class</option>');
            allClasses.forEach(cls => {
                if (cls.education_center_id === centerId) {
                    $('#edit-class-id').append(`<option value="${cls.id}">${cls.class_name}</option>`);
                }
            });
            updateEditSections();
        }

        function updateEditSections() {
            const classId = $('#edit-class-id').val();
            const classData = allClasses.find(c => c.id.toString() === classId.toString());
            $('#edit-section').empty().append('<option value="">Select Section</option>');
            if (classData && classData.sections) {
                classData.sections.forEach(section => {
                    $('#edit-section').append(`<option value="${section}">${section}</option>`);
                });
            }
        }

        // Event handlers for dropdowns
        $('#edit-center-id').on('change', updateEditClasses);
        $('#edit-class-id').on('change', updateEditSections);

        // Edit Button Click
        $(document).on('click', '.edit-timetable', function() {
            const timetableId = $(this).data('timetable-id').toString();
            const slot = allSlots.find(s => s.id.toString() === timetableId);

            if (slot) {
                $('#edit-timetable-id').val(slot.id);
                $('#edit-center-id').val(slot.education_center_id);
                updateEditClasses();
                $('#edit-class-id').val(slot.class_id);
                updateEditSections();
                $('#edit-section').val(slot.section);
                $('#edit-subject-id').val(slot.subject_id || '');
                $('#edit-day').val(slot.day);
                $('#edit-start-time').val(slot.start_time);
                $('#edit-end-time').val(slot.end_time);

                openModal('#edit-timetable-modal');
            } else {
                console.error('Timetable slot not found for ID:', timetableId);
                alert('Timetable slot not found.');
            }
        });

        // Modal Close
        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        // Form Submission via AJAX
        $('#edit-timetable-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();

            const formData = $(this).serialize();
            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>', // Use WordPress AJAX endpoint
                type: 'POST',
                data: formData,
                dataType: 'json', // Expect JSON response
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Timetable slot updated successfully');
                        closeModal('#edit-timetable-modal');
                        location.reload(); // Refresh table
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error occurred during update'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error + ' - ' + xhr.statusText);
                    console.error('AJAX Error:', xhr.responseText);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Standalone Edit (Corrected)
add_action('wp_ajax_su_p_edit_timetable_standalone', 'su_p_edit_timetable_standalone');
function su_p_edit_timetable_standalone() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';

    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_timetable_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $timetable_id = intval($_POST['timetable_id'] ?? 0);
    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_id = intval($_POST['class_id'] ?? 0);
    $section = sanitize_text_field($_POST['section'] ?? '');
    $subject_id = !empty($_POST['subject_id']) ? intval($_POST['subject_id']) : null;
    $day = sanitize_text_field($_POST['day'] ?? '');
    $start_time = sanitize_text_field($_POST['start_time'] ?? '');
    $end_time = sanitize_text_field($_POST['end_time'] ?? '');

    // Validation
    if (empty($timetable_id) || empty($center_id) || empty($class_id) || empty($section) || empty($day) || empty($start_time) || empty($end_time)) {
        wp_send_json_error(['message' => 'All fields except subject are required']);
        wp_die();
    }

    if ($start_time >= $end_time) {
        wp_send_json_error(['message' => 'Start time must be before end time']);
        wp_die();
    }

    // Check for time conflicts
    $conflict = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table_name 
         WHERE education_center_id = %s AND class_id = %d AND section = %s AND day = %s AND (
            (start_time <= %s AND end_time > %s) OR 
            (start_time < %s AND end_time >= %s)
         ) AND timetable_id != %d",
        $center_id, $class_id, $section, $day, $start_time, $start_time, $end_time, $end_time, $timetable_id
    ));

    if ($conflict > 0) {
        wp_send_json_error(['message' => 'Time conflict detected']);
        wp_die();
    }

    // Update the timetable slot
    $result = $wpdb->update(
        $table_name,
        [
            'education_center_id' => $center_id,
            'class_id' => $class_id,
            'section' => $section,
            'subject_id' => $subject_id,
            'day' => $day,
            'start_time' => $start_time,
            'end_time' => $end_time
        ],
        ['timetable_id' => $timetable_id],
        ['%s', '%d', '%s', '%d', '%s', '%s', '%s'],
        ['%d']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update timetable slot: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Timetable slot updated successfully']);
    }
    wp_die();
}

function render_su_p_delete_timetable() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';

    // Fetch all timetable slots
    $query = "SELECT t.*, c.class_name, s.subject_name 
              FROM $table_name t 
              JOIN $class_table c ON t.class_id = c.id 
              LEFT JOIN $subject_table s ON t.subject_id = s.subject_id 
              ORDER BY t.day, t.start_time";
    $timetable_slots = $wpdb->get_results($query);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Timetable Slots</h2>
                <div class="management-table-wrapper">
                    <table id="timetable-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Day</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Class Name</th>
                                <th>Section</th>
                                <th>Subject</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($timetable_slots)) {
                                foreach ($timetable_slots as $slot) {
                                    echo "<tr>
                                        <td>" . esc_html($slot->timetable_id) . "</td>
                                        <td>" . esc_html($slot->day) . "</td>
                                        <td>" . esc_html($slot->start_time) . "</td>
                                        <td>" . esc_html($slot->end_time) . "</td>
                                        <td>" . esc_html($slot->class_name) . "</td>
                                        <td>" . esc_html($slot->section) . "</td>
                                        <td>" . esc_html($slot->subject_name ?: 'N/A') . "</td>
                                        <td>" . esc_html($slot->education_center_id) . "</td>
                                        <td>
                                            <button class='delete-timetable' data-timetable-id='" . esc_attr($slot->timetable_id) . "'>Delete</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="9">No timetable slots found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allSlots = <?php echo json_encode(array_map(function($slot) {
            return [
                'id' => $slot->timetable_id,
                'day' => $slot->day,
                'start_time' => $slot->start_time,
                'end_time' => $slot->end_time,
                'class_name' => $slot->class_name,
                'class_id' => $slot->class_id,
                'section' => $slot->section,
                'subject_name' => $slot->subject_name ?: 'N/A',
                'subject_id' => $slot->subject_id,
                'education_center_id' => $slot->education_center_id
            ];
        }, $timetable_slots)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        // Delete Functionality
        $(document).on('click', '.delete-timetable', function() {
            if (confirm('Are you sure you want to delete this timetable slot?')) {
                showLoader();
                const timetableId = $(this).data('timetable-id').toString();

                fetch('<?php echo esc_url(admin_url('admin-ajax.php')); ?>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({
                        'action': 'su_p_delete_timetable_standalone', // Updated to match the standalone handler
                        'timetable_id': timetableId,
                        'nonce': '<?php echo wp_create_nonce('su_p_timetable_nonce'); ?>'
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(result => {
                    hideLoader();
                    if (result.success) {
                        alert('Timetable slot deleted successfully');
                        // Remove the row from the table client-side
                        $(`button[data-timetable-id="${timetableId}"]`).closest('tr').remove();
                        // Update allSlots array
                        const index = allSlots.findIndex(slot => slot.id.toString() === timetableId);
                        if (index !== -1) allSlots.splice(index, 1);
                        // Check if table is empty
                        if ($('#timetable-table tbody tr').length === 0) {
                            $('#timetable-table tbody').html('<tr><td colspan="9">No timetable slots found.</td></tr>');
                        }
                    } else {
                        alert('Failed to delete timetable slot: ' + (result.data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    hideLoader();
                    console.error('Delete error:', error);
                    alert('An error occurred while deleting the timetable slot: ' + error.message);
                });
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Standalone Delete (Corrected)
add_action('wp_ajax_su_p_delete_timetable_standalone', 'su_p_delete_timetable_standalone');
function su_p_delete_timetable_standalone() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'timetables';

    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_timetable_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $timetable_id = intval($_POST['timetable_id'] ?? 0);
    if (empty($timetable_id)) {
        wp_send_json_error(['message' => 'Invalid timetable ID']);
        wp_die();
    }

    $result = $wpdb->delete($table_name, ['timetable_id' => $timetable_id], ['%d']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete timetable slot: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Timetable slot deleted successfully']);
    }
    wp_die();
}

//subjects
// Main Subjects Management Function
function render_su_p_subjects_management() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    
    // Pagination and filter variables
    $page = isset($_GET['page']) ? max(1, intval($_GET['page'])) : 1;
    $per_page = isset($_GET['per_page']) ? intval($_GET['per_page']) : 10;
    $subject_name_search = isset($_GET['subject_name_search']) ? sanitize_text_field($_GET['subject_name_search']) : '';
    $center_filter = isset($_GET['center_filter']) ? sanitize_text_field($_GET['center_filter']) : '';

    // Fetch ALL subjects data initially
    $table_name = $wpdb->prefix . 'subjects';
    $query = "SELECT * FROM $table_name WHERE 1=1";
    
    $args = [];
    if ($subject_name_search) {
        $query .= " AND subject_name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($subject_name_search) . '%';
    }
    if ($center_filter) {
        $query .= " AND education_center_id = %s";
        $args[] = $center_filter;
    }
    
    $query .= " ORDER BY subject_name";
    $subjects = !empty($args) ? $wpdb->get_results($wpdb->prepare($query, $args)) : $wpdb->get_results($query);
    $total = count($subjects);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Subjects Management</h2>
                <div class="search-filters">
                    <input type="text" id="subject-name-search" placeholder="Search by Subject Name..." value="<?php echo esc_attr($subject_name_search); ?>">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id' " . selected($center_filter, $center_id, false) . ">" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-subject-btn">Add Subject</button>
                    <select id="slots-per-page" name="per_page">
                        <option value="10" <?php selected($per_page, 10); ?>>10</option>
                        <option value="20" <?php selected($per_page, 20); ?>>20</option>
                        <option value="50" <?php selected($per_page, 50); ?>>50</option>
                    </select>
                    <button id="prev-page" class="button" <?php echo $page <= 1 ? 'disabled' : ''; ?>>Previous</button>
                    <span id="page-info">Page <?php echo $page; ?> of <?php echo ceil($total / $per_page); ?> (Total Records: <?php echo $total; ?>)</span>
                    <button id="next-page" class="button" <?php echo $page >= ceil($total / $per_page) ? 'disabled' : ''; ?>>Next</button>
                    <button id="refresh-table" class="button">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools">
                        <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                        <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                        <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                    </div>
                    <table id="subjects-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Subject Name</th>
                                <th>Teacher ID</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            $start = ($page - 1) * $per_page;
                            $end = min($start + $per_page, $total);
                            for ($i = $start; $i < $end && $i < count($subjects); $i++) {
                                $subject = $subjects[$i];
                                echo "<tr>
                                    <td>" . esc_html($subject->subject_id) . "</td>
                                    <td>" . esc_html($subject->subject_name) . "</td>
                                    <td>" . esc_html($subject->teacher_id ?: 'N/A') . "</td>
                                    <td>" . esc_html($subject->education_center_id) . "</td>
                                    <td>
                                        <button class='edit-subject' data-subject-id='" . esc_attr($subject->subject_id) . "'>Edit</button>
                                        <button class='delete-subject' data-subject-id='" . esc_attr($subject->subject_id) . "'>Delete</button>
                                    </td>
                                </tr>";
                            }
                            if (empty($subjects)) {
                                echo '<tr><td colspan="5">No subjects found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Subject Modal -->
    <div class="edu-modal" id="edit-subject-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-subject-modal">×</span>
            <h3>Edit Subject</h3>
            <form id="edit-subject-form" method="POST">
                <input type="hidden" id="edit-subject-id" name="subject_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center</label>
                    <select id="edit-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-subject-name">Subject Name</label>
                    <input type="text" id="edit-subject-name" name="subject_name" required>
                </div>
                <div class="search-filters">
                    <label for="edit-teacher-id">Teacher ID</label>
                    <input type="text" id="edit-teacher-id" name="teacher_id">
                </div>
                <input type="hidden" name="action" value="su_p_edit_subject_standalone">
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_subjects_nonce'); ?>">
                <button type="submit">Update Subject</button>
            </form>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allSubjects = <?php echo json_encode(array_map(function($subject) {
            return [
                'id' => $subject->subject_id,
                'subject_name' => $subject->subject_name,
                'teacher_id' => $subject->teacher_id ?: 'N/A',
                'education_center_id' => $subject->education_center_id
            ];
        }, $subjects)); ?>;

        let currentPage = <?php echo $page; ?>;
        let perPage = <?php echo $per_page; ?>;
        let totalRecords = <?php echo $total; ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        function filterAndRender() {
            showLoader();
            const subjectNameSearch = $('#subject-name-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();

            let filteredSubjects = allSubjects.filter(subject => {
                return (!subjectNameSearch || subject.subject_name.toLowerCase().includes(subjectNameSearch)) &&
                       (!centerFilter || subject.education_center_id === centerFilter);
            });

            totalRecords = filteredSubjects.length;
            const totalPages = Math.ceil(totalRecords / perPage);
            currentPage = Math.min(currentPage, Math.max(1, totalPages));

            const start = (currentPage - 1) * perPage;
            const end = Math.min(start + perPage, filteredSubjects.length);
            const paginatedSubjects = filteredSubjects.slice(start, end);

            let html = '';
            if (paginatedSubjects.length > 0) {
                paginatedSubjects.forEach(subject => {
                    html += `<tr>
                        <td>${subject.id}</td>
                        <td>${subject.subject_name}</td>
                        <td>${subject.teacher_id}</td>
                        <td>${subject.education_center_id}</td>
                        <td>
                            <button class="edit-subject" data-subject-id="${subject.id}">Edit</button>
                            <button class="delete-subject" data-subject-id="${subject.id}">Delete</button>
                        </td>
                    </tr>`;
                });
            } else {
                html = '<tr><td colspan="5">No subjects found.</td></tr>';
            }
            $('#subjects-table tbody').html(html);

            $('#page-info').text(`Page ${currentPage} of ${totalPages} (Total Records: ${totalRecords})`);
            $('#prev-page').prop('disabled', currentPage <= 1);
            $('#next-page').prop('disabled', currentPage >= totalPages);

            hideLoader();
        }

        // Event handlers
        $('#subject-name-search').on('keyup', debounce(filterAndRender, 300));
        $('#center-filter').on('change', filterAndRender);
        $('#slots-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            filterAndRender();
        });
        $('#prev-page').on('click', function() {
            if (currentPage > 1) {
                currentPage--;
                filterAndRender();
            }
        });
        $('#next-page').on('click', function() {
            if (currentPage < Math.ceil(totalRecords / perPage)) {
                currentPage++;
                filterAndRender();
            }
        });
        $('#refresh-table').on('click', function() {
            $('#subject-name-search').val('');
            $('#center-filter').val('');
            currentPage = 1;
            filterAndRender();
        });

        // Add Subject (redirect or modal logic can be added if preferred)
        $('#add-subject-btn').on('click', function() {
            window.location.href = '<?php echo admin_url('admin.php?page=su-p-add-subjects'); ?>';
        });

        // Edit Subject
        $(document).on('click', '.edit-subject', function() {
            const subjectId = $(this).data('subject-id').toString();
            const subject = allSubjects.find(s => s.id.toString() === subjectId);

            if (subject) {
                $('#edit-subject-id').val(subject.id);
                $('#edit-center-id').val(subject.education_center_id);
                $('#edit-subject-name').val(subject.subject_name);
                $('#edit-teacher-id').val(subject.teacher_id === 'N/A' ? '' : subject.teacher_id);

                openModal('#edit-subject-modal');
            } else {
                console.error('Subject not found for ID:', subjectId);
                alert('Subject not found.');
            }
        });

        $('#edit-subject-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Subject updated successfully');
                        closeModal('#edit-subject-modal');
                        location.reload();
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });

        // Delete Subject
        $(document).on('click', '.delete-subject', function() {
            if (confirm('Are you sure you want to delete this subject?')) {
                showLoader();
                const subjectId = $(this).data('subject-id').toString();

                fetch('<?php echo esc_url(admin_url('admin-ajax.php')); ?>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({
                        'action': 'su_p_delete_subject_standalone',
                        'subject_id': subjectId,
                        'nonce': '<?php echo wp_create_nonce('su_p_subjects_nonce'); ?>'
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(result => {
                    hideLoader();
                    if (result.success) {
                        alert('Subject deleted successfully');
                        location.reload();
                    } else {
                        alert('Failed to delete subject: ' + (result.data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    hideLoader();
                    console.error('Delete error:', error);
                    alert('An error occurred while deleting the subject: ' + error.message);
                });
            }
        });

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        // Export functionality
        $('.export-csv').on('click', function() {
            const headers = ['ID', 'Subject Name', 'Teacher ID', 'Education Center ID'];
            const csvRows = [headers.join(',')];
            const filteredSubjects = getFilteredSubjects();
            filteredSubjects.forEach(row => {
                const values = [row.id, row.subject_name, row.teacher_id, row.education_center_id].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const csvContent = csvRows.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'subjects.csv';
            link.click();
        });

        $('.export-pdf').on('click', function() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Subjects Report', 10, 10);
            doc.setFontSize(12);
            const filteredSubjects = getFilteredSubjects();
            const tableData = filteredSubjects.map(row => [row.id, row.subject_name, row.teacher_id, row.education_center_id]);
            doc.autoTable({
                head: [['ID', 'Subject Name', 'Teacher ID', 'Education Center ID']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('subjects.pdf');
        });

        $('.export-excel').on('click', function() {
            const filteredSubjects = getFilteredSubjects();
            const worksheetData = filteredSubjects.map(row => ({
                'ID': row.id,
                'Subject Name': row.subject_name,
                'Teacher ID': row.teacher_id,
                'Education Center ID': row.education_center_id
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Subjects');
            XLSX.writeFile(workbook, 'subjects.xlsx');
        });

        function getFilteredSubjects() {
            const subjectNameSearch = $('#subject-name-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();
            return allSubjects.filter(subject => {
                return (!subjectNameSearch || subject.subject_name.toLowerCase().includes(subjectNameSearch)) &&
                       (!centerFilter || subject.education_center_id === centerFilter);
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Initial render
        filterAndRender();
    });
    </script>
    <?php
    return ob_get_clean();
}

// Standalone Add Subjects Function
function render_su_p_add_subjects() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Add Subject</h2>
                <form id="add-subject-form" method="POST">
                    <div class="search-filters">
                        <label for="add-center-id">Education Center</label>
                        <select id="add-center-id" name="education_center_id" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                            }
                            ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-subject-name">Subject Name</label>
                        <input type="text" id="add-subject-name" name="subject_name" required>
                    </div>
                    <div class="search-filters">
                        <label for="add-teacher-id">Teacher ID</label>
                        <input type="text" id="add-teacher-id" name="teacher_id">
                    </div>
                    <input type="hidden" name="action" value="su_p_add_subject_standalone">
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_subjects_nonce'); ?>">
                    <button type="submit">Add Subject</button>
                </form>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $('#add-subject-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Subject added successfully');
                        $('#add-subject-form')[0].reset();
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Standalone Edit Subjects Function
function render_su_p_edit_subjects() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'subjects';
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    $subjects = $wpdb->get_results("SELECT * FROM $table_name ORDER BY subject_name");

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Edit Subjects</h2>
                <div class="management-table-wrapper">
                    <table id="subjects-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Subject Name</th>
                                <th>Teacher ID</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($subjects)) {
                                foreach ($subjects as $subject) {
                                    echo "<tr>
                                        <td>" . esc_html($subject->subject_id) . "</td>
                                        <td>" . esc_html($subject->subject_name) . "</td>
                                        <td>" . esc_html($subject->teacher_id ?: 'N/A') . "</td>
                                        <td>" . esc_html($subject->education_center_id) . "</td>
                                        <td>
                                            <button class='edit-subject' data-subject-id='" . esc_attr($subject->subject_id) . "'>Edit</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="5">No subjects found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>

                <!-- Edit Subject Modal -->
                <div class="edu-modal" id="edit-subject-modal" style="display: none;">
                    <div class="edu-modal-content">
                        <span class="edu-modal-close" data-modal="edit-subject-modal">×</span>
                        <h3>Edit Subject</h3>
                        <form id="edit-subject-form" method="POST">
                            <input type="hidden" id="edit-subject-id" name="subject_id">
                            <div class="search-filters">
                                <label for="edit-center-id">Education Center</label>
                                <select id="edit-center-id" name="education_center_id" required>
                                    <option value="">Select Center</option>
                                    <?php
                                    foreach ($centers as $center) {
                                        $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                        echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                                    }
                                    ?>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-subject-name">Subject Name</label>
                                <input type="text" id="edit-subject-name" name="subject_name" required>
                            </div>
                            <div class="search-filters">
                                <label for="edit-teacher-id">Teacher ID</label>
                                <input type="text" id="edit-teacher-id" name="teacher_id">
                            </div>
                            <input type="hidden" name="action" value="su_p_edit_subject_standalone">
                            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_subjects_nonce'); ?>">
                            <button type="submit">Update Subject</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allSubjects = <?php echo json_encode(array_map(function($subject) {
            return [
                'id' => $subject->subject_id,
                'subject_name' => $subject->subject_name,
                'teacher_id' => $subject->teacher_id ?: 'N/A',
                'education_center_id' => $subject->education_center_id
            ];
        }, $subjects)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        $(document).on('click', '.edit-subject', function() {
            const subjectId = $(this).data('subject-id').toString();
            const subject = allSubjects.find(s => s.id.toString() === subjectId);

            if (subject) {
                $('#edit-subject-id').val(subject.id);
                $('#edit-center-id').val(subject.education_center_id);
                $('#edit-subject-name').val(subject.subject_name);
                $('#edit-teacher-id').val(subject.teacher_id === 'N/A' ? '' : subject.teacher_id);

                openModal('#edit-subject-modal');
            } else {
                console.error('Subject not found for ID:', subjectId);
                alert('Subject not found.');
            }
        });

        $('#edit-subject-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Subject updated successfully');
                        closeModal('#edit-subject-modal');
                        location.reload();
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Standalone Delete Subjects Function
function render_su_p_delete_subjects() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'subjects';
    $subjects = $wpdb->get_results("SELECT * FROM $table_name ORDER BY subject_name");

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Subjects</h2>
                <div class="management-table-wrapper">
                    <table id="subjects-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Subject Name</th>
                                <th>Teacher ID</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($subjects)) {
                                foreach ($subjects as $subject) {
                                    echo "<tr>
                                        <td>" . esc_html($subject->subject_id) . "</td>
                                        <td>" . esc_html($subject->subject_name) . "</td>
                                        <td>" . esc_html($subject->teacher_id ?: 'N/A') . "</td>
                                        <td>" . esc_html($subject->education_center_id) . "</td>
                                        <td>
                                            <button class='delete-subject' data-subject-id='" . esc_attr($subject->subject_id) . "'>Delete</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="5">No subjects found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allSubjects = <?php echo json_encode(array_map(function($subject) {
            return [
                'id' => $subject->subject_id,
                'subject_name' => $subject->subject_name,
                'teacher_id' => $subject->teacher_id ?: 'N/A',
                'education_center_id' => $subject->education_center_id
            ];
        }, $subjects)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $(document).on('click', '.delete-subject', function() {
            if (confirm('Are you sure you want to delete this subject?')) {
                showLoader();
                const subjectId = $(this).data('subject-id').toString();

                fetch('<?php echo esc_url(admin_url('admin-ajax.php')); ?>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({
                        'action': 'su_p_delete_subject_standalone',
                        'subject_id': subjectId,
                        'nonce': '<?php echo wp_create_nonce('su_p_subjects_nonce'); ?>'
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(result => {
                    hideLoader();
                    if (result.success) {
                        alert('Subject deleted successfully');
                        $(`button[data-subject-id="${subjectId}"]`).closest('tr').remove();
                        const index = allSubjects.findIndex(subject => subject.id.toString() === subjectId);
                        if (index !== -1) allSubjects.splice(index, 1);
                        if ($('#subjects-table tbody tr').length === 0) {
                            $('#subjects-table tbody').html('<tr><td colspan="5">No subjects found.</td></tr>');
                        }
                    } else {
                        alert('Failed to delete subject: ' + (result.data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    hideLoader();
                    console.error('Delete error:', error);
                    alert('An error occurred while deleting the subject: ' + error.message);
                });
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Add Subject
add_action('wp_ajax_su_p_add_subject_standalone', 'su_p_add_subject_standalone');
function su_p_add_subject_standalone() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'subjects';

    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_subjects_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $subject_name = sanitize_text_field($_POST['subject_name'] ?? '');
    $teacher_id = sanitize_text_field($_POST['teacher_id'] ?? '');

    if (empty($center_id) || empty($subject_name)) {
        wp_send_json_error(['message' => 'Education Center ID and Subject Name are required']);
        wp_die();
    }

    $result = $wpdb->insert(
        $table_name,
        [
            'education_center_id' => $center_id,
            'subject_name' => $subject_name,
            'teacher_id' => $teacher_id ?: null
        ],
        ['%s', '%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add subject: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Subject added successfully']);
    }
    wp_die();
}

// AJAX Handler for Edit Subject
add_action('wp_ajax_su_p_edit_subject_standalone', 'su_p_edit_subject_standalone');
function su_p_edit_subject_standalone() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'subjects';

    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_subjects_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $subject_id = intval($_POST['subject_id'] ?? 0);
    $center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $subject_name = sanitize_text_field($_POST['subject_name'] ?? '');
    $teacher_id = sanitize_text_field($_POST['teacher_id'] ?? '');

    if (empty($subject_id) || empty($center_id) || empty($subject_name)) {
        wp_send_json_error(['message' => 'Subject ID, Education Center ID, and Subject Name are required']);
        wp_die();
    }

    $result = $wpdb->update(
        $table_name,
        [
            'education_center_id' => $center_id,
            'subject_name' => $subject_name,
            'teacher_id' => $teacher_id ?: null
        ],
        ['subject_id' => $subject_id],
        ['%s', '%s', '%s'],
        ['%d']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update subject: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Subject updated successfully']);
    }
    wp_die();
}

// AJAX Handler for Delete Subject
add_action('wp_ajax_su_p_delete_subject_standalone', 'su_p_delete_subject_standalone');
function su_p_delete_subject_standalone() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'subjects';

    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_subjects_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $subject_id = intval($_POST['subject_id'] ?? 0);
    if (empty($subject_id)) {
        wp_send_json_error(['message' => 'Invalid subject ID']);
        wp_die();
    }

    $result = $wpdb->delete($table_name, ['subject_id' => $subject_id], ['%d']);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete subject: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Subject deleted successfully']);
    }
    wp_die();
}

//homework
// Main Homework Management Function
function render_su_p_homework_management() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);

    // Pagination and filter variables
    $page = isset($_GET['page']) ? max(1, intval($_GET['page'])) : 1;
    $per_page = isset($_GET['per_page']) ? intval($_GET['per_page']) : 10;
    $title_search = isset($_GET['title_search']) ? sanitize_text_field($_GET['title_search']) : '';
    $center_filter = isset($_GET['center_filter']) ? sanitize_text_field($_GET['center_filter']) : '';
    $class_filter = isset($_GET['class_filter']) ? intval($_GET['class_filter']) : '';
    $section_filter = isset($_GET['section_filter']) ? sanitize_text_field($_GET['section_filter']) : '';

    // Fetch ALL homework data initially
    $homework_table = $wpdb->prefix . 'homework';
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';

    $query = "SELECT h.*, c.class_name, c.id as class_id, s.subject_name 
              FROM $homework_table h 
              JOIN $class_table c ON h.class_name = c.class_name AND h.education_center_id = c.education_center_id
              LEFT JOIN $subject_table s ON h.subject_id = s.subject_id 
              WHERE 1=1";

    $args = [];
    if ($title_search) {
        $query .= " AND h.title LIKE %s";
        $args[] = '%' . $wpdb->esc_like($title_search) . '%';
    }
    if ($center_filter) {
        $query .= " AND h.education_center_id = %s";
        $args[] = $center_filter;
    }
    if ($class_filter) {
        $query .= " AND c.id = %d";
        $args[] = $class_filter;
    }
    if ($section_filter) {
        $query .= " AND h.section = %s";
        $args[] = $section_filter;
    }

    $query .= " ORDER BY h.due_date";
    $homeworks = !empty($args) ? $wpdb->get_results($wpdb->prepare($query, $args)) : $wpdb->get_results($query);
    $total = count($homeworks);

    // Fetch classes and subjects
    $classes_query = $center_filter 
        ? $wpdb->prepare("SELECT id, class_name, sections, education_center_id FROM $class_table WHERE education_center_id = %s", $center_filter) 
        : "SELECT id, class_name, sections, education_center_id FROM $class_table";
    $all_classes = $wpdb->get_results($classes_query);
    $sections_data = [];
    foreach ($all_classes as $class) {
        $sections_data[$class->id] = array_filter(explode(',', $class->sections));
    }

    $subjects_query = $center_filter 
        ? $wpdb->prepare("SELECT subject_id, subject_name FROM $subject_table WHERE education_center_id = %s", $center_filter) 
        : "SELECT subject_id, subject_name FROM $subject_table";
    $subjects = $wpdb->get_results($subjects_query);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Homework Management</h2>
                <div class="search-filters">
                    <input type="text" id="title-search" placeholder="Search by Title..." value="<?php echo esc_attr($title_search); ?>">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id' " . selected($center_filter, $center_id, false) . ">" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="class-filter">
                        <option value="">All Classes</option>
                        <?php
                        foreach ($all_classes as $class) {
                            echo "<option value='" . esc_attr($class->id) . "' " . selected($class_filter, $class->id, false) . ">" . esc_html($class->class_name) . "</option>";
                        }
                        ?>
                    </select>
                    <select id="section-filter">
                        <option value="">All Sections</option>
                        <?php
                        $unique_sections = [];
                        foreach ($sections_data as $sections) {
                            foreach ($sections as $sec) {
                                if (!in_array($sec, $unique_sections)) {
                                    $unique_sections[] = $sec;
                                    echo "<option value='$sec' " . selected($section_filter, $sec, false) . ">" . esc_html($sec) . "</option>";
                                }
                            }
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-homework-btn">Assign Homework</button>
                    <select id="slots-per-page" name="per_page">
                        <option value="10" <?php selected($per_page, 10); ?>>10</option>
                        <option value="20" <?php selected($per_page, 20); ?>>20</option>
                        <option value="50" <?php selected($per_page, 50); ?>>50</option>
                    </select>
                    <button id="prev-page" class="button" <?php echo $page <= 1 ? 'disabled' : ''; ?>>Previous</button>
                    <span id="page-info">Page <?php echo $page; ?> of <?php echo ceil($total / $per_page); ?> (Total Records: <?php echo $total; ?>)</span>
                    <button id="next-page" class="button" <?php echo $page >= ceil($total / $per_page) ? 'disabled' : ''; ?>>Next</button>
                    <button id="refresh-table" class="button">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools">
                        <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                        <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                        <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                    </div>
                    <table id="homework-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Subject</th>
                                <th>Class</th>
                                <th>Section</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            $start = ($page - 1) * $per_page;
                            $end = min($start + $per_page, $total);
                            for ($i = $start; $i < $end && $i < count($homeworks); $i++) {
                                $homework = $homeworks[$i];
                                echo "<tr>
                                    <td>" . esc_html($homework->homework_id) . "</td>
                                    <td>" . esc_html($homework->title) . "</td>
                                    <td>" . esc_html($homework->subject_name ?: 'N/A') . "</td>
                                    <td>" . esc_html($homework->class_name) . "</td>
                                    <td>" . esc_html($homework->section) . "</td>
                                    <td>" . esc_html($homework->due_date) . "</td>
                                    <td>" . esc_html($homework->status) . "</td>
                                    <td>" . esc_html($homework->education_center_id) . "</td>
                                    <td>
                                        <button class='edit-homework' data-homework-id='" . esc_attr($homework->homework_id) . "'>Edit</button>
                                        <button class='delete-homework' data-homework-id='" . esc_attr($homework->homework_id) . "'>Delete</button>
                                        <button class='mark-complete' data-homework-id='" . esc_attr($homework->homework_id) . "' " . ($homework->status === 'completed' ? 'disabled' : '') . ">Mark Complete</button>
                                    </td>
                                </tr>";
                            }
                            if (empty($homeworks)) {
                                echo '<tr><td colspan="9">No homework assigned yet.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Homework Modal -->
    <div class="edu-modal" id="edit-homework-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-homework-modal">×</span>
            <h3>Edit Homework</h3>
            <form id="edit-homework-form" method="POST">
                <input type="hidden" id="edit-homework-id" name="homework_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center</label>
                    <select id="edit-center-id" name="education_center_id" required onchange="updateEditClasses()">
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-class-id">Class</label>
                    <select id="edit-class-id" name="class_id" required onchange="updateEditSections()">
                        <option value="">Select Class</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-section">Section</label>
                    <select id="edit-section" name="section" required>
                        <option value="">Select Section</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-subject-id">Subject</label>
                    <select id="edit-subject-id" name="subject_id" required>
                        <option value="">Select Subject</option>
                        <?php
                        foreach ($subjects as $subject) {
                            echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-title">Title</label>
                    <input type="text" id="edit-title" name="title" required>
                </div>
                <div class="search-filters">
                    <label for="edit-description">Description</label>
                    <textarea id="edit-description" name="description" rows="3" required></textarea>
                </div>
                <div class="search-filters">
                    <label for="edit-due-date">Due Date</label>
                    <input type="date" id="edit-due-date" name="due_date" required min="<?php echo date('Y-m-d'); ?>">
                </div>
                <input type="hidden" name="action" value="su_p_edit_homework_standalone">
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_homework_nonce'); ?>">
                <button type="submit">Update Homework</button>
            </form>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allHomeworks = <?php echo json_encode(array_map(function($homework) {
            return [
                'id' => $homework->homework_id,
                'title' => $homework->title,
                'subject_id' => $homework->subject_id,
                'subject_name' => $homework->subject_name ?: 'N/A',
                'class_name' => $homework->class_name,
                'class_id' => $homework->class_id, // Use pre-fetched class_id from the JOIN
                'section' => $homework->section,
                'due_date' => $homework->due_date,
                'status' => $homework->status,
                'education_center_id' => $homework->education_center_id,
                'description' => $homework->description
            ];
        }, $homeworks)); ?>;

        const allClasses = <?php echo json_encode(array_map(function($class) {
            return [
                'id' => $class->id,
                'class_name' => $class->class_name,
                'education_center_id' => $class->education_center_id,
                'sections' => array_filter(explode(',', $class->sections))
            ];
        }, $all_classes)); ?>;

        let currentPage = <?php echo $page; ?>;
        let perPage = <?php echo $per_page; ?>;
        let totalRecords = <?php echo $total; ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        function filterAndRender() {
            showLoader();
            const titleSearch = $('#title-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();
            const classFilter = $('#class-filter').val();
            const sectionFilter = $('#section-filter').val();

            let filteredHomeworks = allHomeworks.filter(homework => {
                return (!titleSearch || homework.title.toLowerCase().includes(titleSearch)) &&
                       (!centerFilter || homework.education_center_id === centerFilter) &&
                       (!classFilter || homework.class_id == classFilter) &&
                       (!sectionFilter || homework.section === sectionFilter);
            });

            totalRecords = filteredHomeworks.length;
            const totalPages = Math.ceil(totalRecords / perPage);
            currentPage = Math.min(currentPage, Math.max(1, totalPages));

            const start = (currentPage - 1) * perPage;
            const end = Math.min(start + perPage, filteredHomeworks.length);
            const paginatedHomeworks = filteredHomeworks.slice(start, end);

            let html = '';
            if (paginatedHomeworks.length > 0) {
                paginatedHomeworks.forEach(homework => {
                    html += `<tr>
                        <td>${homework.id}</td>
                        <td>${homework.title}</td>
                        <td>${homework.subject_name}</td>
                        <td>${homework.class_name}</td>
                        <td>${homework.section}</td>
                        <td>${homework.due_date}</td>
                        <td>${homework.status}</td>
                        <td>${homework.education_center_id}</td>
                        <td>
                            <button class="edit-homework" data-homework-id="${homework.id}">Edit</button>
                            <button class="delete-homework" data-homework-id="${homework.id}">Delete</button>
                            <button class="mark-complete" data-homework-id="${homework.id}" ${homework.status === 'completed' ? 'disabled' : ''}>Mark Complete</button>
                        </td>
                    </tr>`;
                });
            } else {
                html = '<tr><td colspan="9">No homework assigned yet.</td></tr>';
            }
            $('#homework-table tbody').html(html);

            $('#page-info').text(`Page ${currentPage} of ${totalPages} (Total Records: ${totalRecords})`);
            $('#prev-page').prop('disabled', currentPage <= 1);
            $('#next-page').prop('disabled', currentPage >= totalPages);

            hideLoader();
        }

        // Event handlers
        $('#title-search').on('keyup', debounce(filterAndRender, 300));
        $('#center-filter, #class-filter, #section-filter').on('change', filterAndRender);
        $('#slots-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            filterAndRender();
        });
        $('#prev-page').on('click', function() {
            if (currentPage > 1) {
                currentPage--;
                filterAndRender();
            }
        });
        $('#next-page').on('click', function() {
            if (currentPage < Math.ceil(totalRecords / perPage)) {
                currentPage++;
                filterAndRender();
            }
        });
        $('#refresh-table').on('click', function() {
            $('#title-search').val('');
            $('#center-filter').val('');
            $('#class-filter').val('');
            $('#section-filter').val('');
            currentPage = 1;
            filterAndRender();
        });

        $('#add-homework-btn').on('click', function() {
            window.location.href = '<?php echo admin_url('admin.php?page=su-p-add-homework'); ?>';
        });

        // Edit Homework
        $(document).on('click', '.edit-homework', function() {
            const homeworkId = $(this).data('homework-id').toString();
            const homework = allHomeworks.find(h => h.id.toString() === homeworkId);

            if (homework) {
                $('#edit-homework-id').val(homework.id);
                $('#edit-center-id').val(homework.education_center_id);
                updateEditClasses();
                $('#edit-class-id').val(homework.class_id);
                updateEditSections();
                $('#edit-section').val(homework.section);
                $('#edit-subject-id').val(homework.subject_id);
                $('#edit-title').val(homework.title);
                $('#edit-description').val(homework.description);
                $('#edit-due-date').val(homework.due_date);

                openModal('#edit-homework-modal');
            } else {
                alert('Homework not found.');
            }
        });

        // Edit Form Submission
        $('#edit-homework-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Homework updated successfully');
                        closeModal('#edit-homework-modal');
                        const homeworkId = $('#edit-homework-id').val();
                        const updatedHomework = allHomeworks.find(h => h.id.toString() === homeworkId);
                        if (updatedHomework) {
                            updatedHomework.education_center_id = $('#edit-center-id').val();
                            updatedHomework.class_id = $('#edit-class-id').val();
                            updatedHomework.class_name = $('#edit-class-id option:selected').text();
                            updatedHomework.section = $('#edit-section').val();
                            updatedHomework.subject_id = $('#edit-subject-id').val();
                            updatedHomework.subject_name = $('#edit-subject-id option:selected').text() === 'Select Subject' ? 'N/A' : $('#edit-subject-id option:selected').text();
                            updatedHomework.title = $('#edit-title').val();
                            updatedHomework.description = $('#edit-description').val();
                            updatedHomework.due_date = $('#edit-due-date').val();
                        }
                        filterAndRender();
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });

        // Delete Homework
        $(document).on('click', '.delete-homework', function() {
            if (confirm('Are you sure you want to delete this homework?')) {
                showLoader();
                const homeworkId = $(this).data('homework-id').toString();

                $.ajax({
                    url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                    type: 'POST',
                    data: {
                        action: 'su_p_delete_homework_standalone',
                        homework_id: homeworkId,
                        nonce: '<?php echo wp_create_nonce('su_p_homework_nonce'); ?>'
                    },
                    dataType: 'json',
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            alert('Homework deleted successfully');
                            const index = allHomeworks.findIndex(h => h.id.toString() === homeworkId);
                            if (index !== -1) {
                                allHomeworks.splice(index, 1);
                            }
                            filterAndRender();
                        } else {
                            alert('Failed to delete homework: ' + (response.data.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr, status, error) {
                        hideLoader();
                        alert('AJAX error: ' + error);
                    }
                });
            }
        });

        // Mark Complete
        $(document).on('click', '.mark-complete', function() {
            const homeworkId = $(this).data('homework-id').toString();
            showLoader();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: {
                    action: 'su_p_mark_homework_complete',
                    homework_id: homeworkId,
                    nonce: '<?php echo wp_create_nonce('su_p_homework_nonce'); ?>'
                },
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const homework = allHomeworks.find(h => h.id.toString() === homeworkId);
                        if (homework) {
                            homework.status = 'completed';
                            filterAndRender();
                        }
                    } else {
                        alert('Error marking homework as complete: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        // Export functionality
        $('.export-csv').on('click', function() {
            const headers = ['ID', 'Title', 'Subject', 'Class', 'Section', 'Due Date', 'Status', 'Education Center ID'];
            const csvRows = [headers.join(',')];
            const filteredHomeworks = getFilteredHomeworks();
            filteredHomeworks.forEach(row => {
                const values = [row.id, row.title, row.subject_name, row.class_name, row.section, row.due_date, row.status, row.education_center_id].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const csvContent = csvRows.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'homework.csv';
            link.click();
        });

        $('.export-pdf').on('click', function() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Homework Report', 10, 10);
            doc.setFontSize(12);
            const filteredHomeworks = getFilteredHomeworks();
            const tableData = filteredHomeworks.map(row => [row.id, row.title, row.subject_name, row.class_name, row.section, row.due_date, row.status, row.education_center_id]);
            doc.autoTable({
                head: [['ID', 'Title', 'Subject', 'Class', 'Section', 'Due Date', 'Status', 'Education Center ID']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('homework.pdf');
        });

        $('.export-excel').on('click', function() {
            const filteredHomeworks = getFilteredHomeworks();
            const worksheetData = filteredHomeworks.map(row => ({
                'ID': row.id,
                'Title': row.title,
                'Subject': row.subject_name,
                'Class': row.class_name,
                'Section': row.section,
                'Due Date': row.due_date,
                'Status': row.status,
                'Education Center ID': row.education_center_id
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Homework');
            XLSX.writeFile(workbook, 'homework.xlsx');
        });

        function getFilteredHomeworks() {
            const titleSearch = $('#title-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();
            const classFilter = $('#class-filter').val();
            const sectionFilter = $('#section-filter').val();
            return allHomeworks.filter(homework => {
                return (!titleSearch || homework.title.toLowerCase().includes(titleSearch)) &&
                       (!centerFilter || homework.education_center_id === centerFilter) &&
                       (!classFilter || homework.class_id == classFilter) &&
                       (!sectionFilter || homework.section === sectionFilter);
            });
        }

        function updateEditClasses() {
            const centerId = $('#edit-center-id').val();
            $('#edit-class-id').empty().append('<option value="">Select Class</option>');
            allClasses.forEach(cls => {
                if (cls.education_center_id === centerId) {
                    $('#edit-class-id').append(`<option value="${cls.id}">${cls.class_name}</option>`);
                }
            });
            updateEditSections();
        }

        function updateEditSections() {
            const classId = $('#edit-class-id').val();
            const classData = allClasses.find(c => c.id.toString() === classId.toString());
            $('#edit-section').empty().append('<option value="">Select Section</option>');
            if (classData && classData.sections) {
                classData.sections.forEach(section => {
                    $('#edit-section').append(`<option value="${section}">${section}</option>`);
                });
            }
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        filterAndRender();
    });
    </script>
    <?php
    return ob_get_clean();
}

// Standalone Add Homework Function
function render_su_p_add_homework() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';
    $all_classes = $wpdb->get_results("SELECT id, class_name, sections, education_center_id FROM $class_table");
    $subjects = $wpdb->get_results("SELECT subject_id, subject_name FROM $subject_table");

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Assign New Homework</h2>
                <form id="add-homework-form" method="POST">
                    <div class="search-filters">
                        <label for="add-center-id">Education Center</label>
                        <select id="add-center-id" name="education_center_id" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                            }
                            ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-class-id">Class</label>
                        <select id="add-class-id" name="class_id" required>
                            <option value="">Select Class</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-section">Section</label>
                        <select id="add-section" name="section" required>
                            <option value="">Select Section</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-subject-id">Subject</label>
                        <select id="add-subject-id" name="subject_id" required>
                            <option value="">Select Subject</option>
                            <?php
                            foreach ($subjects as $subject) {
                                echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                            }
                            ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-title">Title</label>
                        <input type="text" id="add-title" name="title" required>
                    </div>
                    <div class="search-filters">
                        <label for="add-description">Description</label>
                        <textarea id="add-description" name="description" rows="3" required></textarea>
                    </div>
                    <div class="search-filters">
                        <label for="add-due-date">Due Date</label>
                        <input type="date" id="add-due-date" name="due_date" required min="<?php echo date('Y-m-d'); ?>">
                    </div>
                    <input type="hidden" name="action" value="su_p_add_homework_standalone">
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_homework_nonce'); ?>">
                    <button type="submit">Assign Homework</button>
                </form>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allClasses = <?php echo json_encode(array_map(function($class) {
            return [
                'id' => $class->id,
                'class_name' => $class->class_name,
                'education_center_id' => $class->education_center_id,
                'sections' => array_filter(explode(',', $class->sections))
            ];
        }, $all_classes)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function updateAddClasses() {
            const centerId = $('#add-center-id').val();
            $('#add-class-id').empty().append('<option value="">Select Class</option>');
            allClasses.forEach(cls => {
                if (cls.education_center_id === centerId) {
                    $('#add-class-id').append(`<option value="${cls.id}">${cls.class_name}</option>`);
                }
            });
            updateAddSections();
        }

        function updateAddSections() {
            const classId = $('#add-class-id').val();
            const classData = allClasses.find(c => c.id.toString() === classId.toString());
            $('#add-section').empty().append('<option value="">Select Section</option>');
            if (classData && classData.sections) {
                classData.sections.forEach(section => {
                    $('#add-section').append(`<option value="${section}">${section}</option>`);
                });
            }
        }

        $('#add-center-id').on('change', updateAddClasses);
        $('#add-class-id').on('change', updateAddSections);

        $('#add-homework-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Homework assigned successfully');
                        $('#add-homework-form')[0].reset();
                        $('#add-class-id').html('<option value="">Select Class</option>');
                        $('#add-section').html('<option value="">Select Section</option>');
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Standalone Edit Homework Function
function render_su_p_edit_homework() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    $homework_table = $wpdb->prefix . 'homework';
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';

    $query = "SELECT h.*, c.class_name, c.id as class_id, s.subject_name 
              FROM $homework_table h 
              JOIN $class_table c ON h.class_name = c.class_name AND h.education_center_id = c.education_center_id
              LEFT JOIN $subject_table s ON h.subject_id = s.subject_id 
              ORDER BY h.due_date";
    $homeworks = $wpdb->get_results($query);

    $all_classes = $wpdb->get_results("SELECT id, class_name, sections, education_center_id FROM $class_table");
    $subjects = $wpdb->get_results("SELECT subject_id, subject_name FROM $subject_table");

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Edit Homework</h2>
                <div class="management-table-wrapper">
                    <table id="homework-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Subject</th>
                                <th>Class</th>
                                <th>Section</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($homeworks)) {
                                foreach ($homeworks as $homework) {
                                    echo "<tr>
                                        <td>" . esc_html($homework->homework_id) . "</td>
                                        <td>" . esc_html($homework->title) . "</td>
                                        <td>" . esc_html($homework->subject_name ?: 'N/A') . "</td>
                                        <td>" . esc_html($homework->class_name) . "</td>
                                        <td>" . esc_html($homework->section) . "</td>
                                        <td>" . esc_html($homework->due_date) . "</td>
                                        <td>" . esc_html($homework->status) . "</td>
                                        <td>" . esc_html($homework->education_center_id) . "</td>
                                        <td>
                                            <button class='edit-homework' data-homework-id='" . esc_attr($homework->homework_id) . "'>Edit</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="9">No homework found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>

                <!-- Edit Homework Modal -->
                <div class="edu-modal" id="edit-homework-modal" style="display: none;">
                    <div class="edu-modal-content">
                        <span class="edu-modal-close" data-modal="edit-homework-modal">×</span>
                        <h3>Edit Homework</h3>
                        <form id="edit-homework-form" method="POST">
                            <input type="hidden" id="edit-homework-id" name="homework_id">
                            <div class="search-filters">
                                <label for="edit-center-id">Education Center</label>
                                <select id="edit-center-id" name="education_center_id" required onchange="updateEditClasses()">
                                    <option value="">Select Center</option>
                                    <?php
                                    foreach ($centers as $center) {
                                        $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                        echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                                    }
                                    ?>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-class-id">Class</label>
                                <select id="edit-class-id" name="class_id" required onchange="updateEditSections()">
                                    <option value="">Select Class</option>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-section">Section</label>
                                <select id="edit-section" name="section" required>
                                    <option value="">Select Section</option>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-subject-id">Subject</label>
                                <select id="edit-subject-id" name="subject_id" required>
                                    <option value="">Select Subject</option>
                                    <?php
                                    foreach ($subjects as $subject) {
                                        echo "<option value='" . esc_attr($subject->subject_id) . "'>" . esc_html($subject->subject_name) . "</option>";
                                    }
                                    ?>
                                </select>
                            </div>
                            <div class="search-filters">
                                <label for="edit-title">Title</label>
                                <input type="text" id="edit-title" name="title" required>
                            </div>
                            <div class="search-filters">
                                <label for="edit-description">Description</label>
                                <textarea id="edit-description" name="description" rows="3" required></textarea>
                            </div>
                            <div class="search-filters">
                                <label for="edit-due-date">Due Date</label>
                                <input type="date" id="edit-due-date" name="due_date" required min="<?php echo date('Y-m-d'); ?>">
                            </div>
                            <input type="hidden" name="action" value="su_p_edit_homework_standalone">
                            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_homework_nonce'); ?>">
                            <button type="submit">Update Homework</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allHomeworks = <?php echo json_encode(array_map(function($homework) {
            return [
                'id' => $homework->homework_id,
                'title' => $homework->title,
                'subject_id' => $homework->subject_id,
                'subject_name' => $homework->subject_name ?: 'N/A',
                'class_name' => $homework->class_name,
                'class_id' => $homework->class_id,
                'section' => $homework->section,
                'due_date' => $homework->due_date,
                'status' => $homework->status,
                'education_center_id' => $homework->education_center_id,
                'description' => $homework->description
            ];
        }, $homeworks)); ?>;

        const allClasses = <?php echo json_encode(array_map(function($class) {
            return [
                'id' => $class->id,
                'class_name' => $class->class_name,
                'education_center_id' => $class->education_center_id,
                'sections' => array_filter(explode(',', $class->sections))
            ];
        }, $all_classes)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        $(document).on('click', '.edit-homework', function() {
            const homeworkId = $(this).data('homework-id').toString();
            const homework = allHomeworks.find(h => h.id.toString() === homeworkId);

            if (homework) {
                $('#edit-homework-id').val(homework.id);
                $('#edit-center-id').val(homework.education_center_id);
                updateEditClasses();
                $('#edit-class-id').val(homework.class_id);
                updateEditSections();
                $('#edit-section').val(homework.section);
                $('#edit-subject-id').val(homework.subject_id);
                $('#edit-title').val(homework.title);
                $('#edit-description').val(homework.description);
                $('#edit-due-date').val(homework.due_date);

                openModal('#edit-homework-modal');
            } else {
                alert('Homework not found.');
            }
        });

        $('#edit-homework-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Homework updated successfully');
                        closeModal('#edit-homework-modal');
                        location.reload();
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });

        function updateEditClasses() {
            const centerId = $('#edit-center-id').val();
            $('#edit-class-id').empty().append('<option value="">Select Class</option>');
            allClasses.forEach(cls => {
                if (cls.education_center_id === centerId) {
                    $('#edit-class-id').append(`<option value="${cls.id}">${cls.class_name}</option>`);
                }
            });
            updateEditSections();
        }

        function updateEditSections() {
            const classId = $('#edit-class-id').val();
            const classData = allClasses.find(c => c.id.toString() === classId.toString());
            $('#edit-section').empty().append('<option value="">Select Section</option>');
            if (classData && classData.sections) {
                classData.sections.forEach(section => {
                    $('#edit-section').append(`<option value="${section}">${section}</option>`);
                });
            }
        }

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Standalone Delete Homework Function
function render_su_p_delete_homework() {
    global $wpdb;
    $homework_table = $wpdb->prefix . 'homework';
    $class_table = $wpdb->prefix . 'class_sections';
    $subject_table = $wpdb->prefix . 'subjects';

    $query = "SELECT h.*, c.class_name, c.id as class_id, s.subject_name 
              FROM $homework_table h 
              JOIN $class_table c ON h.class_name = c.class_name AND h.education_center_id = c.education_center_id
              LEFT JOIN $subject_table s ON h.subject_id = s.subject_id 
              ORDER BY h.due_date";
    $homeworks = $wpdb->get_results($query);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Homework</h2>
                <div class="management-table-wrapper">
                    <table id="homework-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Subject</th>
                                <th>Class</th>
                                <th>Section</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($homeworks)) {
                                foreach ($homeworks as $homework) {
                                    echo "<tr>
                                        <td>" . esc_html($homework->homework_id) . "</td>
                                        <td>" . esc_html($homework->title) . "</td>
                                        <td>" . esc_html($homework->subject_name ?: 'N/A') . "</td>
                                        <td>" . esc_html($homework->class_name) . "</td>
                                        <td>" . esc_html($homework->section) . "</td>
                                        <td>" . esc_html($homework->due_date) . "</td>
                                        <td>" . esc_html($homework->status) . "</td>
                                        <td>" . esc_html($homework->education_center_id) . "</td>
                                        <td>
                                            <button class='delete-homework' data-homework-id='" . esc_attr($homework->homework_id) . "'>Delete</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="9">No homework found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allHomeworks = <?php echo json_encode(array_map(function($homework) {
            return [
                'id' => $homework->homework_id,
                'title' => $homework->title,
                'subject_name' => $homework->subject_name ?: 'N/A',
                'class_name' => $homework->class_name,
                'section' => $homework->section,
                'due_date' => $homework->due_date,
                'status' => $homework->status,
                'education_center_id' => $homework->education_center_id
            ];
        }, $homeworks)); ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $(document).on('click', '.delete-homework', function() {
            if (confirm('Are you sure you want to delete this homework?')) {
                showLoader();
                const homeworkId = $(this).data('homework-id').toString();

                fetch('<?php echo esc_url(admin_url('admin-ajax.php')); ?>', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams({
                        'action': 'su_p_delete_homework_standalone',
                        'homework_id': homeworkId,
                        'nonce': '<?php echo wp_create_nonce('su_p_homework_nonce'); ?>'
                    })
                })
                .then(response => response.json())
                .then(result => {
                    hideLoader();
                    if (result.success) {
                        alert('Homework deleted successfully');
                        $(`button[data-homework-id="${homeworkId}"]`).closest('tr').remove();
                        const index = allHomeworks.findIndex(h => h.id.toString() === homeworkId);
                        if (index !== -1) allHomeworks.splice(index, 1);
                        if ($('#homework-table tbody tr').length === 0) {
                            $('#homework-table tbody').html('<tr><td colspan="9">No homework found.</td></tr>');
                        }
                    } else {
                        alert('Failed to delete homework: ' + (result.data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    hideLoader();
                    alert('An error occurred: ' + error.message);
                });
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Add Homework
add_action('wp_ajax_su_p_add_homework_standalone', 'su_p_add_homework_standalone');
function su_p_add_homework_standalone() {
    global $wpdb;

    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_homework_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $education_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_id = intval($_POST['class_id'] ?? 0);
    $section = sanitize_text_field($_POST['section'] ?? '');
    $subject_id = intval($_POST['subject_id'] ?? 0);
    $title = sanitize_text_field($_POST['title'] ?? '');
    $description = sanitize_textarea_field($_POST['description'] ?? '');
    $due_date = sanitize_text_field($_POST['due_date'] ?? '');

    if (empty($education_center_id) || empty($class_id) || empty($section) || empty($subject_id) || empty($title) || empty($description) || empty($due_date)) {
        wp_send_json_error(['message' => 'All fields are required']);
        wp_die();
    }

    $class_table = $wpdb->prefix . 'class_sections';
    $class_name = $wpdb->get_var($wpdb->prepare("SELECT class_name FROM $class_table WHERE id = %d AND education_center_id = %s", $class_id, $education_center_id));
    if (!$class_name) {
        wp_send_json_error(['message' => 'Invalid class or education center']);
        wp_die();
    }

    $homework_table = $wpdb->prefix . 'homework';
    $result = $wpdb->insert(
        $homework_table,
        [
            'education_center_id' => $education_center_id,
            'class_name' => $class_name,
            'section' => $section,
            'subject_id' => $subject_id,
            'title' => $title,
            'description' => $description,
            'due_date' => $due_date,
            'status' => 'active'
        ],
        ['%s', '%s', '%s', '%d', '%s', '%s', '%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to assign homework: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Homework assigned successfully']);
    }
    wp_die();
}

// AJAX Handler for Edit Homework
add_action('wp_ajax_su_p_edit_homework_standalone', 'su_p_edit_homework_standalone');
function su_p_edit_homework_standalone() {
    global $wpdb;

    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_homework_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $homework_id = intval($_POST['homework_id'] ?? 0);
    $education_center_id = sanitize_text_field($_POST['education_center_id'] ?? '');
    $class_id = intval($_POST['class_id'] ?? 0);
    $section = sanitize_text_field($_POST['section'] ?? '');
    $subject_id = intval($_POST['subject_id'] ?? 0);
    $title = sanitize_text_field($_POST['title'] ?? '');
    $description = sanitize_textarea_field($_POST['description'] ?? '');
    $due_date = sanitize_text_field($_POST['due_date'] ?? '');

    if (empty($homework_id) || empty($education_center_id) || empty($class_id) || empty($section) || empty($subject_id) || empty($title) || empty($description) || empty($due_date)) {
        wp_send_json_error(['message' => 'All fields are required']);
        wp_die();
    }

    $class_table = $wpdb->prefix . 'class_sections';
    $class_name = $wpdb->get_var($wpdb->prepare("SELECT class_name FROM $class_table WHERE id = %d AND education_center_id = %s", $class_id, $education_center_id));
    if (!$class_name) {
        wp_send_json_error(['message' => 'Invalid class or education center']);
        wp_die();
    }

    $homework_table = $wpdb->prefix . 'homework';
    $result = $wpdb->update(
        $homework_table,
        [
            'education_center_id' => $education_center_id,
            'class' => $class_name,
            'section' => $section,
            'subject_id' => $subject_id,
            'title' => $title,
            'description' => $description,
            'due_date' => $due_date
        ],
        ['homework_id' => $homework_id],
        ['%s', '%s', '%s', '%d', '%s', '%s', '%s'],
        ['%d']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update homework: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Homework updated successfully']);
    }
    wp_die();
}

// AJAX Handler for Delete Homework
add_action('wp_ajax_su_p_delete_homework_standalone', 'su_p_delete_homework_standalone');
function su_p_delete_homework_standalone() {
    global $wpdb;

    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_homework_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $homework_id = intval($_POST['homework_id'] ?? 0);
    if (empty($homework_id)) {
        wp_send_json_error(['message' => 'Invalid homework ID']);
        wp_die();
    }

    $homework_table = $wpdb->prefix . 'homework';
    $result = $wpdb->delete($homework_table, ['homework_id' => $homework_id], ['%d']);

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete homework: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Homework deleted successfully']);
    }
    wp_die();
}

// AJAX Handler for Mark Homework Complete
add_action('wp_ajax_su_p_mark_homework_complete', 'su_p_mark_homework_complete');
function su_p_mark_homework_complete() {
    global $wpdb;

    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'su_p_homework_nonce')) {
        wp_send_json_error(['message' => 'Invalid security token']);
        wp_die();
    }

    $homework_id = intval($_POST['homework_id'] ?? 0);
    if (empty($homework_id)) {
        wp_send_json_error(['message' => 'Invalid homework ID']);
        wp_die();
    }

    $homework_table = $wpdb->prefix . 'homework';
    $result = $wpdb->update(
        $homework_table,
        ['status' => 'completed'],
        ['homework_id' => $homework_id],
        ['%s'],
        ['%d']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to mark homework as complete: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success(['message' => 'Homework marked as complete']);
    }
    wp_die();
}

//departments
// Helper: Get Departments with Teacher Count
// Helper: Get Departments with Teacher Count (kept for reference, not directly used here)
function get_departments_with_teacher_count2($education_center_id) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'departments';
    $departments = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM $table_name WHERE education_center_id = %s ORDER BY department_name",
        $education_center_id
    ));

    foreach ($departments as $dept) {
        $teachers = get_posts([
            'post_type' => 'teacher',
            'numberposts' => -1,
            'meta_query' => [
                'relation' => 'AND',
                ['key' => 'teacher_department', 'value' => $dept->department_name, 'compare' => '='],
                ['key' => 'educational_center_id', 'value' => $dept->education_center_id, 'compare' => '=']
            ]
        ]);
        $dept->teacher_count = count($teachers);
        $dept->teachers = array_map(function($teacher) {
            return [
                'id' => $teacher->ID,
                'name' => !empty($teacher->teacher_name) ? $teacher->teacher_name : $teacher->post_title
            ];
        }, $teachers);
    }
    return $departments;
}

// Main Department Management Function (Read/List)
function render_su_p_department_management() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    $current_user = wp_get_current_user();
    $education_center_id = is_teacher($current_user->ID) ? educational_center_teacher_id() : get_educational_center_data();

    // Pagination and filter variables
    $page = isset($_GET['page']) ? max(1, intval($_GET['page'])) : 1;
    $per_page = isset($_GET['per_page']) ? intval($_GET['per_page']) : 10;
    $name_search = isset($_GET['name_search']) ? sanitize_text_field($_GET['name_search']) : '';
    $center_filter = isset($_GET['center_filter']) ? sanitize_text_field($_GET['center_filter']) : '';

    // Fetch all departments with a single query
    $department_table = $wpdb->prefix . 'departments';
    $query = "SELECT d.* FROM $department_table d WHERE 1=1";
    $args = [];
    if ($name_search) {
        $query .= " AND d.department_name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($name_search) . '%';
    }
    if ($center_filter) {
        $query .= " AND d.education_center_id = %s";
        $args[] = $center_filter;
    } else {
        // Super admin sees all centers unless filtered
        if (is_teacher($current_user->ID)) {
            $query .= " AND d.education_center_id = %s";
            $args[] = $education_center_id;
        }
    }
    $query .= " ORDER BY d.department_name";
    $departments = !empty($args) ? $wpdb->get_results($wpdb->prepare($query, $args)) : $wpdb->get_results($query);
    $total = count($departments);

    // Enrich departments with teacher count
    foreach ($departments as $dept) {
        $teachers = get_posts([
            'post_type' => 'teacher',
            'numberposts' => -1,
            'meta_query' => [
                'relation' => 'AND',
                ['key' => 'teacher_department', 'value' => $dept->department_name, 'compare' => '='],
                ['key' => 'educational_center_id', 'value' => $dept->education_center_id, 'compare' => '=']
            ]
        ]);
        $dept->teacher_count = count($teachers);
        $dept->teachers = array_map(function($teacher) {
            return [
                'id' => $teacher->ID,
                'name' => !empty($teacher->teacher_name) ? $teacher->teacher_name : $teacher->post_title
            ];
        }, $teachers);
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Department Management</h2>
                <div class="search-filters">
                    <input type="text" id="name-search" placeholder="Search by Name..." value="<?php echo esc_attr($name_search); ?>">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id' " . selected($center_filter, $center_id, false) . ">" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <?php if (!is_teacher($current_user->ID)) { ?>
                        <button id="add-department-btn">Add Department</button>
                    <?php } ?>
                    <select id="slots-per-page" name="per_page">
                        <option value="10" <?php selected($per_page, 10); ?>>10</option>
                        <option value="20" <?php selected($per_page, 20); ?>>20</option>
                        <option value="50" <?php selected($per_page, 50); ?>>50</option>
                    </select>
                    <button id="prev-page" class="button" <?php echo $page <= 1 ? 'disabled' : ''; ?>>Previous</button>
                    <span id="page-info">Page <?php echo $page; ?> of <?php echo ceil($total / $per_page); ?> (Total Records: <?php echo $total; ?>)</span>
                    <button id="next-page" class="button" <?php echo $page >= ceil($total / $per_page) ? 'disabled' : ''; ?>>Next</button>
                    <button id="refresh-table" class="button">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools">
                        <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                        <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                        <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                    </div>
                    <table id="department-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Teacher Count</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            $start = ($page - 1) * $per_page;
                            $end = min($start + $per_page, $total);
                            for ($i = $start; $i < $end && $i < count($departments); $i++) {
                                $dept = $departments[$i];
                                echo "<tr>
                                    <td>" . esc_html($dept->department_id) . "</td>
                                    <td>" . esc_html($dept->department_name) . "</td>
                                    <td>" . esc_html($dept->teacher_count) . "</td>
                                    <td>" . esc_html($dept->education_center_id) . "</td>
                                    <td>
                                        <button class='view-teachers' data-dept-id='" . esc_attr($dept->department_id) . "'>View Teachers</button>
                                        " . (!is_teacher($current_user->ID) ? "
                                        <button class='edit-department' data-dept-id='" . esc_attr($dept->department_id) . "'>Edit</button>
                                        <button class='delete-department' data-dept-id='" . esc_attr($dept->department_id) . "'>Delete</button>
                                        " : "") . "
                                    </td>
                                </tr>";
                            }
                            if (empty($departments)) {
                                echo '<tr><td colspan="5">No departments found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- View Teachers Modal -->
    <div class="edu-modal" id="view-teachers-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="view-teachers-modal">×</span>
            <h3>Teacher Details</h3>
            <div id="teacher-details-container"></div>
        </div>
    </div>

    <!-- Edit Department Modal -->
    <div class="edu-modal" id="edit-department-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-department-modal">×</span>
            <h3>Edit Department</h3>
            <form id="edit-department-form" method="POST">
                <input type="hidden" id="edit-dept-id" name="department_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center</label>
                    <select id="edit-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-name">Department Name</label>
                    <input type="text" id="edit-name" name="department_name" required>
                </div>
                <input type="hidden" name="action" value="su_p_update_department">
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_department_nonce'); ?>">
                <button type="submit">Update Department</button>
            </form>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        const allDepartments = <?php echo json_encode(array_map(function($dept) {
            return [
                'id' => $dept->department_id,
                'name' => $dept->department_name,
                'teacher_count' => $dept->teacher_count,
                'teachers' => $dept->teachers,
                'education_center_id' => $dept->education_center_id
            ];
        }, $departments)); ?>;

        let currentPage = <?php echo $page; ?>;
        let perPage = <?php echo $per_page; ?>;
        let totalRecords = <?php echo $total; ?>;

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        function filterAndRender() {
            showLoader();
            const nameSearch = $('#name-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();

            let filteredDepartments = allDepartments.filter(dept => {
                return (!nameSearch || dept.name.toLowerCase().includes(nameSearch)) &&
                       (!centerFilter || dept.education_center_id === centerFilter);
            });

            totalRecords = filteredDepartments.length;
            const totalPages = Math.ceil(totalRecords / perPage);
            currentPage = Math.min(currentPage, Math.max(1, totalPages));

            const start = (currentPage - 1) * perPage;
            const end = Math.min(start + perPage, filteredDepartments.length);
            const paginatedDepartments = filteredDepartments.slice(start, end);

            let html = '';
            if (paginatedDepartments.length > 0) {
                paginatedDepartments.forEach(dept => {
                    html += `<tr>
                        <td>${dept.id}</td>
                        <td>${dept.name}</td>
                        <td>${dept.teacher_count}</td>
                        <td>${dept.education_center_id}</td>
                        <td>
                            <button class="view-teachers" data-dept-id="${dept.id}">View Teachers</button>
                            <?php if (!is_teacher($current_user->ID)) { ?>
                            <button class="edit-department" data-dept-id="${dept.id}">Edit</button>
                            <button class="delete-department" data-dept-id="${dept.id}">Delete</button>
                            <?php } ?>
                        </td>
                    </tr>`;
                });
            } else {
                html = '<tr><td colspan="5">No departments found.</td></tr>';
            }
            $('#department-table tbody').html(html);

            $('#page-info').text(`Page ${currentPage} of ${totalPages} (Total Records: ${totalRecords})`);
            $('#prev-page').prop('disabled', currentPage <= 1);
            $('#next-page').prop('disabled', currentPage >= totalPages);

            hideLoader();
        }

        // Event handlers
        $('#name-search').on('keyup', debounce(filterAndRender, 300));
        $('#center-filter').on('change', filterAndRender);
        $('#slots-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            filterAndRender();
        });
        $('#prev-page').on('click', function() {
            if (currentPage > 1) {
                currentPage--;
                filterAndRender();
            }
        });
        $('#next-page').on('click', function() {
            if (currentPage < Math.ceil(totalRecords / perPage)) {
                currentPage++;
                filterAndRender();
            }
        });
        $('#refresh-table').on('click', function() {
            $('#name-search').val('');
            $('#center-filter').val('');
            currentPage = 1;
            filterAndRender();
        });

        <?php if (!is_teacher($current_user->ID)) { ?>
        $('#add-department-btn').on('click', function() {
            window.location.href = '<?php echo admin_url('admin.php?page=su-p-add-department'); ?>';
        });

        // Edit Department
        $(document).on('click', '.edit-department', function() {
            const deptId = $(this).data('dept-id').toString();
            const dept = allDepartments.find(d => d.id.toString() === deptId);

            if (dept) {
                $('#edit-dept-id').val(dept.id);
                $('#edit-center-id').val(dept.education_center_id);
                $('#edit-name').val(dept.name);
                openModal('#edit-department-modal');
            } else {
                alert('Department not found.');
            }
        });

        $('#edit-department-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Department updated successfully');
                        closeModal('#edit-department-modal');
                        const deptId = $('#edit-dept-id').val();
                        const updatedDept = allDepartments.find(d => d.id.toString() === deptId);
                        if (updatedDept) {
                            updatedDept.education_center_id = $('#edit-center-id').val();
                            updatedDept.name = $('#edit-name').val();
                            // Teacher count remains unchanged unless reassignment logic is added
                        }
                        filterAndRender();
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });

        // Delete Department
        $(document).on('click', '.delete-department', function() {
            if (confirm('Are you sure you want to delete this department?')) {
                showLoader();
                const deptId = $(this).data('dept-id').toString();

                $.ajax({
                    url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                    type: 'POST',
                    data: {
                        action: 'su_p_delete_department',
                        department_id: deptId,
                        nonce: '<?php echo wp_create_nonce('su_p_department_nonce'); ?>'
                    },
                    dataType: 'json',
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            alert('Department deleted successfully');
                            const index = allDepartments.findIndex(d => d.id.toString() === deptId);
                            if (index !== -1) {
                                allDepartments.splice(index, 1);
                            }
                            filterAndRender();
                        } else {
                            alert('Failed to delete department: ' + (response.data.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr, status, error) {
                        hideLoader();
                        alert('AJAX error: ' + error);
                    }
                });
            }
        });
        <?php } ?>

        // View Teachers
        $(document).on('click', '.view-teachers', function() {
            const deptId = $(this).data('dept-id').toString();
            const dept = allDepartments.find(d => d.id.toString() === deptId);

            if (dept) {
                let html = `<h4>${dept.name}</h4>`;
                if (dept.teacher_count > 0) {
                    html += '<ul>';
                    dept.teachers.forEach(teacher => {
                        html += `<li>${teacher.id} - ${teacher.name}</li>`;
                    });
                    html += '</ul>';
                } else {
                    html += '<p>No teachers assigned.</p>';
                }
                $('#teacher-details-container').html(html);
                openModal('#view-teachers-modal');
            } else {
                alert('Department not found.');
            }
        });

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });

        // Export functionality
        $('.export-csv').on('click', function() {
            const headers = ['ID', 'Name', 'Teacher Count', 'Education Center ID'];
            const csvRows = [headers.join(',')];
            const filteredDepartments = getFilteredDepartments();
            filteredDepartments.forEach(dept => {
                const values = [dept.id, dept.name, dept.teacher_count, dept.education_center_id].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const csvContent = csvRows.join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'departments.csv';
            link.click();
        });

        $('.export-pdf').on('click', function() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Department Report', 10, 10);
            doc.setFontSize(12);
            const filteredDepartments = getFilteredDepartments();
            const tableData = filteredDepartments.map(dept => [dept.id, dept.name, dept.teacher_count, dept.education_center_id]);
            doc.autoTable({
                head: [['ID', 'Name', 'Teacher Count', 'Education Center ID']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('departments.pdf');
        });

        $('.export-excel').on('click', function() {
            const filteredDepartments = getFilteredDepartments();
            const worksheetData = filteredDepartments.map(dept => ({
                'ID': dept.id,
                'Name': dept.name,
                'Teacher Count': dept.teacher_count,
                'Education Center ID': dept.education_center_id
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Departments');
            XLSX.writeFile(workbook, 'departments.xlsx');
        });

        function getFilteredDepartments() {
            const nameSearch = $('#name-search').val().toLowerCase();
            const centerFilter = $('#center-filter').val();
            return allDepartments.filter(dept => {
                return (!nameSearch || dept.name.toLowerCase().includes(nameSearch)) &&
                       (!centerFilter || dept.education_center_id === centerFilter);
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        filterAndRender();
    });
    </script>
    <?php
    return ob_get_clean();
}

// Add Department Function (Create)
function render_su_p_add_department() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    $current_user = wp_get_current_user();
    $education_center_id = is_teacher($current_user->ID) ? educational_center_teacher_id() : get_educational_center_data();

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Add New Department</h2>
                <form id="add-department-form" method="POST">
                    <div class="search-filters">
                        <label for="add-center-id">Education Center</label>
                        <select id="add-center-id" name="education_center_id" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='" . esc_attr($center_id) . "' " . selected($education_center_id, $center_id, false) . ">" . esc_html($center->post_title . " ($center_id)") . "</option>";
                            }
                            ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label for="add-name">Department Name</label>
                        <input type="text" id="add-name" name="department_name" required>
                    </div>
                    <input type="hidden" name="action" value="su_p_add_department">
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_department_nonce'); ?>">
                    <button type="submit">Add Department</button>
                    <a href="<?php echo admin_url('admin.php?page=su-p-department-management'); ?>" class="button">Back to Departments</a>
                </form>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $('#add-department-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Department added successfully');
                        window.location.href = '<?php echo admin_url('admin.php?page=su-p-department-management'); ?>';
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
// Edit Department Function (Edit/Update)
// Edit Department Function (Edit/Update)
function render_su_p_edit_department() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);

    // Fetch all departments
    $department_table = $wpdb->prefix . 'departments';
    $departments = $wpdb->get_results("SELECT * FROM $department_table ORDER BY department_name");

    // Enrich departments with teacher count
    foreach ($departments as $dept) {
        $teachers = get_posts([
            'post_type' => 'teacher',
            'numberposts' => -1,
            'meta_query' => [
                'relation' => 'AND',
                ['key' => 'teacher_department', 'value' => $dept->department_name, 'compare' => '='],
                ['key' => 'educational_center_id', 'value' => $dept->education_center_id, 'compare' => '=']
            ]
        ]);
        $dept->teacher_count = count($teachers);
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Edit Departments</h2>
                <div class="management-table-wrapper">
                    <table id="department-table" class="management-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Teacher Count</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($departments)) {
                                foreach ($departments as $dept) {
                                    echo "<tr data-dept-id='" . esc_attr($dept->department_id) . "'>
                                        <td>" . esc_html($dept->department_id) . "</td>
                                        <td>" . esc_html($dept->department_name) . "</td>
                                        <td>" . esc_html($dept->teacher_count) . "</td>
                                        <td>" . esc_html($dept->education_center_id) . "</td>
                                        <td>
                                            <button class='edit-department' data-dept-id='" . esc_attr($dept->department_id) . "' data-name='" . esc_attr($dept->department_name) . "' data-center-id='" . esc_attr($dept->education_center_id) . "'>Edit</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="5">No departments found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-department-management'); ?>" class="button">Back to Departments</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Department Modal -->
    <div class="edu-modal" id="edit-department-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-department-modal">×</span>
            <h3>Edit Department</h3>
            <form id="edit-department-form" method="POST">
                <input type="hidden" id="edit-dept-id" name="department_id">
                <div class="search-filters">
                    <label for="edit-center-id">Education Center</label>
                    <select id="edit-center-id" name="education_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title . " ($center_id)") . "</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-name">Department Name</label>
                    <input type="text" id="edit-name" name="department_name" required>
                </div>
                <input type="hidden" name="action" value="su_p_update_department">
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_department_nonce'); ?>">
                <button type="submit">Update Department</button>
            </form>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }
        function openModal(modalId) { $(modalId).css('display', 'flex'); }
        function closeModal(modalId) { $(modalId).css('display', 'none'); }

        // Edit Department
        $(document).on('click', '.edit-department', function() {
            const deptId = $(this).data('dept-id');
            const deptName = $(this).data('name');
            const centerId = $(this).data('center-id');

            $('#edit-dept-id').val(deptId);
            $('#edit-center-id').val(centerId);
            $('#edit-name').val(deptName);
            openModal('#edit-department-modal');
        });

        $('#edit-department-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = $(this).serialize();
            const deptId = $('#edit-dept-id').val();

            $.ajax({
                url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                type: 'POST',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Department updated successfully');
                        closeModal('#edit-department-modal');
                        // Update table row dynamically
                        const row = $(`tr[data-dept-id="${deptId}"]`);
                        row.find('td:eq(1)').text($('#edit-name').val()); // Update Name
                        row.find('td:eq(3)').text($('#edit-center-id').val()); // Update Education Center ID
                        row.find('.edit-department').data('name', $('#edit-name').val()).attr('data-name', $('#edit-name').val());
                        row.find('.edit-department').data('center-id', $('#edit-center-id').val()).attr('data-center-id', $('#edit-center-id').val());
                    } else {
                        alert('Error: ' + (response.data.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('AJAX error: ' + error);
                }
            });
        });

        $('.edu-modal-close').on('click', function() {
            closeModal('#' + $(this).data('modal'));
        });

        $(document).on('click', '.edu-modal', function(event) {
            if ($(event.target).hasClass('edu-modal')) {
                closeModal('#' + event.target.id);
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
// Delete Department Function (Delete)
// Delete Department Function (Delete)
function render_su_p_delete_department() {
    global $wpdb;

    // Fetch all departments
    $department_table = $wpdb->prefix . 'departments';
    $departments = $wpdb->get_results("SELECT * FROM $department_table ORDER BY department_name");

    // Enrich departments with teacher count
    foreach ($departments as $dept) {
        $teachers = get_posts([
            'post_type' => 'teacher',
            'numberposts' => -1,
            'meta_query' => [
                'relation' => 'AND',
                ['key' => 'teacher_department', 'value' => $dept->department_name, 'compare' => '='],
                ['key' => 'educational_center_id', 'value' => $dept->education_center_id, 'compare' => '=']
            ]
        ]);
        $dept->teacher_count = count($teachers);
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Departments</h2>
                <div class="management-table-wrapper">
                    <table id="department-table" class="management-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Teacher Count</th>
                                <th>Education Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                            if (!empty($departments)) {
                                foreach ($departments as $dept) {
                                    echo "<tr data-dept-id='" . esc_attr($dept->department_id) . "'>
                                        <td>" . esc_html($dept->department_id) . "</td>
                                        <td>" . esc_html($dept->department_name) . "</td>
                                        <td>" . esc_html($dept->teacher_count) . "</td>
                                        <td>" . esc_html($dept->education_center_id) . "</td>
                                        <td>
                                            <button class='delete-department' data-dept-id='" . esc_attr($dept->department_id) . "'>Delete</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="5">No departments found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-department-management'); ?>" class="button">Back to Departments</a>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        // Delete Department
        $(document).on('click', '.delete-department', function() {
            if (confirm('Are you sure you want to delete this department?')) {
                showLoader();
                const deptId = $(this).data('dept-id');

                $.ajax({
                    url: '<?php echo esc_url(admin_url('admin-ajax.php')); ?>',
                    type: 'POST',
                    data: {
                        action: 'su_p_delete_department',
                        department_id: deptId,
                        nonce: '<?php echo wp_create_nonce('su_p_department_nonce'); ?>'
                    },
                    dataType: 'json',
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            alert('Department deleted successfully');
                            $(`tr[data-dept-id="${deptId}"]`).remove(); // Remove row from table
                            if ($('#department-table tbody tr').length === 0) {
                                $('#department-table tbody').html('<tr><td colspan="5">No departments found.</td></tr>');
                            }
                        } else {
                            alert('Error: ' + (response.data.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr, status, error) {
                        hideLoader();
                        alert('AJAX error: ' + error);
                    }
                });
            }
        });
    });
    </script>
    <?php
    return ob_get_clean();
}
// AJAX Handlers

// Add Department
add_action('wp_ajax_su_p_add_department', 'su_p_add_department_callback');
function su_p_add_department_callback() {
    global $wpdb;
    check_ajax_referer('su_p_department_nonce', 'nonce');

    $education_center_id = sanitize_text_field($_POST['education_center_id']);
    $department_name = sanitize_text_field($_POST['department_name']);
    $table_name = $wpdb->prefix . 'departments';

    if (empty($department_name) || empty($education_center_id)) {
        wp_send_json_error(['message' => 'Department name and education center are required']);
    } else {
        $existing = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM $table_name WHERE department_name = %s AND education_center_id = %s",
            $department_name, $education_center_id
        ));
        if ($existing > 0) {
            wp_send_json_error(['message' => 'Department already exists for this education center']);
        } else {
            $inserted = $wpdb->insert(
                $table_name,
                ['department_name' => $department_name, 'education_center_id' => $education_center_id],
                ['%s', '%s']
            );
            if ($inserted) {
                wp_send_json_success(['message' => 'Department added successfully']);
            } else {
                wp_send_json_error(['message' => 'Failed to add department']);
            }
        }
    }
    wp_die();
}

// Update Department
add_action('wp_ajax_su_p_update_department', 'su_p_update_department_callback');
function su_p_update_department_callback() {
    global $wpdb;
    check_ajax_referer('su_p_department_nonce', 'nonce');

    $department_id = intval($_POST['department_id']);
    $education_center_id = sanitize_text_field($_POST['education_center_id']);
    $department_name = sanitize_text_field($_POST['department_name']);
    $table_name = $wpdb->prefix . 'departments';

    if (empty($department_name) || empty($education_center_id)) {
        wp_send_json_error(['message' => 'Department name and education center are required']);
    } else {
        $existing = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM $table_name WHERE department_name = %s AND education_center_id = %s AND department_id != %d",
            $department_name, $education_center_id, $department_id
        ));
        if ($existing > 0) {
            wp_send_json_error(['message' => 'Department name already exists for this education center']);
        } else {
            $updated = $wpdb->update(
                $table_name,
                ['department_name' => $department_name, 'education_center_id' => $education_center_id],
                ['department_id' => $department_id],
                ['%s', '%s'],
                ['%d']
            );
            if ($updated !== false) {
                wp_send_json_success(['message' => 'Department updated successfully']);
            } else {
                wp_send_json_error(['message' => 'Failed to update department']);
            }
        }
    }
    wp_die();
}

// Delete Department
add_action('wp_ajax_su_p_delete_department', 'su_p_delete_department_callback');
function su_p_delete_department_callback() {
    global $wpdb;
    check_ajax_referer('su_p_department_nonce', 'nonce');

    $department_id = intval($_POST['department_id']);
    $table_name = $wpdb->prefix . 'departments';

    $deleted = $wpdb->delete(
        $table_name,
        ['department_id' => $department_id],
        ['%d']
    );

    if ($deleted !== false && $deleted > 0) {
        wp_send_json_success(['message' => 'Department deleted successfully']);
    } else {
        wp_send_json_error(['message' => 'Failed to delete department']);
    }
    wp_die();
}

//parents Main Parents Management Function (Read Only)
function render_su_p_parents_management() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to view this dashboard.</p>';
    }

    global $wpdb;
    $parents = get_posts([
        'post_type' => 'parent',
        'posts_per_page' => -1,
        'orderby' => 'meta_value',
        'meta_key' => 'parent_name',
        'order' => 'ASC'
    ]);

    foreach ($parents as $parent) {
        $parent->parent_id = get_post_meta($parent->ID, 'parent_id', true);
        $parent->parent_name = get_post_meta($parent->ID, 'parent_name', true);
        $parent->parent_email = get_post_meta($parent->ID, 'parent_email', true);
        $parent->parent_phone_number = get_post_meta($parent->ID, 'parent_phone_number', true);
        $parent->educational_center_id = get_post_meta($parent->ID, 'educational_center_id', true);
        $parent->parent_student_ids = get_post_meta($parent->ID, 'parent_student_ids', true);
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Parents Management</h2>
                <div class="management-table-wrapper">
                    <table id="parents-table" class="management-table">
                        <thead>
                            <tr>
                                <th>Parent ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Education Center ID</th>
                                <th>Student IDs</th>
                            </tr>
                        </thead>
                        <tbody id="parents-tbody">
                            <?php
                            if (!empty($parents)) {
                                foreach ($parents as $parent) {
                                    echo "<tr data-parent-id='" . esc_attr($parent->ID) . "'>
                                        <td>" . esc_html($parent->parent_id) . "</td>
                                        <td>" . esc_html($parent->parent_name) . "</td>
                                        <td>" . esc_html($parent->parent_email) . "</td>
                                        <td>" . esc_html($parent->parent_phone_number) . "</td>
                                        <td>" . esc_html($parent->educational_center_id) . "</td>
                                        <td>" . esc_html($parent->parent_student_ids) . "</td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="6">No parents found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-add-parents'); ?>" class="button">Add Parent</a>
                    <a href="<?php echo admin_url('admin.php?page=su-p-edit-parents'); ?>" class="button">Edit Parents</a>
                    <a href="<?php echo admin_url('admin.php?page=su-p-delete-parents'); ?>" class="button">Delete Parents</a>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// Add Parent Function
function render_su_p_add_parents() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to add parents.</p>';
    }

    global $wpdb;
    $centers = get_posts([
        'post_type' => 'educational-center',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    $parent_ids = [];
    foreach ($centers as $center) {
        $center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID;
        $parent_ids[$center_id] = get_unique_id_for_role('parents', $center_id);
    }

    $add_message = '';
    if (isset($_POST['su_p_add_parent']) && check_admin_referer('su_p_parent_add', 'nonce')) {
        $education_center_id = sanitize_text_field($_POST['educational_center_id']);
        $parent_id = get_unique_id_for_role('parents', $education_center_id);
        $fields = [
            'parent_student_ids' => sanitize_text_field($_POST['parent_student_ids']),
            'parent_name' => sanitize_text_field($_POST['parent_name']),
            'parent_email' => sanitize_email($_POST['parent_email']),
            'parent_phone_number' => sanitize_text_field($_POST['parent_phone_number']),
            'parent_gender' => sanitize_text_field($_POST['parent_gender']),
            'parent_date_of_birth' => sanitize_text_field($_POST['parent_date_of_birth']),
            'parent_religion' => sanitize_text_field($_POST['parent_religion']),
            'parent_blood_group' => sanitize_text_field($_POST['parent_blood_group']),
            'parent_height' => sanitize_text_field($_POST['parent_height']),
            'parent_weight' => sanitize_text_field($_POST['parent_weight']),
            'parent_current_address' => sanitize_textarea_field($_POST['parent_current_address']),
            'parent_permanent_address' => sanitize_textarea_field($_POST['parent_permanent_address'])
        ];

        if (empty($education_center_id) || empty($fields['parent_name']) || empty($fields['parent_email'])) {
            $add_message = '<div class="alert alert-danger">Required fields are missing.</div>';
        } else {
            $exists = get_posts([
                'post_type' => 'parent',
                'meta_query' => [
                    ['key' => 'parent_id', 'value' => $parent_id],
                    ['key' => 'educational_center_id', 'value' => $education_center_id]
                ]
            ]);

            if (!empty($exists)) {
                $add_message = '<div class="alert alert-danger">Parent ID already exists for this center.</div>';
            } else {
                $meta_input = array_merge(['parent_id' => $parent_id, 'educational_center_id' => $education_center_id], $fields);
                if (!empty($_FILES['parent_profile_photo']['name'])) {
                    $upload = wp_handle_upload($_FILES['parent_profile_photo'], ['test_form' => false]);
                    if (isset($upload['error'])) {
                        $add_message = '<div class="alert alert-danger">File upload error: ' . esc_html($upload['error']) . '</div>';
                    } elseif (isset($upload['file'])) {
                        $attachment_id = wp_insert_attachment([
                            'post_mime_type' => $upload['type'],
                            'post_title' => basename($upload['file']),
                            'post_content' => '',
                            'post_status' => 'inherit'
                        ], $upload['file']);
                        wp_generate_attachment_metadata($attachment_id, $upload['file']);
                        $meta_input['parent_profile_photo'] = $attachment_id;
                    }
                }

                $post_id = wp_insert_post([
                    'post_title' => $parent_id,
                    'post_type' => 'parent',
                    'post_status' => 'publish',
                    'meta_input' => $meta_input
                ]);

                if (is_wp_error($post_id)) {
                    $add_message = '<div class="alert alert-danger">Error adding parent: ' . esc_html($post_id->get_error_message()) . '</div>';
                } elseif ($post_id) {
                    $add_message = '<div class="alert alert-success">Parent added successfully.</div>';
                    wp_redirect($_SERVER['REQUEST_URI']);

                } else {
                    $add_message = '<div class="alert alert-danger">Failed to add parent.</div>';
                }
            }
        }
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Add Parent</h2>
                <div id="add-parent-form-container">
                    <?php if ($add_message) echo $add_message; ?>
                    <form id="add-parent-form" method="post" enctype="multipart/form-data">
                        <div class="search-filters">
                            <label>Parent ID</label>
                            <input type="text" id="add-parent-id" name="parent_id" readonly>
                        </div>
                        <div class="search-filters">
                            <label>Education Center</label>
                            <select id="add-center-id" name="educational_center_id" required>
                                <option value="">Select Center</option>
                                <?php foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID;
                                    echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title) . "</option>";
                                } ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Student IDs</label>
                            <input type="text" name="parent_student_ids">
                        </div>
                        <div class="search-filters">
                            <label>Parent Name</label>
                            <input type="text" name="parent_name" required>
                        </div>
                        <div class="search-filters">
                            <label>Email</label>
                            <input type="email" name="parent_email" required>
                        </div>
                        <div class="search-filters">
                            <label>Phone Number</label>
                            <input type="text" name="parent_phone_number">
                        </div>
                        <div class="search-filters">
                            <label>Gender</label>
                            <select name="parent_gender">
                                <option value="">Select Gender</option>
                                <option value="male">Male</option>
                                <option value="female">Female</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Date of Birth</label>
                            <input type="date" name="parent_date_of_birth">
                        </div>
                        <div class="search-filters">
                            <label>Religion</label>
                            <select name="parent_religion">
                                <option value="">Select Religion</option>
                                <option value="christianity">Christianity</option>
                                <option value="islam">Islam</option>
                                <option value="hinduism">Hinduism</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Blood Group</label>
                            <select name="parent_blood_group">
                                <option value="">Select Blood Group</option>
                                <option value="A+">A+</option>
                                <option value="A-">A-</option>
                                <option value="B+">B+</option>
                                <option value="B-">B-</option>
                                <option value="O+">O+</option>
                                <option value="O-">O-</option>
                                <option value="AB+">AB+</option>
                                <option value="AB-">AB-</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Height (cm)</label>
                            <input type="number" name="parent_height" step="0.1">
                        </div>
                        <div class="search-filters">
                            <label>Weight (kg)</label>
                            <input type="number" name="parent_weight" step="0.1">
                        </div>
                        <div class="search-filters">
                            <label>Current Address</label>
                            <textarea name="parent_current_address"></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Permanent Address</label>
                            <textarea name="parent_permanent_address"></textarea>
                        </div>
                        <div class="search-filters">
                            <label>Profile Photo</label>
                            <input type="file" name="parent_profile_photo">
                        </div>
                        <?php wp_nonce_field('su_p_parent_add', 'nonce'); ?>
                        <input type="hidden" name="su_p_add_parent" value="1">
                        <div class="actions">
                            <button type="submit" class="button">Add Parent</button>
                            <a href="<?php echo admin_url('admin.php?page=su-p-parents-management'); ?>" class="button">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const loader = document.getElementById('edu-loader');
        const parentIds = <?php echo json_encode($parent_ids); ?>;

        function showLoader() { loader.style.display = 'block'; }
        function hideLoader() { loader.style.display = 'none'; }

        document.getElementById('add-center-id').addEventListener('change', function() {
            const centerId = this.value;
            document.getElementById('add-parent-id').value = centerId ? parentIds[centerId] : '';
        });

        document.getElementById('add-parent-form').addEventListener('submit', function(e) {
            e.preventDefault();
            showLoader();
            this.submit();
            setTimeout(() => {
                <?php if (isset($_POST['su_p_add_parent']) && strpos($add_message, 'success') !== false) { ?>
                    alert('Parent added successfully');
                    window.location.href = '<?php echo admin_url('admin.php?page=su-p-parents-management'); ?>';
                <?php } else { ?>
                    hideLoader();
                    <?php if ($add_message) { ?>
                        document.getElementById('add-parent-form-container').innerHTML = '<?php echo addslashes($add_message); ?>' + document.getElementById('add-parent-form-container').innerHTML;
                    <?php } ?>
                <?php } ?>
            }, 500);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Edit Parent Function
function render_su_p_edit_parents() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to edit parents.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $parents = get_posts(['post_type' => 'parent', 'posts_per_page' => -1, 'orderby' => 'meta_value', 'meta_key' => 'parent_name', 'order' => 'ASC']);

    foreach ($parents as $parent) {
        $parent->parent_id = get_post_meta($parent->ID, 'parent_id', true);
        $parent->parent_name = get_post_meta($parent->ID, 'parent_name', true);
        $parent->parent_email = get_post_meta($parent->ID, 'parent_email', true);
        $parent->parent_phone_number = get_post_meta($parent->ID, 'parent_phone_number', true);
        $parent->educational_center_id = get_post_meta($parent->ID, 'educational_center_id', true);
        $parent->parent_student_ids = get_post_meta($parent->ID, 'parent_student_ids', true);
        $parent->parent_gender = get_post_meta($parent->ID, 'parent_gender', true);
        $parent->parent_date_of_birth = get_post_meta($parent->ID, 'parent_date_of_birth', true);
        $parent->parent_religion = get_post_meta($parent->ID, 'parent_religion', true);
        $parent->parent_blood_group = get_post_meta($parent->ID, 'parent_blood_group', true);
        $parent->parent_height = get_post_meta($parent->ID, 'parent_height', true);
        $parent->parent_weight = get_post_meta($parent->ID, 'parent_weight', true);
        $parent->parent_current_address = get_post_meta($parent->ID, 'parent_current_address', true);
        $parent->parent_permanent_address = get_post_meta($parent->ID, 'parent_permanent_address', true);
        $parent->parent_profile_photo = get_post_meta($parent->ID, 'parent_profile_photo', true);
        $parent->profile_picture_url = $parent->parent_profile_photo ? wp_get_attachment_url($parent->parent_profile_photo) : '';
    }

    $edit_message = '';
    if (isset($_POST['su_p_edit_parent']) && check_admin_referer('su_p_parent_edit', 'nonce')) {
        $parent_post_id = intval($_POST['parent_post_id']);
        $fields = [
            'educational_center_id' => sanitize_text_field($_POST['educational_center_id']),
            'parent_student_ids' => sanitize_text_field($_POST['parent_student_ids']),
            'parent_name' => sanitize_text_field($_POST['parent_name']),
            'parent_email' => sanitize_email($_POST['parent_email']),
            'parent_phone_number' => sanitize_text_field($_POST['parent_phone_number']),
            'parent_gender' => sanitize_text_field($_POST['parent_gender']),
            'parent_date_of_birth' => sanitize_text_field($_POST['parent_date_of_birth']),
            'parent_religion' => sanitize_text_field($_POST['parent_religion']),
            'parent_blood_group' => sanitize_text_field($_POST['parent_blood_group']),
            'parent_height' => sanitize_text_field($_POST['parent_height']),
            'parent_weight' => sanitize_text_field($_POST['parent_weight']),
            'parent_current_address' => sanitize_textarea_field($_POST['parent_current_address']),
            'parent_permanent_address' => sanitize_textarea_field($_POST['parent_permanent_address'])
        ];

        if (empty($parent_post_id) || empty($fields['parent_name']) || empty($fields['parent_email'])) {
            $edit_message = '<div class="alert alert-danger">Required fields are missing.</div>';
        } else {
            $updated = wp_update_post(['ID' => $parent_post_id, 'post_title' => get_post_meta($parent_post_id, 'parent_id', true)]);
            if (is_wp_error($updated)) {
                $edit_message = '<div class="alert alert-danger">Error updating parent: ' . esc_html($updated->get_error_message()) . '</div>';
            } elseif ($updated !== 0) {
                foreach ($fields as $key => $value) {
                    update_post_meta($parent_post_id, $key, $value);
                }
                if (!empty($_FILES['parent_profile_photo']['name'])) {
                    $upload = wp_handle_upload($_FILES['parent_profile_photo'], ['test_form' => false]);
                    if (isset($upload['error'])) {
                        $edit_message = '<div class="alert alert-danger">File upload error: ' . esc_html($upload['error']) . '</div>';
                    } elseif (isset($upload['file'])) {
                        $attachment_id = wp_insert_attachment([
                            'post_mime_type' => $upload['type'],
                            'post_title' => basename($upload['file']),
                            'post_content' => '',
                            'post_status' => 'inherit'
                        ], $upload['file']);
                        wp_generate_attachment_metadata($attachment_id, $upload['file']);
                        update_post_meta($parent_post_id, 'parent_profile_photo', $attachment_id);
                    }
                }
                $edit_message = '<div class="alert alert-success">Parent updated successfully.</div>';
                wp_redirect($_SERVER['REQUEST_URI']);

            } else {
                $edit_message = '<div class="alert alert-danger">Failed to update parent.</div>';
            }
        }
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Edit Parents</h2>
                <div class="management-table-wrapper">
                    <table id="parents-table" class="management-table">
                        <thead>
                            <tr>
                                <th>Parent ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Education Center ID</th>
                                <th>Student IDs</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="parents-tbody">
                            <?php
                            if (!empty($parents)) {
                                foreach ($parents as $parent) {
                                    echo "<tr data-parent-id='" . esc_attr($parent->ID) . "'>
                                        <td>" . esc_html($parent->parent_id) . "</td>
                                        <td>" . esc_html($parent->parent_name) . "</td>
                                        <td>" . esc_html($parent->parent_email) . "</td>
                                        <td>" . esc_html($parent->parent_phone_number) . "</td>
                                        <td>" . esc_html($parent->educational_center_id) . "</td>
                                        <td>" . esc_html($parent->parent_student_ids) . "</td>
                                        <td>
                                            <button class='button edit-parent-modal-btn'
                                                data-parent-id='" . esc_attr($parent->ID) . "'
                                                data-name='" . esc_attr($parent->parent_name) . "'
                                                data-email='" . esc_attr($parent->parent_email) . "'
                                                data-phone='" . esc_attr($parent->parent_phone_number) . "'
                                                data-center-id='" . esc_attr($parent->educational_center_id) . "'
                                                data-student-ids='" . esc_attr($parent->parent_student_ids) . "'
                                                data-gender='" . esc_attr($parent->parent_gender) . "'
                                                data-dob='" . esc_attr($parent->parent_date_of_birth) . "'
                                                data-religion='" . esc_attr($parent->parent_religion) . "'
                                                data-blood-group='" . esc_attr($parent->parent_blood_group) . "'
                                                data-height='" . esc_attr($parent->parent_height) . "'
                                                data-weight='" . esc_attr($parent->parent_weight) . "'
                                                data-current-address='" . esc_attr($parent->parent_current_address) . "'
                                                data-permanent-address='" . esc_attr($parent->parent_permanent_address) . "'
                                                data-profile-photo='" . esc_attr($parent->profile_picture_url) . "'>Edit</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="7">No parents found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-parents-management'); ?>" class="button">Back to Parents</a>
                </div>
            </div>
        </div>
    </div>

    <div class="edu-modal" id="editParentModal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="editParentModal">×</span>
            <h3>Edit Parent</h3>
            <div id="edit-parent-form-container">
                <?php if ($edit_message) echo $edit_message; ?>
                <form id="edit-parent-form" method="post" enctype="multipart/form-data">
                    <input type="hidden" id="edit-parent-post-id" name="parent_post_id">
                    <div class="search-filters">
                        <label>Parent ID</label>
                        <input type="text" id="edit-parent-id" name="parent_id" readonly>
                    </div>
                    <div class="search-filters">
                        <label>Education Center</label>
                        <select id="edit-center-id" name="educational_center_id" required>
                            <option value="">Select Center</option>
                            <?php foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true) ?: $center->ID;
                                echo "<option value='" . esc_attr($center_id) . "'>" . esc_html($center->post_title) . "</option>";
                            } ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Student IDs</label>
                        <input type="text" id="edit-student-ids" name="parent_student_ids">
                    </div>
                    <div class="search-filters">
                        <label>Parent Name</label>
                        <input type="text" id="edit-name" name="parent_name" required>
                    </div>
                    <div class="search-filters">
                        <label>Email</label>
                        <input type="email" id="edit-email" name="parent_email" required>
                    </div>
                    <div class="search-filters">
                        <label>Phone Number</label>
                        <input type="text" id="edit-phone" name="parent_phone_number">
                    </div>
                    <div class="search-filters">
                        <label>Gender</label>
                        <select id="edit-gender" name="parent_gender">
                            <option value="">Select Gender</option>
                            <option value="male">Male</option>
                            <option value="female">Female</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Date of Birth</label>
                        <input type="date" id="edit-dob" name="parent_date_of_birth">
                    </div>
                    <div class="search-filters">
                        <label>Religion</label>
                        <select id="edit-religion" name="parent_religion">
                            <option value="">Select Religion</option>
                            <option value="christianity">Christianity</option>
                            <option value="islam">Islam</option>
                            <option value="hinduism">Hinduism</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Blood Group</label>
                        <select id="edit-blood-group" name="parent_blood_group">
                            <option value="">Select Blood Group</option>
                            <option value="A+">A+</option>
                            <option value="A-">A-</option>
                            <option value="B+">B+</option>
                            <option value="B-">B-</option>
                            <option value="O+">O+</option>
                            <option value="O-">O-</option>
                            <option value="AB+">AB+</option>
                            <option value="AB-">AB-</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Height (cm)</label>
                        <input type="number" id="edit-height" name="parent_height" step="0.1">
                    </div>
                    <div class="search-filters">
                        <label>Weight (kg)</label>
                        <input type="number" id="edit-weight" name="parent_weight" step="0.1">
                    </div>
                    <div class="search-filters">
                        <label>Current Address</label>
                        <textarea id="edit-current-address" name="parent_current_address"></textarea>
                    </div>
                    <div class="search-filters">
                        <label>Permanent Address</label>
                        <textarea id="edit-permanent-address" name="parent_permanent_address"></textarea>
                    </div>
                    <div class="search-filters">
                        <label>Profile Photo</label>
                        <img id="edit-profile-photo-preview" style="max-width: 200px; display: none;">
                        <input type="file" id="edit-profile-photo" name="parent_profile_photo">
                    </div>
                    <?php wp_nonce_field('su_p_parent_edit', 'nonce'); ?>
                    <input type="hidden" name="su_p_edit_parent" value="1">
                    <button type="submit" class="button">Update Parent</button>
                </form>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const loader = document.getElementById('edu-loader');
        const modal = document.getElementById('editParentModal');
        const tbody = document.getElementById('parents-tbody');

        function showLoader() { loader.style.display = 'block'; }
        function hideLoader() { loader.style.display = 'none'; }
        function showModal() { modal.style.display = 'flex'; }
        function hideModal() { modal.style.display = 'none'; }

        tbody.addEventListener('click', function(e) {
            if (e.target.classList.contains('edit-parent-modal-btn')) {
                const btn = e.target;
                document.getElementById('edit-parent-post-id').value = btn.dataset.parentId;
                document.getElementById('edit-parent-id').value = btn.closest('tr').cells[0].textContent;
                document.getElementById('edit-center-id').value = btn.dataset.centerId;
                document.getElementById('edit-student-ids').value = btn.dataset.studentIds;
                document.getElementById('edit-name').value = btn.dataset.name;
                document.getElementById('edit-email').value = btn.dataset.email;
                document.getElementById('edit-phone').value = btn.dataset.phone;
                document.getElementById('edit-gender').value = btn.dataset.gender;
                document.getElementById('edit-dob').value = btn.dataset.dob;
                document.getElementById('edit-religion').value = btn.dataset.religion;
                document.getElementById('edit-blood-group').value = btn.dataset.bloodGroup;
                document.getElementById('edit-height').value = btn.dataset.height;
                document.getElementById('edit-weight').value = btn.dataset.weight;
                document.getElementById('edit-current-address').value = btn.dataset.currentAddress;
                document.getElementById('edit-permanent-address').value = btn.dataset.permanentAddress;
                const preview = document.getElementById('edit-profile-photo-preview');
                if (btn.dataset.profilePhoto) {
                    preview.src = btn.dataset.profilePhoto;
                    preview.style.display = 'block';
                } else {
                    preview.style.display = 'none';
                }
                showModal();
            }
        });

        document.querySelector('.edu-modal-close').addEventListener('click', hideModal);
        modal.addEventListener('click', (e) => { if (e.target === modal) hideModal(); });

        document.getElementById('edit-profile-photo').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('edit-profile-photo-preview').src = e.target.result;
                    document.getElementById('edit-profile-photo-preview').style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });

        document.getElementById('edit-parent-form').addEventListener('submit', function(e) {
            e.preventDefault();
            showLoader();
            this.submit(); // Trigger PHP processing
            setTimeout(() => {
                <?php if (isset($_POST['su_p_edit_parent']) && strpos($edit_message, 'success') !== false) { ?>
                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData);
                    const row = document.querySelector(`tr[data-parent-id="${data.parent_post_id}"]`);
                    row.cells[1].textContent = data.parent_name;
                    row.cells[2].textContent = data.parent_email;
                    row.cells[3].textContent = data.parent_phone_number;
                    row.cells[4].textContent = data.educational_center_id;
                    row.cells[5].textContent = data.parent_student_ids;
                    const btn = row.querySelector('.edit-parent-modal-btn');
                    btn.dataset.name = data.parent_name;
                    btn.dataset.email = data.parent_email;
                    btn.dataset.phone = data.parent_phone_number;
                    btn.dataset.centerId = data.educational_center_id;
                    btn.dataset.studentIds = data.parent_student_ids;
                    btn.dataset.gender = data.parent_gender;
                    btn.dataset.dob = data.parent_date_of_birth;
                    btn.dataset.religion = data.parent_religion;
                    btn.dataset.bloodGroup = data.parent_blood_group;
                    btn.dataset.height = data.parent_height;
                    btn.dataset.weight = data.parent_weight;
                    btn.dataset.currentAddress = data.parent_current_address;
                    btn.dataset.permanentAddress = data.parent_permanent_address;
                    alert('Parent updated successfully');
                    hideModal();
                    hideLoader();
                <?php } else { ?>
                    hideLoader();
                    <?php if ($edit_message) { ?>
                        document.getElementById('edit-parent-form-container').innerHTML = '<?php echo addslashes($edit_message); ?>' + document.getElementById('edit-parent-form-container').innerHTML;
                    <?php } ?>
                <?php } ?>
            }, 500);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Delete Parent Function
function render_su_p_delete_parents() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to delete parents.</p>';
    }

    global $wpdb;
    $parents = get_posts(['post_type' => 'parent', 'posts_per_page' => -1, 'orderby' => 'meta_value', 'meta_key' => 'parent_name', 'order' => 'ASC']);

    foreach ($parents as $parent) {
        $parent->parent_id = get_post_meta($parent->ID, 'parent_id', true);
        $parent->parent_name = get_post_meta($parent->ID, 'parent_name', true);
        $parent->parent_email = get_post_meta($parent->ID, 'parent_email', true);
        $parent->parent_phone_number = get_post_meta($parent->ID, 'parent_phone_number', true);
        $parent->educational_center_id = get_post_meta($parent->ID, 'educational_center_id', true);
        $parent->parent_student_ids = get_post_meta($parent->ID, 'parent_student_ids', true);
    }

    $delete_message = '';
    if (isset($_POST['su_p_delete_parent']) && check_admin_referer('su_p_parent_delete', 'nonce')) {
        $parent_post_id = intval($_POST['parent_post_id']);
        if (empty($parent_post_id)) {
            $delete_message = '<div class="alert alert-danger">Invalid parent ID.</div>';
        } else {
            $result = wp_delete_post($parent_post_id, true);
            if ($result === false) {
                error_log("Failed to delete parent post ID: $parent_post_id. User: " . get_current_user_id());
                $delete_message = '<div class="alert alert-danger">Failed to delete parent. Check debug.log.</div>';
            } else {
                $delete_message = '<div class="alert alert-success">Parent deleted successfully.</div>';
            }
        }
        wp_redirect($_SERVER['REQUEST_URI']);

    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Parents</h2>
                <div class="management-table-wrapper">
                    <table id="parents-table" class="management-table">
                        <thead>
                            <tr>
                                <th>Parent ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Education Center ID</th>
                                <th>Student IDs</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="parents-tbody">
                            <?php
                            if (!empty($parents)) {
                                foreach ($parents as $parent) {
                                    echo "<tr data-parent-id='" . esc_attr($parent->ID) . "'>
                                        <td>" . esc_html($parent->parent_id) . "</td>
                                        <td>" . esc_html($parent->parent_name) . "</td>
                                        <td>" . esc_html($parent->parent_email) . "</td>
                                        <td>" . esc_html($parent->parent_phone_number) . "</td>
                                        <td>" . esc_html($parent->educational_center_id) . "</td>
                                        <td>" . esc_html($parent->parent_student_ids) . "</td>
                                        <td>
                                            <button class='button delete-parent-modal-btn' data-parent-id='" . esc_attr($parent->ID) . "'>Delete</button>
                                        </td>
                                    </tr>";
                                }
                            } else {
                                echo '<tr><td colspan="7">No parents found.</td></tr>';
                            }
                            ?>
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-parents-management'); ?>" class="button">Back to Parents</a>
                </div>
            </div>
        </div>
    </div>

    <div class="edu-modal" id="deleteParentModal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="deleteParentModal">×</span>
            <h3>Confirm Deletion</h3>
            <div id="delete-parent-container">
                <?php if ($delete_message) echo $delete_message; ?>
                <p id="delete-parent-text"></p>
                <form id="delete-parent-form" method="post">
                    <input type="hidden" id="delete-parent-id" name="parent_post_id">
                    <?php wp_nonce_field('su_p_parent_delete', 'nonce'); ?>
                    <input type="hidden" name="su_p_delete_parent" value="1">
                    <button type="submit" class="button">Delete</button>
                    <button type="button" class="button cancel-delete" onclick="document.getElementById('deleteParentModal').style.display='none'">Cancel</button>
                </form>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const loader = document.getElementById('edu-loader');
        const modal = document.getElementById('deleteParentModal');
        const tbody = document.getElementById('parents-tbody');

        function showLoader() { loader.style.display = 'block'; }
        function hideLoader() { loader.style.display = 'none'; }
        function showModal() { modal.style.display = 'flex'; }
        function hideModal() { modal.style.display = 'none'; }

        tbody.addEventListener('click', function(e) {
            if (e.target.classList.contains('delete-parent-modal-btn')) {
                const parentId = e.target.getAttribute('data-parent-id');
                document.getElementById('delete-parent-id').value = parentId;
                document.getElementById('delete-parent-text').textContent = `Are you sure you want to delete parent "${e.target.closest('tr').cells[0].textContent}"?`;
                showModal();
            }
        });

        document.querySelector('.edu-modal-close').addEventListener('click', hideModal);
        modal.addEventListener('click', (e) => { if (e.target === modal) hideModal(); });

        document.getElementById('delete-parent-form').addEventListener('submit', function(e) {
            e.preventDefault();
            showLoader();
            const parentId = document.getElementById('delete-parent-id').value;

            // Simulate form submission without reloading (inline PHP check)
            const form = this;
            form.submit(); // Trigger PHP processing

            setTimeout(() => {
                <?php if (isset($_POST['su_p_delete_parent']) && strpos($delete_message, 'success') !== false) { ?>
                    const row = document.querySelector(`tr[data-parent-id="${parentId}"]`);
                    if (row) {
                        row.remove();
                        if (tbody.children.length === 0) {
                            tbody.innerHTML = '<tr><td colspan="7">No parents found.</td></tr>';
                        }
                        alert('Parent deleted successfully');
                    }
                    hideModal();
                    hideLoader();
                <?php } else { ?>
                    hideLoader();
                    <?php if ($delete_message) { ?>
                        document.getElementById('delete-parent-container').innerHTML = '<?php echo addslashes($delete_message); ?>' + document.getElementById('delete-parent-container').innerHTML;
                    <?php } ?>
                <?php } ?>
            }, 500);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

//invetory
// Validation Helper Function
function validate_inventory_data($item_id, $name, $category, $quantity, $status, $low_stock_threshold, $education_center_id) {
    if (empty($item_id) || empty($name) || empty($category) || $quantity < 0 || empty($status) || $low_stock_threshold < 1 || empty($education_center_id)) {
        return 'Invalid input data: All fields are required, and quantity/low stock must be valid.';
    }
    return true;
}

// Main Inventory Management Function (Read)
function render_su_p_inventory_management() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to view this dashboard.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Inventory Management</h2>
                <div class="edu-students-actions" style="margin-bottom: 20px;">
                    <a href="<?php echo admin_url('admin.php?page=su-p-add-inventory'); ?>" class="button edu-button-primary">Add New Item</a>
                    <input type="text" id="name-search" class="edu-search-input" placeholder="Search by Item Name..." style="margin-left: 20px; padding: 8px; width: 300px;">
                    <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="category-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Categories</option>
                        <option value="Equipment">Equipment</option>
                        <option value="Stationery">Stationery</option>
                        <option value="Furniture">Furniture</option>
                        <option value="Other">Other</option>
                    </select>
                    <select id="status-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Statuses</option>
                        <option value="Available">Available</option>
                        <option value="Issued">Issued</option>
                        <option value="Damaged">Damaged</option>
                    </select>
                </div>
                <div class="edu-pagination" style="margin: 20px 0;">
                    <label for="items-per-page">Show:</label>
                    <select id="items-per-page" class="edu-select" style="margin-right: 20px;">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button class="edu-button edu-button-nav" id="prev-page" disabled>Previous</button>
                    <span id="page-info" style="margin: 0 10px;"></span>
                    <button class="edu-button edu-button-nav" id="next-page">Next</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="export-tools" id="export-tools" style="margin-bottom: 10px;"></div>
                    <table id="inventory-table" class="management-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Quantity</th>
                                <th>Status</th>
                                <th>Low Stock</th>
                                <th>Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="inventory-tbody">
                            <!-- Populated via JavaScript -->
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <button class="button" id="refresh-table">Refresh</button>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        let currentPage = 1;
        let perPage = 10;
        let searchQuery = '';
        let centerFilter = '';
        let categoryFilter = '';
        let statusFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function getTableData() {
            const table = $('#inventory-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim()).slice(0, -1);
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {
                const cells = Array.from(row.querySelectorAll('td')).slice(0, -1);
                return cells.map(td => td.textContent.trim());
            });
            return [headers, ...rows];
        }

        function exportToCSV() {
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `inventory_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
        }

        function exportToExcel() {
            if (!window.XLSX) { console.error('XLSX library not loaded'); return; }
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Inventory');
            XLSX.writeFile(wb, `inventory_${new Date().toISOString().slice(0,10)}.xlsx`);
        }

        function generatePDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ unit: 'mm', format: 'a4' });
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            const pageWidth = doc.internal.pageSize.width;
            const margin = 10;
            const borderColor = [70, 131, 180];

            doc.setDrawColor(...borderColor);
            doc.setLineWidth(1);
            doc.rect(margin, margin, pageWidth - 2 * margin, doc.internal.pageSize.height - 2 * margin);
            if (instituteLogo) {
                try { doc.addImage(instituteLogo, 'JPEG', (pageWidth - 24) / 2, 15, 24, 24); } catch (e) {}
            }
            doc.setFontSize(18);
            doc.setTextColor(...borderColor);
            doc.text(instituteName.toUpperCase(), pageWidth / 2, 45, { align: 'center' });
            doc.setFontSize(12);
            doc.setTextColor(102);
            doc.text('Inventory List', pageWidth / 2, 55, { align: 'center' });
            doc.setDrawColor(...borderColor);
            doc.line(margin + 5, 60, pageWidth - margin - 5, 60);

            const details = [['Date', new Date().toLocaleDateString()], ['Total Items', String(data.length - 1)]];
            let y = 70;
            details.forEach(([label, value]) => {
                doc.setFillColor(245, 245, 245);
                doc.rect(margin + 5, y, 50, 6, 'F');
                doc.setTextColor(...borderColor);
                doc.setFont('helvetica', 'bold');
                doc.text(label, margin + 7, y + 4);
                doc.setTextColor(51);
                doc.setFont('helvetica', 'normal');
                doc.text(String(value), margin + 60, y + 4);
                y += 6;
            });

            if (typeof doc.autoTable === 'function' && data.length > 1) {
                doc.autoTable({
                    startY: y + 10,
                    head: [data[0]],
                    body: data.slice(1),
                    theme: 'striped',
                    styles: { fontSize: 11, cellPadding: 2, overflow: 'linebreak', halign: 'center' },
                    headStyles: { fillColor: borderColor, textColor: [255, 255, 255], fontStyle: 'bold' }
                });
                const finalY = doc.lastAutoTable.finalY || y + 10;
                doc.setFontSize(9);
                doc.setTextColor(102);
                doc.text(`Generated by Instituto on ${new Date().toISOString().slice(0,10)}`, pageWidth / 2, finalY + 20, { align: 'center' });
                doc.save(`inventory_${new Date().toISOString().slice(0,10)}.pdf`);
            }
        }

        function copyToClipboard() {
            const data = getTableData();
            const text = data.map(row => row.join('\t')).join('\n');
            navigator.clipboard.writeText(text).then(() => alert('Inventory copied to clipboard!'));
        }

        function printInventory() {
            const printWindow = window.open('', '_blank');
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            printWindow.document.write(`
                <html>
                <head><title>Inventory List</title>
                <style>
                    @media print {
                        body { font-family: Helvetica, sans-serif; margin: 10mm; width: 190mm; }
                        .page { border: 4px solid #4683b4; padding: 5mm; box-sizing: border-box; width: 100%; max-width: 190mm; }
                        .header { text-align: center; border-bottom: 2px solid #4683b4; margin-bottom: 10mm; }
                        .header img { width: 60px; height: 60px; margin-bottom: 5mm; }
                        .header h1 { font-size: 18pt; color: #4683b4; margin: 0; text-transform: uppercase; }
                        .header .subtitle { font-size: 12pt; color: #666; margin: 0; }
                        table { width: 100%; border-collapse: collapse; margin: 10mm 0; table-layout: fixed; }
                        th, td { border: 1px solid #e5e5e5; padding: 8px; text-align: center; word-wrap: break-word; font-size: 10pt; }
                        th { background: #4683b4; color: white; font-weight: bold; }
                        tr:nth-child(even) { background: #f9f9f9; }
                        .footer { text-align: center; font-size: 9pt; color: #666; margin-top: 10mm; }
                        @page { size: A4; margin: 10mm; }
                    }
                </style></head>
                <body>
                    <div class="page">
                        <div class="header">
                            ${instituteLogo ? `<img src="${instituteLogo}" alt="Logo" onerror="this.style.display='none';this.nextSibling.style.display='block';"><p style="display:none;">No logo available</p>` : '<p>No logo available</p>'}
                            <h1>${instituteName.toUpperCase()}</h1>
                            <p class="subtitle">Inventory List</p>
                        </div>
                        <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                        <p><strong>Total Items:</strong> ${data.length - 1}</p>
                        <table>
                            <thead><tr>${data[0].map(header => `<th>${header}</th>`).join('')}</tr></thead>
                            <tbody>${data.slice(1).map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}</tbody>
                        </table>
                        <div class="footer">
                            <p>Generated by Instituto on ${new Date().toISOString().slice(0,10)}</p>
                        </div>
                    </div>
                </body></html>
            `);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
        }

        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                <button class="export-btn export-copy" aria-label="Copy to Clipboard"><i class="fas fa-copy"></i><span class="tooltip">Copy to Clipboard</span></button>
                <button class="export-btn export-print" aria-label="Print"><i class="fas fa-print"></i><span class="tooltip">Print</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
            tools.find('.export-copy').on('click', copyToClipboard);
            tools.find('.export-print').on('click', printInventory);
        }

        function loadInventory(page, limit, name, center, category, status) {
            showLoader();
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_fetch_inventory',
                    page: page,
                    per_page: limit,
                    name_search: name,
                    center_filter: center,
                    category_filter: category,
                    status_filter: status,
                    nonce: '<?php echo wp_create_nonce('su_p_inventory_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const items = response.data.items;
                        const total = response.data.total;
                        let html = '';
                        items.forEach(item => {
                            const lowStock = item.quantity <= item.low_stock_threshold ? '<span class="badge bg-danger">Low</span>' : '<span class="badge bg-success">OK</span>';
                            html += `
                                <tr data-item-id="${item.item_id}">
                                    <td>${item.item_id}</td>
                                    <td>${item.name}</td>
                                    <td>${item.category}</td>
                                    <td>${item.quantity}</td>
                                    <td>${item.status}</td>
                                    <td>${lowStock}</td>
                                    <td>${item.education_center_id}</td>
                                    <td>
                                        <button class="edu-button edu-button-edit" data-item-id="${item.item_id}">Edit</button>
                                        <button class="edu-button edu-button-delete" data-item-id="${item.item_id}">Delete</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#inventory-tbody').html(html);
                        setupExportButtons();

                        const totalPages = Math.ceil(total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages}`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);

                        $('.edu-button-edit').on('click', function() {
                            const itemId = $(this).data('item-id');
                            showEditModal(itemId);
                        });
                        $('.edu-button-delete').on('click', function() {
                            const itemId = $(this).data('item-id');
                            showDeleteModal(itemId);
                        });
                    } else {
                        $('#inventory-tbody').html('<tr><td colspan="8">No inventory items found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    console.error('Error fetching inventory:', error);
                    $('#inventory-tbody').html('<tr><td colspan="8">Error loading inventory.</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        function showEditModal(itemId) {
            $('body').append('<div id="edit-modal-placeholder"></div>');
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_get_inventory_edit_form',
                    item_id: itemId,
                    nonce: '<?php echo wp_create_nonce('su_p_inventory_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-modal-placeholder').html(response.data);
                    } else {
                        alert('Failed to load edit form: ' + response.data.message);
                    }
                },
                error: function() {
                    alert('Error loading edit form.');
                }
            });
        }

        function showDeleteModal(itemId) {
            $('body').append('<div id="delete-modal-placeholder"></div>');
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_get_inventory_delete_form',
                    item_id: itemId,
                    nonce: '<?php echo wp_create_nonce('su_p_inventory_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $('#delete-modal-placeholder').html(response.data);
                    } else {
                        alert('Failed to load delete form: ' + response.data.message);
                    }
                },
                error: function() {
                    alert('Error loading delete form.');
                }
            });
        }

        loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);

        $('#name-search').on('input', function() {
            searchQuery = $(this).val();
            currentPage = 1;
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#category-filter').on('change', function() {
            categoryFilter = $(this).val();
            currentPage = 1;
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#status-filter').on('change', function() {
            statusFilter = $(this).val();
            currentPage = 1;
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#items-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#refresh-table').on('click', function() {
            currentPage = 1;
            searchQuery = '';
            centerFilter = '';
            categoryFilter = '';
            statusFilter = '';
            $('#name-search').val('');
            $('#center-filter').val('');
            $('#category-filter').val('');
            $('#status-filter').val('');
            loadInventory(currentPage, perPage, searchQuery, centerFilter, categoryFilter, statusFilter);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Add Inventory Function (Create)
function render_su_p_add_inventory() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to add inventory items.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $add_message = '';

    if (isset($_POST['su_p_add_inventory']) && check_admin_referer('su_p_inventory_add', 'nonce')) {
        $item_id = sanitize_text_field($_POST['item_id']);
        $name = sanitize_text_field($_POST['name']);
        $category = sanitize_text_field($_POST['category']);
        $quantity = intval($_POST['quantity']);
        $status = sanitize_text_field($_POST['status']);
        $low_stock_threshold = intval($_POST['low_stock_threshold']);
        $education_center_id = sanitize_text_field($_POST['education_center_id']);

        $validation = validate_inventory_data($item_id, $name, $category, $quantity, $status, $low_stock_threshold, $education_center_id);
        if ($validation !== true) {
            $add_message = '<div class="alert alert-danger">' . esc_html($validation) . '</div>';
        } else {
            $table_name = $wpdb->prefix . 'inventory';
            $exists = $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM $table_name WHERE item_id = %s", $item_id));
            if ($exists) {
                $add_message = '<div class="alert alert-danger">Item ID already exists.</div>';
            } else {
                $result = $wpdb->insert(
                    $table_name,
                    [
                        'item_id' => $item_id,
                        'name' => $name,
                        'category' => $category,
                        'quantity' => $quantity,
                        'status' => $status,
                        'low_stock_threshold' => $low_stock_threshold,
                        'education_center_id' => $education_center_id
                    ],
                    ['%s', '%s', '%s', '%d', '%s', '%d', '%s']
                );
                if ($result !== false) {
                    $add_message = '<div class="alert alert-success">Inventory item added successfully.</div>';
                } else {
                    $add_message = '<div class="alert alert-danger">Failed to add item: ' . esc_html($wpdb->last_error) . '</div>';
                }
            }
        }
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Add Inventory Item</h2>
                <div id="add-inventory-form-container">
                    <?php if ($add_message) echo $add_message; ?>
                    <form id="add-inventory-form" method="post">
                        <div class="search-filters">
                            <label>Education Center</label>
                            <select id="add-center-id" name="education_center_id" required>
                                <option value="">Select Center</option>
                                <?php
                                foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                    echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                                }
                                ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Item ID</label>
                            <input type="text" id="add-item-id" name="item_id" readonly required>
                        </div>
                        <div class="search-filters">
                            <label>Name</label>
                            <input type="text" name="name" required>
                        </div>
                        <div class="search-filters">
                            <label>Category</label>
                            <select name="category" required>
                                <option value="">Select Category</option>
                                <option value="Equipment">Equipment</option>
                                <option value="Stationery">Stationery</option>
                                <option value="Furniture">Furniture</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Quantity</label>
                            <input type="number" name="quantity" min="0" required>
                        </div>
                        <div class="search-filters">
                            <label>Status</label>
                            <select name="status" required>
                                <option value="">Select Status</option>
                                <option value="Available">Available</option>
                                <option value="Issued">Issued</option>
                                <option value="Damaged">Damaged</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Low Stock Threshold</label>
                            <input type="number" name="low_stock_threshold" min="1" value="5" required>
                        </div>
                        <?php wp_nonce_field('su_p_inventory_add', 'nonce'); ?>
                        <input type="hidden" name="su_p_add_inventory" value="1">
                        <div class="actions">
                            <button type="submit" class="button edu-button-primary">Add Item</button>
                            <a href="<?php echo admin_url('admin.php?page=su-p-inventory-management'); ?>" class="button">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $('#add-center-id').on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                showLoader();
                $.post({
                    url: '<?php echo admin_url('admin-ajax.php'); ?>',
                    data: {
                        action: 'su_p_generate_inventory_id',
                        center_id: centerId,
                        nonce: '<?php echo wp_create_nonce('su_p_inventory_nonce'); ?>'
                    },
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            $('#add-item-id').val(response.data.item_id);
                        } else {
                            $('#add-item-id').val('');
                            alert('Failed to generate Item ID');
                        }
                    },
                    error: function() {
                        hideLoader();
                        $('#add-item-id').val('');
                        alert('Error generating Item ID');
                    }
                });
            } else {
                $('#add-item-id').val('');
            }
        });

        $('#add-inventory-form').on('submit', function(e) {
            showLoader();
            setTimeout(() => {
                <?php if (isset($_POST['su_p_add_inventory']) && strpos($add_message, 'success') !== false) { ?>
                    alert('Inventory item added successfully');
                    window.location.href = '<?php echo admin_url('admin.php?page=su-p-inventory-management'); ?>';
                <?php } else { ?>
                    hideLoader();
                    <?php if ($add_message) { ?>
                        $('#add-inventory-form-container').prepend('<?php echo addslashes($add_message); ?>');
                    <?php } ?>
                <?php } ?>
            }, 500);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Edit Inventory Function (Update)
function render_su_p_edit_inventory() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to edit inventory items.</p>';
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Edit Inventory Items</h2>
                <p>Select an item from the main management page to edit.</p>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-inventory-management'); ?>" class="button">Back to Inventory</a>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// Delete Inventory Function (Delete)
function render_su_p_delete_inventory() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to delete inventory items.</p>';
    }

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Inventory Items</h2>
                <p>Select an item from the main management page to delete.</p>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-inventory-management'); ?>" class="button">Back to Inventory</a>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// View Inventory Function
function render_su_p_view_inventory() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to view inventory items.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>View Inventory Items</h2>
                <div class="edu-students-actions" style="margin-bottom: 20px;">
                    <input type="text" id="name-search" class="edu-search-input" placeholder="Search by Item Name..." style="padding: 8px; width: 300px;">
                    <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="category-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Categories</option>
                        <option value="Equipment">Equipment</option>
                        <option value="Stationery">Stationery</option>
                        <option value="Furniture">Furniture</option>
                        <option value="Other">Other</option>
                    </select>
                    <select id="status-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Statuses</option>
                        <option value="Available">Available</option>
                        <option value="Issued">Issued</option>
                        <option value="Damaged">Damaged</option>
                    </select>
                </div>
                <div class="management-table-wrapper">
                    <table id="inventory-table" class="management-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Quantity</th>
                                <th>Status</th>
                                <th>Low Stock</th>
                                <th>Center ID</th>
                            </tr>
                        </thead>
                        <tbody id="inventory-tbody">
                            <!-- Populated via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        let searchQuery = '';
        let centerFilter = '';
        let categoryFilter = '';
        let statusFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function loadInventory(name, center, category, status) {
            showLoader();
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_fetch_inventory',
                    page: 1,
                    per_page: -1, // Fetch all for view page
                    name_search: name,
                    center_filter: center,
                    category_filter: category,
                    status_filter: status,
                    nonce: '<?php echo wp_create_nonce('su_p_inventory_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const items = response.data.items;
                        let html = '';
                        items.forEach(item => {
                            const lowStock = item.quantity <= item.low_stock_threshold ? '<span class="badge bg-danger">Low</span>' : '<span class="badge bg-success">OK</span>';
                            html += `
                                <tr>
                                    <td>${item.item_id}</td>
                                    <td>${item.name}</td>
                                    <td>${item.category}</td>
                                    <td>${item.quantity}</td>
                                    <td>${item.status}</td>
                                    <td>${lowStock}</td>
                                    <td>${item.education_center_id}</td>
                                </tr>
                            `;
                        });
                        $('#inventory-tbody').html(html);
                    } else {
                        $('#inventory-tbody').html('<tr><td colspan="7">No inventory items found.</td></tr>');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    console.error('Error fetching inventory:', error);
                    $('#inventory-tbody').html('<tr><td colspan="7">Error loading inventory.</td></tr>');
                }
            });
        }

        loadInventory(searchQuery, centerFilter, categoryFilter, statusFilter);

        $('#name-search').on('input', function() {
            searchQuery = $(this).val();
            loadInventory(searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            loadInventory(searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#category-filter').on('change', function() {
            categoryFilter = $(this).val();
            loadInventory(searchQuery, centerFilter, categoryFilter, statusFilter);
        });

        $('#status-filter').on('change', function() {
            statusFilter = $(this).val();
            loadInventory(searchQuery, centerFilter, categoryFilter, statusFilter);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handlers
add_action('wp_ajax_su_p_fetch_inventory', 'su_p_fetch_inventory');
function su_p_fetch_inventory() {
    check_ajax_referer('su_p_inventory_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'inventory';
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $name_search = isset($_POST['name_search']) ? sanitize_text_field($_POST['name_search']) : '';
    $center_filter = isset($_POST['center_filter']) ? sanitize_text_field($_POST['center_filter']) : '';
    $category_filter = isset($_POST['category_filter']) ? sanitize_text_field($_POST['category_filter']) : '';
    $status_filter = isset($_POST['status_filter']) ? sanitize_text_field($_POST['status_filter']) : '';

    $query = "SELECT * FROM $table_name WHERE 1=1";
    $count_query = "SELECT COUNT(*) FROM $table_name WHERE 1=1";
    $args = [];

    if ($name_search) {
        $query .= " AND name LIKE %s";
        $count_query .= " AND name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($name_search) . '%';
    }
    if ($center_filter) {
        $query .= " AND education_center_id = %s";
        $count_query .= " AND education_center_id = %s";
        $args[] = $center_filter;
    }
    if ($category_filter) {
        $query .= " AND category = %s";
        $count_query .= " AND category = %s";
        $args[] = $category_filter;
    }
    if ($status_filter) {
        $query .= " AND status = %s";
        $count_query .= " AND status = %s";
        $args[] = $status_filter;
    }

    $query .= " ORDER BY item_id";
    if ($per_page > 0) {
        $offset = ($page - 1) * $per_page;
        $query .= " LIMIT %d OFFSET %d";
        $args[] = $per_page;
        $args[] = $offset;
    }

    $items = !empty($args) ? $wpdb->get_results($wpdb->prepare($query, $args), ARRAY_A) : $wpdb->get_results($query, ARRAY_A);
    $total = !empty($args) ? $wpdb->get_var($wpdb->prepare($count_query, array_slice($args, 0, -2))) : $wpdb->get_var($count_query);

    wp_send_json_success(['items' => $items, 'total' => $total]);
}

add_action('wp_ajax_su_p_generate_inventory_id', 'su_p_generate_inventory_id');
function su_p_generate_inventory_id() {
    check_ajax_referer('su_p_inventory_nonce', 'nonce');
    $center_id = sanitize_text_field($_POST['center_id']);
    if (empty($center_id)) {
        wp_send_json_error(['message' => 'Center ID is required']);
    }
    $item_id = $center_id . '-' . time(); // Simple unique ID; replace with your logic if needed
    wp_send_json_success(['item_id' => $item_id]);
}

add_action('wp_ajax_su_p_get_inventory_edit_form', 'su_p_get_inventory_edit_form');
function su_p_get_inventory_edit_form() {
    check_ajax_referer('su_p_inventory_nonce', 'nonce');
    global $wpdb;
    $item_id = sanitize_text_field($_POST['item_id']);
    $table_name = $wpdb->prefix . 'inventory';
    $item = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table_name WHERE item_id = %s", $item_id), ARRAY_A);
    if (!$item) {
        wp_send_json_error(['message' => 'Invalid item ID']);
    }

    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    ob_start();
    ?>
    <div class="edu-modal" id="editInventoryModal" style="display: flex;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" onclick="jQuery('#editInventoryModal').remove();">×</span>
            <h3>Edit Inventory Item</h3>
            <div id="edit-inventory-form-container">
                <form id="edit-inventory-form" method="post">
                    <input type="hidden" name="item_id" value="<?php echo esc_attr($item['item_id']); ?>">
                    <div class="search-filters">
                        <label>Education Center</label>
                        <select name="education_center_id" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                $selected = $center_id === $item['education_center_id'] ? 'selected' : '';
                                echo "<option value='$center_id' $selected>" . esc_html($center->post_title) . " ($center_id)</option>";
                            }
                            ?>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Name</label>
                        <input type="text" name="name" value="<?php echo esc_attr($item['name']); ?>" required>
                    </div>
                    <div class="search-filters">
                        <label>Category</label>
                        <select name="category" required>
                            <option value="">Select Category</option>
                            <option value="Equipment" <?php selected($item['category'], 'Equipment'); ?>>Equipment</option>
                            <option value="Stationery" <?php selected($item['category'], 'Stationery'); ?>>Stationery</option>
                            <option value="Furniture" <?php selected($item['category'], 'Furniture'); ?>>Furniture</option>
                            <option value="Other" <?php selected($item['category'], 'Other'); ?>>Other</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Quantity</label>
                        <input type="number" name="quantity" min="0" value="<?php echo esc_attr($item['quantity']); ?>" required>
                    </div>
                    <div class="search-filters">
                        <label>Status</label>
                        <select name="status" required>
                            <option value="">Select Status</option>
                            <option value="Available" <?php selected($item['status'], 'Available'); ?>>Available</option>
                            <option value="Issued" <?php selected($item['status'], 'Issued'); ?>>Issued</option>
                            <option value="Damaged" <?php selected($item['status'], 'Damaged'); ?>>Damaged</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Low Stock Threshold</label>
                        <input type="number" name="low_stock_threshold" min="1" value="<?php echo esc_attr($item['low_stock_threshold']); ?>" required>
                    </div>
                    <input type="hidden" name="action" value="su_p_update_inventory">
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_inventory_nonce'); ?>">
                    <button type="submit" class="button edu-button-primary">Update Item</button>
                </form>
            </div>
        </div>
    </div>
    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $('#edit-inventory-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = new FormData(this);
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Inventory item updated successfully');
                        $('#editInventoryModal').remove();
                        $('#refresh-table').trigger('click');
                    } else {
                        $('#edit-inventory-form-container').prepend(`<div class="alert alert-danger">${response.data.message}</div>`);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error updating inventory item.');
                }
            });
        });
    });
    </script>
    <?php
    wp_send_json_success(ob_get_clean());
}

add_action('wp_ajax_su_p_update_inventory', 'su_p_update_inventory');
function su_p_update_inventory() {
    check_ajax_referer('su_p_inventory_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'inventory';
    $item_id = sanitize_text_field($_POST['item_id']);
    $name = sanitize_text_field($_POST['name']);
    $category = sanitize_text_field($_POST['category']);
    $quantity = intval($_POST['quantity']);
    $status = sanitize_text_field($_POST['status']);
    $low_stock_threshold = intval($_POST['low_stock_threshold']);
    $education_center_id = sanitize_text_field($_POST['education_center_id']);

    $validation = validate_inventory_data($item_id, $name, $category, $quantity, $status, $low_stock_threshold, $education_center_id);
    if ($validation !== true) {
        wp_send_json_error(['message' => $validation]);
    }

    $result = $wpdb->update(
        $table_name,
        [
            'name' => $name,
            'category' => $category,
            'quantity' => $quantity,
            'status' => $status,
            'low_stock_threshold' => $low_stock_threshold,
            'education_center_id' => $education_center_id
        ],
        ['item_id' => $item_id],
        ['%s', '%s', '%d', '%s', '%d', '%s'],
        ['%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update item: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success();
    }
}

add_action('wp_ajax_su_p_get_inventory_delete_form', 'su_p_get_inventory_delete_form');
function su_p_get_inventory_delete_form() {
    check_ajax_referer('su_p_inventory_nonce', 'nonce');
    global $wpdb;
    $item_id = sanitize_text_field($_POST['item_id']);
    $table_name = $wpdb->prefix . 'inventory';
    $item = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table_name WHERE item_id = %s", $item_id), ARRAY_A);
    if (!$item) {
        wp_send_json_error(['message' => 'Invalid item ID']);
    }

    ob_start();
    ?>
    <div class="edu-modal" id="deleteInventoryModal" style="display: flex;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" onclick="jQuery('#deleteInventoryModal').remove();">×</span>
            <h3>Confirm Deletion</h3>
            <div id="delete-inventory-container">
                <p>Are you sure you want to delete item "<?php echo esc_html($item['item_id']); ?>"?</p>
                <table class="management-table-wrapper">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Quantity</th>
                            <th>Status</th>
                            <th>Low Stock</th>
                            <th>Center ID</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><?php echo esc_html($item['item_id']); ?></td>
                            <td><?php echo esc_html($item['name']); ?></td>
                            <td><?php echo esc_html($item['category']); ?></td>
                            <td><?php echo esc_html($item['quantity']); ?></td>
                            <td><?php echo esc_html($item['status']); ?></td>
                            <td><?php echo $item['quantity'] <= $item['low_stock_threshold'] ? '<span class="badge bg-danger">Low</span>' : '<span class="badge bg-success">OK</span>'; ?></td>
                            <td><?php echo esc_html($item['education_center_id']); ?></td>
                        </tr>
                    </tbody>
                </table>
                <form id="delete-inventory-form" method="post">
                    <input type="hidden" name="item_id" value="<?php echo esc_attr($item['item_id']); ?>">
                    <input type="hidden" name="action" value="su_p_delete_inventory">
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_inventory_nonce'); ?>">
                    <button type="submit" class="button edu-button-delete">Delete</button>
                    <button type="button" class="button" onclick="jQuery('#deleteInventoryModal').remove();">Cancel</button>
                </form>
            </div>
        </div>
    </div>
    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $('#delete-inventory-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = new FormData(this);
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Inventory item deleted successfully');
                        $('#deleteInventoryModal').remove();
                        $('#refresh-table').trigger('click');
                    } else {
                        $('#delete-inventory-container').prepend(`<div class="alert alert-danger">${response.data.message}</div>`);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error deleting inventory item.');
                }
            });
        });
    });
    </script>
    <?php
    wp_send_json_success(ob_get_clean());
}

add_action('wp_ajax_su_p_delete_inventory', 'su_p_delete_inventory');
function su_p_delete_inventory() {
    check_ajax_referer('su_p_inventory_nonce', 'nonce');
    global $wpdb;
    $table_name = $wpdb->prefix . 'inventory';
    $item_id = sanitize_text_field($_POST['item_id']);
    if (empty($item_id)) {
        wp_send_json_error(['message' => 'Invalid item ID']);
    }

    $result = $wpdb->delete($table_name, ['item_id' => $item_id], ['%s']);
    if ($result === false) {
        error_log("Failed to delete inventory item ID: $item_id. User: " . get_current_user_id());
        wp_send_json_error(['message' => 'Failed to delete item: Check debug.log']);
    } else {
        wp_send_json_success();
    }
}

// Validation Helper Function
function validate_transaction_data($item_id, $user_id, $user_type, $action, $status, $is_update = false) {
    global $wpdb;
    
    // For updates, skip item_id validation since it's readonly
    if (!$is_update) {
        if (empty($item_id)) return 'Item ID is required';
        if ($wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM {$wpdb->prefix}inventory WHERE item_id = %s", $item_id)) == 0) {
            return 'Item ID does not exist';
        }
    }

    if (empty($user_id)) return 'User ID is required';
    if (!in_array($user_type, ['Student', 'Staff'])) return 'Invalid user type';
    if (!in_array($action, ['Issue', 'Return'])) return 'Invalid action'; // Ensure case matches form values
    if (!in_array($status, ['Pending', 'Completed'])) return 'Invalid status';
    return true;
}
// Main Transaction Management Function (Read)
function render_su_p_transaction_management() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to view this dashboard.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Transaction Management</h2>
                <div class="edu-students-actions" style="margin-bottom: 20px;">
                    <a href="<?php echo admin_url('admin.php?page=su-p-add-transaction'); ?>" class="button edu-button-primary">Add New Transaction</a>
                    <input type="text" id="item-search" class="edu-search-input" placeholder="Search by Item Name..." style="margin-left: 20px; padding: 8px; width: 300px;">
                    <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="action-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Actions</option>
                        <option value="Issue">Issue</option>
                        <option value="Return">Return</option>
                    </select>
                    <select id="status-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <div class="edu-pagination" style="margin: 20px 0;">
                    <label for="items-per-page">Show:</label>
                    <select id="items-per-page" class="edu-select" style="margin-right: 20px;">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button class="edu-button edu-button-nav" id="prev-page" disabled>Previous</button>
                    <span id="page-info" style="margin: 0 10px;"></span>
                    <button class="edu-button edu-button-nav" id="next-page">Next</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="export-tools" id="export-tools" style="margin-bottom: 10px;"></div>
                    <table id="transaction-table" class="management-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Item ID</th>
                                <th>Item Name</th>
                                <th>User ID</th>
                                <th>User Type</th>
                                <th>Action</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="transaction-tbody">
                            <!-- Populated via JavaScript -->
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <button class="button" id="refresh-table">Refresh</button>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        let currentPage = 1;
        let perPage = 10;
        let searchQuery = '';
        let centerFilter = '';
        let actionFilter = '';
        let statusFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function getTableData() {
            const table = $('#transaction-table')[0];
            if (!table) return [];
            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim()).slice(0, -1);
            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {
                const cells = Array.from(row.querySelectorAll('td')).slice(0, -1);
                return cells.map(td => td.textContent.trim());
            });
            return [headers, ...rows];
        }

        function exportToCSV() {
            const data = getTableData();
            const csv = data.map(row => row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')).join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `transactions_${new Date().toISOString().slice(0,10)}.csv`;
            link.click();
        }

        function exportToExcel() {
            if (!window.XLSX) { console.error('XLSX library not loaded'); return; }
            const data = getTableData();
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Transactions');
            XLSX.writeFile(wb, `transactions_${new Date().toISOString().slice(0,10)}.xlsx`);
        }

        function generatePDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ unit: 'mm', format: 'a4' });
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            const pageWidth = doc.internal.pageSize.width;
            const margin = 10;
            const borderColor = [70, 131, 180];

            doc.setDrawColor(...borderColor);
            doc.setLineWidth(1);
            doc.rect(margin, margin, pageWidth - 2 * margin, doc.internal.pageSize.height - 2 * margin);
            if (instituteLogo) {
                try { doc.addImage(instituteLogo, 'JPEG', (pageWidth - 24) / 2, 15, 24, 24); } catch (e) {}
            }
            doc.setFontSize(18);
            doc.setTextColor(...borderColor);
            doc.text(instituteName.toUpperCase(), pageWidth / 2, 45, { align: 'center' });
            doc.setFontSize(12);
            doc.setTextColor(102);
            doc.text('Transaction List', pageWidth / 2, 55, { align: 'center' });
            doc.setDrawColor(...borderColor);
            doc.line(margin + 5, 60, pageWidth - margin - 5, 60);

            const details = [['Date', new Date().toLocaleDateString()], ['Total Transactions', String(data.length - 1)]];
            let y = 70;
            details.forEach(([label, value]) => {
                doc.setFillColor(245, 245, 245);
                doc.rect(margin + 5, y, 50, 6, 'F');
                doc.setTextColor(...borderColor);
                doc.setFont('helvetica', 'bold');
                doc.text(label, margin + 7, y + 4);
                doc.setTextColor(51);
                doc.setFont('helvetica', 'normal');
                doc.text(String(value), margin + 60, y + 4);
                y += 6;
            });

            if (typeof doc.autoTable === 'function' && data.length > 1) {
                doc.autoTable({
                    startY: y + 10,
                    head: [data[0]],
                    body: data.slice(1),
                    theme: 'striped',
                    styles: { fontSize: 11, cellPadding: 2, overflow: 'linebreak', halign: 'center' },
                    headStyles: { fillColor: borderColor, textColor: [255, 255, 255], fontStyle: 'bold' }
                });
                const finalY = doc.lastAutoTable.finalY || y + 10;
                doc.setFontSize(9);
                doc.setTextColor(102);
                doc.text(`Generated by Instituto on ${new Date().toISOString().slice(0,10)}`, pageWidth / 2, finalY + 20, { align: 'center' });
                doc.save(`transactions_${new Date().toISOString().slice(0,10)}.pdf`);
            }
        }

        function copyToClipboard() {
            const data = getTableData();
            const text = data.map(row => row.join('\t')).join('\n');
            navigator.clipboard.writeText(text).then(() => alert('Transactions copied to clipboard!'));
        }

        function printTransactions() {
            const printWindow = window.open('', '_blank');
            const data = getTableData();
            const instituteName = 'Istituto';
            const instituteLogo = '<?php echo esc_js(plugin_dir_url(__DIR__) . 'logo-instituto.jpg'); ?>';
            printWindow.document.write(`
                <html>
                <head><title>Transaction List</title>
                <style>
                    @media print {
                        body { font-family: Helvetica, sans-serif; margin: 10mm; width: 190mm; }
                        .page { border: 4px solid #4683b4; padding: 5mm; box-sizing: border-box; width: 100%; max-width: 190mm; }
                        .header { text-align: center; border-bottom: 2px solid #4683b4; margin-bottom: 10mm; }
                        .header img { width: 60px; height: 60px; margin-bottom: 5mm; }
                        .header h1 { font-size: 18pt; color: #4683b4; margin: 0; text-transform: uppercase; }
                        .header .subtitle { font-size: 12pt; color: #666; margin: 0; }
                        table { width: 100%; border-collapse: collapse; margin: 10mm 0; table-layout: fixed; }
                        th, td { border: 1px solid #e5e5e5; padding: 8px; text-align: center; word-wrap: break-word; font-size: 10pt; }
                        th { background: #4683b4; color: white; font-weight: bold; }
                        tr:nth-child(even) { background: #f9f9f9; }
                        .footer { text-align: center; font-size: 9pt; color: #666; margin-top: 10mm; }
                        @page { size: A4; margin: 10mm; }
                    }
                </style></head>
                <body>
                    <div class="page">
                        <div class="header">
                            ${instituteLogo ? `<img src="${instituteLogo}" alt="Logo" onerror="this.style.display='none';this.nextSibling.style.display='block';"><p style="display:none;">No logo available</p>` : '<p>No logo available</p>'}
                            <h1>${instituteName.toUpperCase()}</h1>
                            <p class="subtitle">Transaction List</p>
                        </div>
                        <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
                        <p><strong>Total Transactions:</strong> ${data.length - 1}</p>
                        <table>
                            <thead><tr>${data[0].map(header => `<th>${header}</th>`).join('')}</tr></thead>
                            <tbody>${data.slice(1).map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}</tbody>
                        </table>
                        <div class="footer">
                            <p>Generated by Instituto on ${new Date().toISOString().slice(0,10)}</p>
                        </div>
                    </div>
                </body></html>
            `);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
        }

        function setupExportButtons() {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv" aria-label="Export to CSV"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf" aria-label="Export to PDF"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel" aria-label="Export to Excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
                <button class="export-btn export-copy" aria-label="Copy to Clipboard"><i class="fas fa-copy"></i><span class="tooltip">Copy to Clipboard</span></button>
                <button class="export-btn export-print" aria-label="Print"><i class="fas fa-print"></i><span class="tooltip">Print</span></button>
            `);
            tools.find('.export-csv').on('click', exportToCSV);
            tools.find('.export-pdf').on('click', generatePDF);
            tools.find('.export-excel').on('click', exportToExcel);
            tools.find('.export-copy').on('click', copyToClipboard);
            tools.find('.export-print').on('click', printTransactions);
        }

        function loadTransactions(page, limit, item, center, action, status) {
            showLoader();
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_fetch_transactions',
                    page: page,
                    per_page: limit,
                    item_search: item,
                    center_filter: center,
                    action_filter: action,
                    status_filter: status,
                    nonce: '<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const transactions = response.data.transactions;
                        const total = response.data.total;
                        let html = '';
                        transactions.forEach(trans => {
                            const statusBadge = trans.status === 'Completed' ? 'bg-success' : 'bg-warning';
                            html += `
                                <tr data-trans-id="${trans.transaction_id}">
                                    <td>${trans.transaction_id}</td>
                                    <td>${trans.item_id}</td>
                                    <td>${trans.name}</td>
                                    <td>${trans.user_id}</td>
                                    <td>${trans.user_type}</td>
                                    <td>${trans.action}</td>
                                    <td><span class="badge ${statusBadge}">${trans.status}</span></td>
                                    <td>${trans.date}</td>
                                    <td>${trans.education_center_id}</td>
                                    <td>
                                        <button class="edu-button edu-button-edit" data-trans-id="${trans.transaction_id}">Edit</button>
                                        <button class="edu-button edu-button-delete" data-trans-id="${trans.transaction_id}">Delete</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#transaction-tbody').html(html);
                        setupExportButtons();

                        const totalPages = Math.ceil(total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages}`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);

                        $('.edu-button-edit').on('click', function() {
                            const transId = $(this).data('trans-id');
                            showEditModal(transId);
                        });
                        $('.edu-button-delete').on('click', function() {
                            const transId = $(this).data('trans-id');
                            showDeleteModal(transId);
                        });
                    } else {
                        $('#transaction-tbody').html('<tr><td colspan="10">No transactions found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    console.error('Error fetching transactions:', error);
                    $('#transaction-tbody').html('<tr><td colspan="10">Error loading transactions.</td></tr>');
                    $('#export-tools').html('');
                }
            });
        }

        function showEditModal(transId) {
            if ($('#editTransactionModal').length) $('#editTransactionModal').remove();
            $('body').append('<div id="edit-modal-placeholder"></div>');
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_get_transaction_edit_form',
                    trans_id: transId,
                    nonce: '<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $('#edit-modal-placeholder').html(response.data);
                    } else {
                        alert('Failed to load edit form: ' + response.data.message);
                    }
                },
                error: function() {
                    alert('Error loading edit form.');
                }
            });
        }

        function showDeleteModal(transId) {
            if ($('#deleteTransactionModal').length) $('#deleteTransactionModal').remove();
            $('body').append('<div id="delete-modal-placeholder"></div>');
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_get_transaction_delete_form',
                    trans_id: transId,
                    nonce: '<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $('#delete-modal-placeholder').html(response.data);
                    } else {
                        alert('Failed to load delete form: ' + response.data.message);
                    }
                },
                error: function() {
                    alert('Error loading delete form.');
                }
            });
        }

        loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);

        $('#item-search').on('input', function() {
            searchQuery = $(this).val();
            currentPage = 1;
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#action-filter').on('change', function() {
            actionFilter = $(this).val();
            currentPage = 1;
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#status-filter').on('change', function() {
            statusFilter = $(this).val();
            currentPage = 1;
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#items-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#refresh-table').on('click', function() {
            currentPage = 1;
            searchQuery = '';
            centerFilter = '';
            actionFilter = '';
            statusFilter = '';
            $('#item-search').val('');
            $('#center-filter').val('');
            $('#action-filter').val('');
            $('#status-filter').val('');
            loadTransactions(currentPage, perPage, searchQuery, centerFilter, actionFilter, statusFilter);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Add Transaction Function (Create) - Modified to require center selection first
function render_su_p_add_transaction() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to add transactions.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $add_message = '';

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Add Transaction</h2>
                <div id="add-transaction-form-container">
                    <?php if ($add_message) echo $add_message; ?>
                    <form id="add-transaction-form" method="post">
                        <div class="search-filters">
                            <label>Educational Center</label>
                            <select name="education_center_id" id="education-center-select" required>
                                <option value="">Select Center</option>
                                <?php
                                foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                    echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                                }
                                ?>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Item ID</label>
                            <select name="item_id" id="item-id-select" required disabled>
                                <option value="">Select Center First</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>User ID</label>
                            <input type="text" name="user_id" required>
                        </div>
                        <div class="search-filters">
                            <label>User Type</label>
                            <select name="user_type" required>
                                <option value="">Select Type</option>
                                <option value="Student">Student</option>
                                <option value="Staff">Staff</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Action</label>
                            <select name="action" required>
                                <option value="">Select Action</option>
                                <option value="Issue">Issue</option>
                                <option value="Return">Return</option>
                            </select>
                        </div>
                        <div class="search-filters">
                            <label>Status</label>
                            <select name="status" required>
                                <option value="">Select Status</option>
                                <option value="Pending">Pending</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                        <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>">
                        <input type="hidden" name="action" value="su_p_add_transaction">
                        <div class="actions">
                            <button type="submit" class="button edu-button-primary">Add Transaction</button>
                            <a href="<?php echo admin_url('admin.php?page=su-p-transaction-management'); ?>" class="button">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        $('#education-center-select').on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                showLoader();
                $.post({
                    url: '<?php echo admin_url('admin-ajax.php'); ?>',
                    data: {
                        action: 'su_p_fetch_items_by_center',
                        center_id: centerId,
                        nonce: '<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>'
                    },
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            let options = '<option value="">Select Item</option>';
                            response.data.forEach(item => {
                                options += `<option value="${item.item_id}">${item.item_id} - ${item.name}</option>`;
                            });
                            $('#item-id-select').html(options).prop('disabled', false);
                        } else {
                            $('#item-id-select').html('<option value="">No items found</option>').prop('disabled', true);
                        }
                    },
                    error: function() {
                        hideLoader();
                        alert('Error fetching items');
                    }
                });
            } else {
                $('#item-id-select').html('<option value="">Select Center First</option>').prop('disabled', true);
            }
        });

        $('#add-transaction-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = new FormData(this);
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Transaction added successfully');
                        window.location.href = '<?php echo admin_url('admin.php?page=su-p-transaction-management'); ?>';
                    } else {
                        $('#add-transaction-form-container').prepend(`<div class="alert alert-danger">${response.data.message}</div>`);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error adding transaction: ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// Edit Transaction Function (Update) - Modified to show table
// su-p-edit-transaction
function render_su_p_edit_transaction() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'inventory_transactions';
    
    // Get all transactions
    $transactions = $wpdb->get_results("SELECT * FROM $table_name ORDER BY date DESC");

    // Start output buffering
    ob_start();
    ?>
    <div class="su-p-transactions-wrap">
        <table class="wp-list-table widefat fixed striped">
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Item ID</th>
                    <th>User ID</th>
                    <th>User Type</th>
                    <th>Action</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($transactions as $transaction): ?>
                    <tr>
                        <td><?php echo esc_html($transaction->transaction_id); ?></td>
                        <td><?php echo esc_html($transaction->item_id); ?></td>
                        <td><?php echo esc_html($transaction->user_id); ?></td>
                        <td><?php echo esc_html($transaction->user_type); ?></td>
                        <td><?php echo esc_html($transaction->action); ?></td>
                        <td><?php echo esc_html($transaction->date); ?></td>
                        <td><?php echo esc_html($transaction->status); ?></td>
                        <td>
                            <button class="edu-button edu-button-edit" 
                                    data-transaction-id="<?php echo esc_attr($transaction->transaction_id); ?>">
                                Edit
                            </button>
                        </td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>

        <!-- Edit Modal -->
        <div class="edu-modal">
            <div class="edu-modal-content">
                <span class="edu-modal-close">×</span>
                <h3>Edit Transaction</h3>
                <form class="edu-modal-form">
                    <input type="hidden" name="transaction_id" id="edit_transaction_id">
                    
                    <div class="search-filters">
                        <label>Item ID: <span id="display_item_id"></span></label>
                    </div>
                    <div class="search-filters">
                        <label>User ID: <span id="display_user_id"></span></label>
                    </div>

                    <div class="search-filters">
                        <label for="edit_user_type">User Type</label>
                        <select id="edit_user_type" name="user_type">
                            <option value="Staff">Staff</option>
                            <option value="Student">Student</option>
                        </select>
                    </div>

                    <div class="search-filters">
                        <label for="edit_action">Action</label>
                        <select id="edit_action" name="action">
                            <option value="Issue">Issue</option>
                            <option value="Return">Return</option>
                        </select>
                    </div>

                    <div class="search-filters">
                        <label for="edit_date">Date</label>
                        <input type="datetime-local" id="edit_date" name="date">
                    </div>

                    <div class="search-filters">
                        <label for="edit_status">Status</label>
                        <select id="edit_status" name="status">
                            <option value="Pending">Pending</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>

                    <button type="submit" class="edu-button edu-button-primary">Update Transaction</button>
                    <div class="message"></div>
                </form>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        // Open modal and populate data
        $('.edu-button-edit').on('click', function() {
            var transactionId = $(this).data('transaction-id');
            var $row = $(this).closest('tr');
            
            // Populate modal with current row data
            $('#edit_transaction_id').val(transactionId);
            $('#display_item_id').text($row.find('td:eq(1)').text());
            $('#display_user_id').text($row.find('td:eq(2)').text());
            $('#edit_user_type').val($row.find('td:eq(3)').text());
            $('#edit_action').val($row.find('td:eq(4)').text());
            $('#edit_date').val(new Date($row.find('td:eq(5)').text()).toISOString().slice(0,16));
            $('#edit_status').val($row.find('td:eq(6)').text());
            
            $('.edu-modal').show();
            $('.message').hide();
        });

        // Close modal
        $('.edu-modal-close').on('click', function() {
            $('.edu-modal').hide();
        });

        // Handle form submission
        $('.edu-modal-form').on('submit', function(e) {
            e.preventDefault();
            
            var $form = $(this);
            var $message = $form.find('.message');

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'su_p_update_transaction',
                    transaction_id: $('#edit_transaction_id').val(),
                    user_type: $('#edit_user_type').val(),
                    action_type: $('#edit_action').val(),
                    date: $('#edit_date').val(),
                    status: $('#edit_status').val(),
                    nonce: '<?php echo wp_create_nonce('su_p_update_transaction_nonce'); ?>'
                },
                beforeSend: function() {
                    $message.html('Updating...').show();
                },
                success: function(response) {
                    if (response.success) {
                        $message.html('Transaction updated successfully');
                        // Update table row
                        var $row = $('button[data-transaction-id="' + $('#edit_transaction_id').val() + '"]').closest('tr');
                        $row.find('td:eq(3)').text($('#edit_user_type').val());
                        $row.find('td:eq(4)').text($('#edit_action').val());
                        $row.find('td:eq(5)').text(new Date($('#edit_date').val()).toLocaleString());
                        $row.find('td:eq(6)').text($('#edit_status').val());
                        setTimeout(() => $('.edu-modal').hide(), 1000);
                    } else {
                        $message.html(response.data.message || 'Error updating transaction');
                    }
                },
                error: function() {
                    $message.html('Server error occurred');
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX handler (unchanged)
add_action('wp_ajax_su_p_update_transaction', 'su_p_update_transaction_callback');
function su_p_update_transaction_callback() {
    global $wpdb;

    if (!check_ajax_referer('su_p_update_transaction_nonce', 'nonce', false)) {
        wp_send_json_error(['message' => 'Security check failed']);
    }

    $transaction_id = intval($_POST['transaction_id']);
    $user_type = sanitize_text_field($_POST['user_type']);
    $action = sanitize_text_field($_POST['action_type']);
    $date = sanitize_text_field($_POST['date']);
    $status = sanitize_text_field($_POST['status']);

    if (!in_array($user_type, ['Staff', 'Student']) || 
        !in_array($action, ['Issue', 'Return']) || 
        !in_array($status, ['Pending', 'Completed'])) {
        wp_send_json_error(['message' => 'Invalid input data']);
    }

    $table_name = $wpdb->prefix . 'inventory_transactions';
    $updated = $wpdb->update(
        $table_name,
        [
            'user_type' => $user_type,
            'action' => $action,
            'date' => date('Y-m-d H:i:s', strtotime($date)),
            'status' => $status
        ],
        ['transaction_id' => $transaction_id],
        ['%s', '%s', '%s', '%s'],
        ['%d']
    );

    if ($updated !== false) {
        wp_send_json_success();
    } else {
        wp_send_json_error(['message' => 'Failed to update transaction']);
    }
}

// Delete Transaction Function (Delete) - Modified to show table
function render_su_p_delete_transaction() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to delete transactions.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Delete Transactions</h2>
                <div class="edu-students-actions" style="margin-bottom: 20px;">
                    <input type="text" id="item-search" class="edu-search-input" placeholder="Search by Item Name..." style="padding: 8px; width: 300px;">
                    <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="action-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Actions</option>
                        <option value="Issue">Issue</option>
                        <option value="Return">Return</option>
                    </select>
                    <select id="status-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <div class="management-table-wrapper">
                    <table id="transaction-table" class="management-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Item ID</th>
                                <th>Item Name</th>
                                <th>User ID</th>
                                <th>User Type</th>
                                <th>Action</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Center ID</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="transaction-tbody">
                            <!-- Populated via JavaScript -->
                        </tbody>
                    </table>
                </div>
                <div class="actions">
                    <a href="<?php echo admin_url('admin.php?page=su-p-transaction-management'); ?>" class="button">Back to Transactions</a>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        let searchQuery = '';
        let centerFilter = '';
        let actionFilter = '';
        let statusFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function loadTransactions(item, center, action, status) {
            showLoader();
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_fetch_transactions',
                    page: 1,
                    per_page: -1,
                    item_search: item,
                    center_filter: center,
                    action_filter: action,
                    status_filter: status,
                    nonce: '<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const transactions = response.data.transactions;
                        let html = '';
                        transactions.forEach(trans => {
                            const statusBadge = trans.status === 'Completed' ? 'bg-success' : 'bg-warning';
                            html += `
                                <tr data-trans-id="${trans.transaction_id}">
                                    <td>${trans.transaction_id}</td>
                                    <td>${trans.item_id}</td>
                                    <td>${trans.name}</td>
                                    <td>${trans.user_id}</td>
                                    <td>${trans.user_type}</td>
                                    <td>${trans.action}</td>
                                    <td><span class="badge ${statusBadge}">${trans.status}</span></td>
                                    <td>${trans.date}</td>
                                    <td>${trans.education_center_id}</td>
                                    <td>
                                        <button class="edu-button edu-button-delete" data-trans-id="${trans.transaction_id}">Delete</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#transaction-tbody').html(html);

                        $('.edu-button-delete').on('click', function() {
                            const transId = $(this).data('trans-id');
                            showDeleteModal(transId);
                        });
                    } else {
                        $('#transaction-tbody').html('<tr><td colspan="10">No transactions found.</td></tr>');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    console.error('Error fetching transactions:', error);
                    $('#transaction-tbody').html('<tr><td colspan="10">Error loading transactions.</td></tr>');
                }
            });
        }

        function showDeleteModal(transId) {
            if ($('#deleteTransactionModal').length) $('#deleteTransactionModal').remove();
            $('body').append('<div id="delete-modal-placeholder"></div>');
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_get_transaction_delete_form',
                    trans_id: transId,
                    nonce: '<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>'
                },
                success: function(response) {
                    if (response.success) {
                        $('#delete-modal-placeholder').html(response.data);
                        setupDeleteForm();
                    } else {
                        alert('Failed to load delete form: ' + response.data.message);
                    }
                },
                error: function() {
                    alert('Error loading delete form.');
                }
            });
        }

        function setupDeleteForm() {
            $('#deleteTransactionModal .edu-modal-close, #deleteTransactionModal .edu-modal-cancel').on('click', function() {
                $('#deleteTransactionModal').fadeOut(300, function() {
                    $(this).remove();
                });
            });

            $(document).on('click', function(e) {
                if ($(e.target).is('#deleteTransactionModal')) {
                    $('#deleteTransactionModal').fadeOut(300, function() {
                        $(this).remove();
                    });
                }
            });

            $('#delete-transaction-form').on('submit', function(e) {
                e.preventDefault();
                showLoader();
                const formData = new FormData(this);
                $.ajax({
                    url: '<?php echo admin_url('admin-ajax.php'); ?>',
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            alert('Transaction deleted successfully');
                            $('#deleteTransactionModal').fadeOut(300, function() {
                                $(this).remove();
                            });
                            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
                        } else {
                            $('#delete-transaction-container').prepend(`<div class="alert alert-danger">${response.data.message}</div>`);
                        }
                    },
                    error: function(xhr, status, error) {
                        hideLoader();
                        alert('Error deleting transaction: ' + error);
                    }
                });
            });
        }

        loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);

        $('#item-search').on('input', function() {
            searchQuery = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#action-filter').on('change', function() {
            actionFilter = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#status-filter').on('change', function() {
            statusFilter = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// View Transactions Function
function render_su_p_view_transactions() {
    if (!current_user_can('manage_options')) {
        return '<p>You must be a Super Administrator to view transactions.</p>';
    }

    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1, 'post_status' => 'publish']);

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>View Transactions</h2>
                <div class="edu-students-actions" style="margin-bottom: 20px;">
                    <input type="text" id="item-search" class="edu-search-input" placeholder="Search by Item Name..." style="padding: 8px; width: 300px;">
                    <select id="center-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                    <select id="action-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Actions</option>
                        <option value="Issue">Issue</option>
                        <option value="Return">Return</option>
                    </select>
                    <select id="status-filter" class="edu-select" style="margin-left: 20px; padding: 8px;">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <div class="management-table-wrapper">
                    <table id="transaction-table" class="management-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Item ID</th>
                                <th>Item Name</th>
                                <th>User ID</th>
                                <th>User Type</th>
                                <th>Action</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Center ID</th>
                            </tr>
                        </thead>
                        <tbody id="transaction-tbody">
                            <!-- Populated via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        let searchQuery = '';
        let centerFilter = '';
        let actionFilter = '';
        let statusFilter = '';

        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        function loadTransactions(item, center, action, status) {
            showLoader();
            $.post({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                data: {
                    action: 'su_p_fetch_transactions',
                    page: 1,
                    per_page: -1,
                    item_search: item,
                    center_filter: center,
                    action_filter: action,
                    status_filter: status,
                    nonce: '<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>'
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        const transactions = response.data.transactions;
                        let html = '';
                        transactions.forEach(trans => {
                            const statusBadge = trans.status === 'Completed' ? 'bg-success' : 'bg-warning';
                            html += `
                                <tr>
                                    <td>${trans.transaction_id}</td>
                                    <td>${trans.item_id}</td>
                                    <td>${trans.name}</td>
                                    <td>${trans.user_id}</td>
                                    <td>${trans.user_type}</td>
                                    <td>${trans.action}</td>
                                    <td><span class="badge ${statusBadge}">${trans.status}</span></td>
                                    <td>${trans.date}</td>
                                    <td>${trans.education_center_id}</td>
                                </tr>
                            `;
                        });
                        $('#transaction-tbody').html(html);
                    } else {
                        $('#transaction-tbody').html('<tr><td colspan="9">No transactions found.</td></tr>');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    console.error('Error fetching transactions:', error);
                    $('#transaction-tbody').html('<tr><td colspan="9">Error loading transactions.</td></tr>');
                }
            });
        }

        loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);

        $('#item-search').on('input', function() {
            searchQuery = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#action-filter').on('change', function() {
            actionFilter = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });

        $('#status-filter').on('change', function() {
            statusFilter = $(this).val();
            loadTransactions(searchQuery, centerFilter, actionFilter, statusFilter);
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Handlers
add_action('wp_ajax_su_p_fetch_transactions', 'su_p_fetch_transactions');
function su_p_fetch_transactions() {
    check_ajax_referer('su_p_transaction_nonce', 'nonce');
    global $wpdb;
    $trans_table = $wpdb->prefix . 'inventory_transactions';
    $inv_table = $wpdb->prefix . 'inventory';
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $item_search = isset($_POST['item_search']) ? sanitize_text_field($_POST['item_search']) : '';
    $center_filter = isset($_POST['center_filter']) ? sanitize_text_field($_POST['center_filter']) : '';
    $action_filter = isset($_POST['action_filter']) ? sanitize_text_field($_POST['action_filter']) : '';
    $status_filter = isset($_POST['status_filter']) ? sanitize_text_field($_POST['status_filter']) : '';

    $query = "SELECT t.*, i.name, i.education_center_id FROM $trans_table t JOIN $inv_table i ON t.item_id = i.item_id WHERE 1=1";
    $count_query = "SELECT COUNT(*) FROM $trans_table t JOIN $inv_table i ON t.item_id = i.item_id WHERE 1=1";
    $args = [];

    if ($item_search) {
        $query .= " AND i.name LIKE %s";
        $count_query .= " AND i.name LIKE %s";
        $args[] = '%' . $wpdb->esc_like($item_search) . '%';
    }
    if ($center_filter) {
        $query .= " AND i.education_center_id = %s";
        $count_query .= " AND i.education_center_id = %s";
        $args[] = $center_filter;
    }
    if ($action_filter) {
        $query .= " AND t.action = %s";
        $count_query .= " AND t.action = %s";
        $args[] = $action_filter;
    }
    if ($status_filter) {
        $query .= " AND t.status = %s";
        $count_query .= " AND t.status = %s";
        $args[] = $status_filter;
    }

    $query .= " ORDER BY t.date DESC";
    if ($per_page > 0) {
        $offset = ($page - 1) * $per_page;
        $query .= " LIMIT %d OFFSET %d";
        $args[] = $per_page;
        $args[] = $offset;
    }

    $transactions = !empty($args) ? $wpdb->get_results($wpdb->prepare($query, $args), ARRAY_A) : $wpdb->get_results($query, ARRAY_A);
    $total = !empty($args) ? $wpdb->get_var($wpdb->prepare($count_query, array_slice($args, 0, -2))) : $wpdb->get_var($count_query);

    wp_send_json_success(['transactions' => $transactions, 'total' => $total]);
}

add_action('wp_ajax_su_p_add_transaction', 'su_p_add_transaction');
function su_p_add_transaction() {
    check_ajax_referer('su_p_transaction_nonce', 'nonce');
    global $wpdb;
    $trans_table = $wpdb->prefix . 'inventory_transactions';
    $item_id = sanitize_text_field($_POST['item_id']);
    $user_id = sanitize_text_field($_POST['user_id']);
    $user_type = sanitize_text_field($_POST['user_type']);
    $action = sanitize_text_field($_POST['action']);
    $status = sanitize_text_field($_POST['status']);

    $validation = validate_transaction_data($item_id, $user_id, $user_type, $action, $status);
    if ($validation !== true) {
        wp_send_json_error(['message' => $validation]);
    }

    $result = $wpdb->insert(
        $trans_table,
        [
            'item_id' => $item_id,
            'user_id' => $user_id,
            'user_type' => $user_type,
            'action' => $action,
            'date' => current_time('mysql'),
            'status' => $status
        ],
        ['%s', '%s', '%s', '%s', '%s', '%s']
    );

    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add transaction: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success();
    }
}

add_action('wp_ajax_su_p_get_transaction_edit_form', 'su_p_get_transaction_edit_form');
function su_p_get_transaction_edit_form() {
    check_ajax_referer('su_p_transaction_nonce', 'nonce');
    global $wpdb;
    $trans_id = intval($_POST['trans_id']);
    $trans_table = $wpdb->prefix . 'inventory_transactions';
    $inv_table = $wpdb->prefix . 'inventory';
    $transaction = $wpdb->get_row($wpdb->prepare(
        "SELECT t.*, i.name FROM $trans_table t JOIN $inv_table i ON t.item_id = i.item_id WHERE t.transaction_id = %d",
        $trans_id
    ), ARRAY_A);
    if (!$transaction) {
        wp_send_json_error(['message' => 'Invalid transaction ID']);
    }

    $name = isset($transaction['name']) ? esc_attr($transaction['name']) : 'Unknown Item';

    ob_start();
    ?>
    <div class="edu-modal" id="editTransactionModal" style="display: flex;">
        <div class="edu-modal-content">
            <span class="edu-modal-close">×</span>
            <h3>Edit Transaction</h3>
            <div id="edit-transaction-form-container">
                <form id="edit-transaction-form" method="post">
                    <input type="hidden" name="transaction_id" value="<?php echo esc_attr($transaction['transaction_id']); ?>">
                    <div class="search-filters">
                        <label>Item ID</label>
                        <input type="text" name="item_id" value="<?php echo esc_attr($transaction['item_id']); ?>" readonly required>
                    </div>
                    <div class="search-filters">
                        <label>Item Name</label>
                        <input type="text" value="<?php echo $name; ?>" readonly>
                    </div>
                    <div class="search-filters">
                        <label>User ID</label>
                        <input type="text" name="user_id" value="<?php echo esc_attr($transaction['user_id']); ?>" required>
                    </div>
                    <div class="search-filters">
                        <label>User Type</label>
                        <select name="user_type" required>
                            <option value="">Select Type</option>
                            <option value="Staff" <?php selected($transaction['user_type'], 'Staff'); ?>>Staff</option>
                            <option value="Student" <?php selected($transaction['user_type'], 'Student'); ?>>Student</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Action</label>
                        <select name="action" required>
                            <option value="">Select Action</option>
                            <option value="Issue" <?php selected($transaction['action'], 'Issue'); ?>>Issue</option>
                            <option value="Return" <?php selected($transaction['action'], 'Return'); ?>>Return</option>
                        </select>
                    </div>
                    <div class="search-filters">
                        <label>Status</label>
                        <select name="status" required>
                            <option value="">Select Status</option>
                            <option value="Pending" <?php selected($transaction['status'], 'Pending'); ?>>Pending</option>
                            <option value="Completed" <?php selected($transaction['status'], 'Completed'); ?>>Completed</option>
                        </select>
                    </div>
                    <input type="hidden" name="ajax_action" value="su_p_update_transaction"> <!-- Changed from "action" to "ajax_action" -->
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>">
                    <button type="submit" class="button edu-button-primary">Update Transaction</button>
                </form>
            </div>
        </div>
    </div>
    <?php
    wp_send_json_success(ob_get_clean());
}

add_action('wp_ajax_su_p_get_transaction_delete_form', 'su_p_get_transaction_delete_form');
function su_p_get_transaction_delete_form() {
    check_ajax_referer('su_p_transaction_nonce', 'nonce');
    global $wpdb;
    $trans_id = intval($_POST['trans_id']);
    $trans_table = $wpdb->prefix . 'inventory_transactions';
    $inv_table = $wpdb->prefix . 'inventory';
    $transaction = $wpdb->get_row($wpdb->prepare("SELECT t.*, i.name, i.education_center_id FROM $trans_table t JOIN $inv_table i ON t.item_id = i.item_id WHERE t.transaction_id = %d", $trans_id), ARRAY_A);
    if (!$transaction) {
        wp_send_json_error(['message' => 'Invalid transaction ID']);
    }

    ob_start();
    ?>
    <div class="edu-modal" id="deleteTransactionModal" style="display: flex;">
        <div class="edu-modal-content">
            <span class="edu-modal-close">&times;</span>
            <h3>Confirm Deletion</h3>
            <div id="delete-transaction-container">
                <p>Are you sure you want to delete transaction ID "<?php echo esc_html($transaction['transaction_id']); ?>"?</p>
                <table class="management-table-wrapper">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Item ID</th>
                            <th>Item Name</th>
                            <th>User ID</th>
                            <th>User Type</th>
                            <th>Action</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Center ID</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><?php echo esc_html($transaction['transaction_id']); ?></td>
                            <td><?php echo esc_html($transaction['item_id']); ?></td>
                            <td><?php echo esc_html($transaction['name']); ?></td>
                            <td><?php echo esc_html($transaction['user_id']); ?></td>
                            <td><?php echo esc_html($transaction['user_type']); ?></td>
                            <td><?php echo esc_html($transaction['action']); ?></td>
                            <td><span class="badge <?php echo $transaction['status'] === 'Completed' ? 'bg-success' : 'bg-warning'; ?>"><?php echo esc_html($transaction['status']); ?></span></td>
                            <td><?php echo esc_html($transaction['date']); ?></td>
                            <td><?php echo esc_html($transaction['education_center_id']); ?></td>
                        </tr>
                    </tbody>
                </table>
                <form id="delete-transaction-form" method="post">
                    <input type="hidden" name="transaction_id" value="<?php echo esc_attr($transaction['transaction_id']); ?>">
                    <input type="hidden" name="action" value="su_p_delete_transaction">
                    <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('su_p_transaction_nonce'); ?>">
                    <button type="submit" class="button edu-button-delete">Delete</button>
                    <button type="button" class="button edu-modal-cancel">Cancel</button>
                </form>
            </div>
        </div>
    </div>
    <script>
    jQuery(document).ready(function($) {
        function showLoader() { $('#edu-loader').show(); }
        function hideLoader() { $('#edu-loader').hide(); }

        // Modal close handlers
        $('#deleteTransactionModal .edu-modal-close, #deleteTransactionModal .edu-modal-cancel').on('click', function() {
            $('#deleteTransactionModal').fadeOut(300, function() {
                $(this).remove();
            });
        });

        // Click outside to close
        $(document).on('click', function(e) {
            if ($(e.target).is('#deleteTransactionModal')) {
                $('#deleteTransactionModal').fadeOut(300, function() {
                    $(this).remove();
                });
            }
        });

        $('#delete-transaction-form').on('submit', function(e) {
            e.preventDefault();
            showLoader();
            const formData = new FormData(this);
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        alert('Transaction deleted successfully');
                        $('#deleteTransactionModal').fadeOut(300, function() {
                            $(this).remove();
                        });
                        loadTransactions('<?php echo isset($searchQuery) ? $searchQuery : ''; ?>', 
                                       '<?php echo isset($centerFilter) ? $centerFilter : ''; ?>', 
                                       '<?php echo isset($actionFilter) ? $actionFilter : ''; ?>', 
                                       '<?php echo isset($statusFilter) ? $statusFilter : ''; ?>');
                    } else {
                        $('#delete-transaction-container').prepend(`<div class="alert alert-danger">${response.data.message}</div>`);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error deleting transaction.');
                }
            });
        });
    });
    </script>
    <?php
    wp_send_json_success(ob_get_clean());
}

add_action('wp_ajax_su_p_delete_transaction', 'su_p_delete_transaction');
function su_p_delete_transaction() {
    check_ajax_referer('su_p_transaction_nonce', 'nonce');
    global $wpdb;
    $trans_table = $wpdb->prefix . 'inventory_transactions';
    $transaction_id = intval($_POST['transaction_id']);
    if (empty($transaction_id)) {
        wp_send_json_error(['message' => 'Invalid transaction ID']);
    }

    $result = $wpdb->delete($trans_table, ['transaction_id' => $transaction_id], ['%d']);
    if ($result === false) {
        error_log("Failed to delete transaction ID: $transaction_id. User: " . get_current_user_id());
        wp_send_json_error(['message' => 'Failed to delete transaction: Check debug.log']);
    } else {
        wp_send_json_success();
    }
}

add_action('wp_ajax_su_p_fetch_items_by_center', 'su_p_fetch_items_by_center');
function su_p_fetch_items_by_center() {
    check_ajax_referer('su_p_transaction_nonce', 'nonce');
    global $wpdb;
    $center_id = sanitize_text_field($_POST['center_id']);
    $inv_table = $wpdb->prefix . 'inventory';
    
    $items = $wpdb->get_results($wpdb->prepare(
        "SELECT item_id, name FROM $inv_table WHERE education_center_id = %s",
        $center_id
    ), ARRAY_A);

    if ($items) {
        wp_send_json_success($items);
    } else {
        wp_send_json_error(['message' => 'No items found for this center']);
    }
}

//message
// Enqueue Styles and Scripts
add_action('admin_enqueue_scripts', 'enigma_overlord_chat_enqueue');
function enigma_overlord_chat_enqueue() {
    wp_enqueue_style('bootstrap', 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');
    wp_enqueue_style('bootstrap-icons', 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css');
    wp_enqueue_script('jquery', 'https://code.jquery.com/jquery-3.6.0.min.js', [], null, true);
    wp_enqueue_script('bootstrap', 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js', ['jquery'], null, true);
    wp_enqueue_script('moment', 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js', [], null, true);
    wp_add_inline_style('bootstrap', '
        .chat-sidebar { max-height: 80vh; overflow-y: auto; border-right: 1px solid #ddd; }
        .chat-message { padding: 10px; margin: 5px; border-radius: 5px; max-width: 70%; }
        .chat-message.sent { background: #d4edda; align-self: flex-end; }
        .chat-message.received { background: #f8f9fa; align-self: flex-start; }
        .chat-header { background: #17a2b8; color: white; padding: 10px; }
        .chat-messages { max-height: 60vh; overflow-y: auto; display: flex; flex-direction: column; }
        .conversation-list { list-style: none; padding: 0; }
        .conversation-item { padding: 10px; cursor: pointer; }
        .conversation-item:hover { background: #f1f1f1; }
        .conversation-item.active { background: #e9ecef; }
    ');
}

// Main Chat Function
function render_eo_chat() {
    if (!current_user_can('manage_options')) {
        return '<p>You do not have permission to access this page.</p>';
    }

    global $wpdb;
    $admins = $wpdb->get_results("SELECT institute_admin_id AS id, name, education_center_id FROM {$wpdb->prefix}institute_admins");

    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Enigma Overlord Chat</h2>
                <div id="enigma-overlord-chat" class="chat-container">
                    <div class="chat-wrapper d-flex">
                        <div class="chat-sidebar col-md-3">
                            <div class="sidebar-header">
                                <h4>Conversations <span id="unread-badge" class="badge bg-danger"></span>
                                    <button id="enigma-refresh-conversations" class="btn btn-outline-light btn-sm" style="float: right;"><i class="bi bi-arrow-repeat"></i></button>
                                </h4>
                            </div>
                            <ul id="enigma-overlord-conversations" class="conversation-list"></ul>
                        </div>
                        <div class="chat-main col-md-9">
                            <div class="chat-header d-flex justify-content-between align-items-center">
                                <h5 id="current-conversation">Select a conversation</h5>
                                <div>
                                    <button id="enigma-refresh-messages" class="btn btn-outline-light btn-sm"><i class="bi bi-arrow-repeat"></i> Refresh</button>
                                    <button id="new-chat" class="btn btn-outline-primary btn-sm">New Chat</button>
                                    <button id="clear-conversation" class="btn btn-outline-secondary btn-sm" style="display:none;">Clear</button>
                                </div>
                            </div>
                            <div id="enigma-overlord-message-list" class="chat-messages"></div>
                            <form id="enigma-overlord-send-form" class="chat-form">
                                <div class="input-group">
                                    <textarea id="enigma-overlord-message-input" class="form-control" placeholder="Type your message..." rows="1" required></textarea>
                                    <button type="submit" class="btn btn-primary"><i class="bi bi-send"></i></button>
                                </div>
                                <div id="recipient-select" class="recipient-select" style="display:none;">
                                    <select id="enigma-overlord-target-value" class="form-select">
                                        <option value="">Select an Institute Admin</option>
                                        <?php
                                        foreach ($admins as $admin) {
                                            $center_id = $admin->education_center_id;
                                            $center = get_posts([
                                                'post_type' => 'educational-center',
                                                'meta_key' => 'educational_center_id',
                                                'meta_value' => $center_id,
                                                'posts_per_page' => 1
                                            ]);
                                            $center_name = $center ? $center[0]->post_title : 'Unknown Center';
                                            echo "<option value='{$admin->id}|$center_id'>" . esc_html("{$admin->name} ({$admin->id} - $center_name)") . "</option>";
                                        }
                                        ?>
                                    </select>
                                </div>
                                <?php wp_nonce_field('enigma_overlord_chat_nonce', 'enigma_overlord_nonce_field'); ?>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script>
    jQuery(document).ready(function($) {
        let selectedConversation = localStorage.getItem('enigma_overlord_selected_conversation') || '';
        let currentRecipient = '';

        function fetchMessages(conversationWith) {
            $('#enigma-overlord-message-list').html('<div class="chat-loading active"><div class="spinner"></div><p>Loading messages...</p></div>');
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'enigma_overlord_fetch_messages',
                    conversation_with: conversationWith,
                    nonce: $('#enigma_overlord_nonce_field').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#enigma-overlord-message-list').html(response.data.html);
                        $('#unread-badge').text(response.data.unread || '');
                        const chatMessages = document.querySelector('#enigma-overlord-message-list');
                        if (chatMessages) chatMessages.scrollTop = chatMessages.scrollHeight;
                        updateTimestamps();
                    } else {
                        $('#enigma-overlord-message-list').html('<p>Error loading messages.</p>');
                        console.error('Fetch messages failed:', response.data);
                    }
                },
                error: function(xhr, status, error) {
                    $('#enigma-overlord-message-list').html('<p>Network error occurred.</p>');
                    console.error('AJAX error:', status, error);
                }
            });
        }

        function updateConversations() {
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'enigma_overlord_fetch_conversations',
                    nonce: $('#enigma_overlord_nonce_field').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#enigma-overlord-conversations').html(response.data);
                        if (selectedConversation) {
                            $(`#enigma-overlord-conversations li[data-conversation-with="${selectedConversation}"]`).addClass('active');
                        }
                    } else {
                        console.error('Failed to fetch conversations:', response.data);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX error:', status, error);
                }
            });
        }

        function updateTimestamps() {
            $('.chat-message .meta').each(function() {
                const timestamp = $(this).data('timestamp');
                $(this).text(`${$(this).text().split(' - ')[0]} - ${moment(timestamp).fromNow()}`);
            });
        }

        $(document).on('click', '#enigma-overlord-conversations li', function() {
            $('#enigma-overlord-conversations li').removeClass('active');
            $(this).addClass('active');
            selectedConversation = $(this).data('conversation-with');
            currentRecipient = selectedConversation;
            localStorage.setItem('enigma_overlord_selected_conversation', selectedConversation);
            $('#current-conversation').text($(this).text());
            $('#clear-conversation').show();
            $('#new-chat').show();
            $('#recipient-select').hide();
            fetchMessages(selectedConversation);
        });

        $('#enigma-refresh-conversations').click(function() {
            updateConversations();
        });

        $('#enigma-refresh-messages').click(function() {
            if (selectedConversation) {
                fetchMessages(selectedConversation);
            }
        });

        $('#clear-conversation').click(function() {
            selectedConversation = '';
            currentRecipient = '';
            localStorage.removeItem('enigma_overlord_selected_conversation');
            $('#current-conversation').text('Select a conversation');
            $('#clear-conversation').hide();
            $('#new-chat').show();
            $('#recipient-select').hide();
            $('#enigma-overlord-message-list').empty();
            $('#enigma-overlord-conversations li').removeClass('active');
        });

        $('#new-chat').click(function() {
            selectedConversation = '';
            currentRecipient = '';
            localStorage.removeItem('enigma_overlord_selected_conversation');
            $('#current-conversation').text('New Conversation');
            $('#clear-conversation').show();
            $('#new-chat').hide();
            $('#recipient-select').show();
            $('#enigma-overlord-message-list').empty();
            $('#enigma-overlord-conversations li').removeClass('active');
            $('#enigma-overlord-target-value').val('');
        });

        $('#enigma-overlord-send-form').submit(function(e) {
            e.preventDefault();
            const message = $('#enigma-overlord-message-input').val().trim();
            if (!message) return;

            let targetValue = $('#recipient-select').is(':visible') ? $('#enigma-overlord-target-value').val() : currentRecipient;
            if (!targetValue) {
                alert('Please select an institute admin.');
                return;
            }

            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'enigma_overlord_send_message',
                    message: message,
                    target_value: targetValue,
                    nonce: $('#enigma_overlord_nonce_field').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#enigma-overlord-message-input').val('');
                        if ($('#recipient-select').is(':visible')) {
                            currentRecipient = targetValue;
                            $('#current-conversation').text($(`#enigma-overlord-target-value option[value="${targetValue}"]`).text());
                            $('#clear-conversation').show();
                            $('#new-chat').hide();
                            $('#recipient-select').hide();
                        }
                        fetchMessages(currentRecipient);
                        setTimeout(updateConversations, 500);
                    } else {
                        alert('Failed to send message: ' + (response.data?.error || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX error:', status, error);
                    alert('Network error occurred. Please try again.');
                }
            });
        });

        updateConversations();
        if (selectedConversation) {
            $(`#enigma-overlord-conversations li[data-conversation-with="${selectedConversation}"]`).addClass('active');
            $('#current-conversation').text($(`#enigma-overlord-conversations li[data-conversation-with="${selectedConversation}"]`).text());
            $('#clear-conversation').show();
            $('#new-chat').show();
            $('#recipient-select').hide();
            fetchMessages(selectedConversation);
        }
    });
    </script>
    <?php
    return ob_get_clean();
}

// AJAX Send Message
add_action('wp_ajax_enigma_overlord_send_message', 'enigma_overlord_ajax_send_message');
function enigma_overlord_ajax_send_message() {
    check_ajax_referer('enigma_overlord_chat_nonce', 'nonce');

    $sender_id = 'enigma_overlord';
    $message = sanitize_text_field($_POST['message'] ?? '');
    $target_value = sanitize_text_field($_POST['target_value'] ?? '');

    if (!$message || !$target_value) {
        wp_send_json_error(['error' => 'Missing required fields']);
        return;
    }

    list($receiver_id, $education_center_id) = explode('|', $target_value);

    global $wpdb;
    $table = $wpdb->prefix . 'aspire_messages';

    $success = $wpdb->insert(
        $table,
        [
            'sender_id' => $sender_id,
            'receiver_id' => $receiver_id,
            'message' => $message,
            'education_center_id' => $education_center_id,
            'status' => 'sent',
            'timestamp' => current_time('mysql'),
        ],
        ['%s', '%s', '%s', '%s', '%s', '%s']
    );

    if ($success) {
        wp_send_json_success(['success' => 'Message sent!']);
    } else {
        wp_send_json_error(['error' => 'Failed to send message: ' . $wpdb->last_error]);
    }
}

// AJAX Fetch Messages
add_action('wp_ajax_enigma_overlord_fetch_messages', 'enigma_overlord_ajax_fetch_messages');
function enigma_overlord_ajax_fetch_messages() {
    ob_start();
    check_ajax_referer('enigma_overlord_chat_nonce', 'nonce');

    $conversation_with = sanitize_text_field($_POST['conversation_with'] ?? '');
    if (!$conversation_with) {
        wp_send_json_error(['error' => 'No conversation selected']);
        return;
    }

    global $wpdb;
    $table = $wpdb->prefix . 'aspire_messages';
    list($receiver_id, $education_center_id) = explode('|', $conversation_with);

    $query = "SELECT * FROM $table 
              WHERE education_center_id = %s 
              AND ((sender_id = %s AND receiver_id = %s) OR (sender_id = %s AND receiver_id = %s)) 
              ORDER BY timestamp ASC 
              LIMIT 50";
    $messages = $wpdb->get_results($wpdb->prepare(
        $query,
        $education_center_id,
        'enigma_overlord',
        $receiver_id,
        $receiver_id,
        'enigma_overlord'
    ));

    $admins = $wpdb->get_results($wpdb->prepare(
        "SELECT institute_admin_id AS id, name FROM {$wpdb->prefix}institute_admins WHERE education_center_id = %s",
        $education_center_id
    ));
    $contact_map = [];
    foreach ($admins as $admin) {
        $contact_map[$admin->id] = $admin->name;
    }

    $output = '';
    foreach ($messages as $msg) {
        $sender_name = $msg->sender_id === 'enigma_overlord' ? 'You' : ($contact_map[$msg->sender_id] ?? 'Unknown');
        $receiver_name = $msg->receiver_id === 'enigma_overlord' ? 'You' : ($contact_map[$msg->receiver_id] ?? 'Unknown');
        $initials = strtoupper(substr($sender_name === 'You' ? 'Enigma Overlord' : $sender_name, 0, 2));
        $output .= '<div class="chat-message ' . ($msg->sender_id === 'enigma_overlord' ? 'sent' : 'received') . '">';
        $output .= '<div class="bubble">';
        $output .= '<span class="avatar">' . esc_html($initials) . '</span>';
        $output .= '<p>' . esc_html($msg->message) . '</p>';
        $output .= '</div>';
        $timestamp = $msg->timestamp ?? 'N/A';
        $output .= '<div class="meta" data-timestamp="' . esc_attr($timestamp) . '">' .
                  esc_html($sender_name) . ' to ' . esc_html($receiver_name) . ' - ' . esc_html($timestamp) .
                  '</div>';
        $output .= '</div>';
    }

    $unread_count = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM $table WHERE receiver_id = %s AND sender_id = %s AND status = 'sent' AND education_center_id = %s",
        'enigma_overlord',
        $receiver_id,
        $education_center_id
    ));

    ob_end_clean();
    wp_send_json_success(['html' => $output, 'unread' => $unread_count]);
}

// AJAX Fetch Conversations
add_action('wp_ajax_enigma_overlord_fetch_conversations', 'enigma_overlord_ajax_fetch_conversations');
function enigma_overlord_ajax_fetch_conversations() {
    ob_start();
    check_ajax_referer('enigma_overlord_chat_nonce', 'nonce');

    global $wpdb;
    $table = $wpdb->prefix . 'aspire_messages';
    $admins = $wpdb->get_results("SELECT institute_admin_id AS id, name, education_center_id FROM {$wpdb->prefix}institute_admins");

    // Fetch conversations ordered by latest message
    $query = "
        SELECT DISTINCT 
            CONCAT(
                CASE 
                    WHEN sender_id = 'enigma_overlord' THEN receiver_id 
                    WHEN receiver_id = 'enigma_overlord' THEN sender_id 
                END, 
                '|', 
                education_center_id
            ) AS conversation_with,
            MAX(timestamp) AS latest_message
        FROM $table 
        WHERE (sender_id = 'enigma_overlord' OR receiver_id = 'enigma_overlord')
        AND (sender_id IN (SELECT institute_admin_id FROM {$wpdb->prefix}institute_admins) 
             OR receiver_id IN (SELECT institute_admin_id FROM {$wpdb->prefix}institute_admins))
        GROUP BY conversation_with
        ORDER BY latest_message DESC
    ";
    $active_conversations = $wpdb->get_results($query);

    $contact_map = [];
    foreach ($admins as $admin) {
        $center_id = $admin->education_center_id;
        $center = get_posts([
            'post_type' => 'educational-center',
            'meta_key' => 'educational_center_id',
            'meta_value' => $center_id,
            'posts_per_page' => 1
        ]);
        $center_name = $center ? $center[0]->post_title : 'Unknown Center';
        $contact_map["{$admin->id}|$center_id"] = "{$admin->name} ({$admin->id} - $center_name)";
    }

    $output = '';
    $has_conversations = false;
    foreach ($active_conversations as $conv) {
        $conv_with = $conv->conversation_with;
        $name = $contact_map[$conv_with] ?? 'Unknown';
        $output .= '<li class="conversation-item" data-conversation-with="' . esc_attr($conv_with) . '">' . esc_html($name) . '</li>';
        $has_conversations = true;
    }
    if (!$has_conversations) {
        $output = '<li class="conversation-item text-muted">No conversations yet.</li>';
    }

    ob_end_clean();
    wp_send_json_success($output);
}
//noticeboard
// Enqueue Scripts and Styles for Admin Dashboard
add_action('admin_enqueue_scripts', 'enigma_notice_board_enqueue_scripts');
function enigma_notice_board_enqueue_scripts($hook) {
    // Only enqueue on the specific super admin notice board page
    if ($hook !== 'toplevel_page_enigma-overlord-notice-board') {
        return;
    }
    wp_enqueue_style('bootstrap', 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');
    wp_enqueue_style('bootstrap-icons', 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css');
    wp_enqueue_script('jquery', 'https://code.jquery.com/jquery-3.6.0.min.js', [], null, true);
    wp_enqueue_script('moment', 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js', [], '2.29.1', true);
    wp_add_inline_style('bootstrap', '
        .notice-board-container { max-width: 100%; margin: 20px auto; }
        .notice-board-header { background: #17a2b8; color: white; padding: 10px; font-size: 1.5em; display: flex; justify-content: space-between; align-items: center; }
        .announcement-list { border: 1px solid #ddd; padding: 10px; max-height: 60vh; overflow-y: auto; }
        .announcement-item { border-bottom: 1px solid #eee; padding: 10px; }
        .announcement-meta { font-weight: bold; color: #555; }
        .announcement-message { margin: 5px 0; }
        .announcement-timestamp { font-size: 0.9em; color: #888; }
        .announcement-form { margin-top: 10px; }
    ');
}

// S Notice Board Page
function enigma_notice_board_page() {
    if (!current_user_can('manage_options')) {
        wp_die('You do not have permission to access this page.');
    }

    global $wpdb;
    $username = 'enigma_overlord'; // Hardcoded super admin username
    $announcements = enigma_get_announcements($username);
    $recipients = enigma_get_recipient_options();

    ob_start();
    ?>
    <div class="wrap">
        <h1> Notice Board</h1>
        <div id="enigma-notice-board" class="notice-board-container">
            <div class="notice-board-header">
                Super Admin Notice Board
                <button id="enigma-refresh-announcements" class="btn btn-outline-light btn-sm"><i class="bi bi-arrow-repeat"></i> Refresh</button>
            </div>
            <div id="announcement-list" class="announcement-list">
                <?php foreach ($announcements as $ann): ?>
                    <div class="announcement-item">
                        <div class="announcement-content">
                            <span class="announcement-meta">
                                <?php echo esc_html($ann->sender_id === $username ? 'You' : $ann->sender_id); ?> 
                                to <?php echo esc_html($recipients[$ann->receiver_id] ?? ucfirst($ann->receiver_id)); ?>
                            </span>
                            <p class="announcement-message"><?php echo esc_html($ann->message); ?></p>
                        </div>
                        <span class="announcement-timestamp" data-timestamp="<?php echo esc_attr($ann->timestamp); ?>">
                            <?php echo esc_html($ann->timestamp); ?>
                        </span>
                    </div>
                <?php endforeach; ?>
                <?php if (empty($announcements)): ?>
                    <div class="announcement-item">
                        <p class="announcement-message text-muted">No announcements yet.</p>
                    </div>
                <?php endif; ?>
            </div>
            <form id="enigma-announcement-form" class="announcement-form">
                <div class="input-group">
                    <textarea id="announcement-input" class="form-control" placeholder="Post a new announcement..." required></textarea>
                    <select id="announcement-target" class="form-select">
                        <?php foreach ($recipients as $value => $label): ?>
                            <option value="<?php echo esc_attr($value); ?>"><?php echo esc_html($label); ?></option>
                        <?php endforeach; ?>
                    </select>
                    <button type="submit" class="btn btn-primary">Post</button>
                </div>
                <?php wp_nonce_field('enigma_notice_nonce', 'enigma_notice_nonce_field'); ?>
            </form>
        </div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        function fetchAnnouncements() {
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'enigma_fetch_announcements',
                    nonce: $('#enigma_notice_nonce_field').val()
                },
                success: function(response) {
                    if (response.success) {
                        $('#announcement-list').html(response.data.html);
                        updateTimestamps();
                    } else {
                        console.log('Fetch failed: ' + (response.data ? response.data.message : 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    console.log('AJAX fetch error: ' + error);
                }
            });
        }

        function updateTimestamps() {
            $('.announcement-timestamp').each(function() {
                const timestamp = $(this).data('timestamp');
                if (typeof moment !== 'undefined') {
                    $(this).text(moment(timestamp).fromNow());
                } else {
                    console.log('Moment.js not loaded');
                }
            });
        }

        $('#enigma-announcement-form').on('submit', function(e) {
            e.preventDefault();
            var message = $('#announcement-input').val();
            var target = $('#announcement-target').val();
            var nonce = $('#enigma_notice_nonce_field').val();
            console.log('Submitting announcement: ' + message + ' to ' + target);
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                method: 'POST',
                data: {
                    action: 'enigma_send_announcement',
                    message: message,
                    target: target,
                    nonce: nonce
                },
                success: function(response) {
                    if (response.success) {
                        console.log('Announcement posted successfully');
                        $('#announcement-input').val('');
                        fetchAnnouncements();
                    } else {
                        console.log('Post failed: ' + (response.data ? response.data.message : 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    console.log('AJAX post error: ' + error);
                }
            });
        });

        $('#enigma-refresh-announcements').on('click', function() {
            fetchAnnouncements();
        });

        fetchAnnouncements();
        setInterval(fetchAnnouncements, 30000); // Auto-refresh every 30 seconds
        updateTimestamps();
    });
    </script>
    <?php
    echo ob_get_clean();
}

// Super Admin Get Announcements
function enigma_get_announcements($username) {
    global $wpdb;
    $table = $wpdb->prefix . 'aspire_announcements';

    // Super admin sees all announcements they sent or received across all centers
    $query = "
        SELECT * FROM $table 
        WHERE (sender_id = %s OR receiver_id = 'enigma_overlord') 
        ORDER BY timestamp DESC
    ";
    $prepared_query = $wpdb->prepare($query, $username);
    error_log("Super admin announcements query: $prepared_query");
    $results = $wpdb->get_results($prepared_query);
    error_log("Super admin announcements for $username: " . print_r($results, true));
    return $results;
}

// Super Admin Send Announcement
function enigma_send_announcement($sender_id, $receiver_id, $message, $edu_center_id = null) {
    global $wpdb;
    $table = $wpdb->prefix . 'aspire_announcements';
    $data = [
        'sender_id' => $sender_id,
        'receiver_id' => $receiver_id,
        'message' => sanitize_text_field($message),
        'education_center_id' => $edu_center_id, // Null for super admin unless specified
        'timestamp' => current_time('mysql')
    ];
    $result = $wpdb->insert($table, $data);
    error_log("Send announcement result for $sender_id to $receiver_id: " . ($result ? 'Success' : 'Failed - ' . $wpdb->last_error));
    return $result;
}

// Super Admin Recipient Options
function enigma_get_recipient_options() {
    return [
        
        'institute_admins' => 'All Institute Admins' // Super admin can broadcast to all admins
    ];
}

// Super Admin AJAX Handlers
add_action('wp_ajax_enigma_fetch_announcements', 'enigma_fetch_announcements');
function enigma_fetch_announcements() {
    check_ajax_referer('enigma_notice_nonce', 'nonce');
    $username = 'enigma_overlord'; // Hardcoded for super admin
    $announcements = enigma_get_announcements($username);
    $recipients = enigma_get_recipient_options();

    $output = '';
    foreach ($announcements as $ann) {
        $output .= '<div class="announcement-item">';
        $output .= '<div class="announcement-content">';
        $output .= '<span class="announcement-meta">' . esc_html($ann->sender_id === $username ? 'You' : $ann->sender_id) . ' to ';
        $output .= esc_html($recipients[$ann->receiver_id] ?? ucfirst($ann->receiver_id)) . '</span>';
        $output .= '<p class="announcement-message">' . esc_html($ann->message) . '</p>';
        $output .= '</div>';
        $output .= '<span class="announcement-timestamp" data-timestamp="' . esc_attr($ann->timestamp) . '">' . esc_html($ann->timestamp) . '</span>';
        $output .= '</div>';
    }
    if (empty($announcements)) {
        $output = '<div class="announcement-item"><p class="announcement-message text-muted">No announcements yet.</p></div>';
    }
    wp_send_json_success(['html' => $output]);
}

add_action('wp_ajax_enigma_send_announcement', 'enigma_send_announcement_handler');
function enigma_send_announcement_handler() {
    $nonce = $_POST['nonce'] ?? '';
    if (!wp_verify_nonce($nonce, 'enigma_notice_nonce')) {
        error_log("Super admin send failed: Invalid nonce - $nonce");
        wp_send_json_error(['message' => 'Invalid nonce']);
    }

    $username = 'enigma_overlord'; // Hardcoded super admin
    $message = sanitize_text_field($_POST['message'] ?? '');
    $target = sanitize_text_field($_POST['target'] ?? '');
    $valid_targets = array_keys(enigma_get_recipient_options());

    error_log("Super admin send announcement: username=$username, target=$target, message=$message, nonce=$nonce");

    if (!current_user_can('manage_options')) {
        error_log("Super admin send failed: Not authorized");
        wp_send_json_error(['message' => 'Permission denied']);
    }

    if (!in_array($target, $valid_targets)) {
        error_log("Super admin send failed: Invalid target - $target");
        wp_send_json_error(['message' => 'Invalid target']);
    }

    if (empty($message)) {
        error_log("Super admin send failed: Empty message");
        wp_send_json_error(['message' => 'Message cannot be empty']);
    }

    // If sending to all institute admins, loop through all centers
    if ($target === 'institute_admins') {
        global $wpdb;
        $admins = $wpdb->get_results("SELECT institute_admin_id AS id, education_center_id FROM {$wpdb->prefix}institute_admins");
        $success = true;
        foreach ($admins as $admin) {
            $result = enigma_send_announcement($username, $admin->id, $message, $admin->education_center_id);
            if (!$result) {
                $success = false;
            }
        }
        if ($success) {
            error_log("Super admin send success: Announcement posted to all institute admins");
            wp_send_json_success();
        } else {
            error_log("Super admin send failed: Database insert error - " . $wpdb->last_error);
            wp_send_json_error(['message' => 'Failed to post announcement to some admins']);
        }
    } else {
        $result = enigma_send_announcement($username, $target, $message, null);
        if ($result) {
            error_log("Super admin send success: Announcement posted");
            wp_send_json_success();
        } else {
            error_log("Super admin send failed: Database insert error - " . $wpdb->last_error);
            wp_send_json_error(['message' => 'Failed to post announcement']);
        }
    }
}


//fees
// Main Render Function (Dashboard with Modals)
function render_enigma_fees_management() {
    if (!current_user_can('manage_options')) {
        wp_die('You do not have permission to access this page.');
    }
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <!-- Loader SVG -->
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Fees Management</h2>
                <div class="search-filters">
                    <input type="text" id="fee-search" placeholder="Search by Student ID or Template...">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-fee-btn">Add Fee</button>
                    <button id="add-template-btn">Add Fee Template</button>
                    <label for="fees-per-page">Show:</label>
                    <select id="fees-per-page">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button id="prev-page" disabled>Previous</button>
                    <span id="page-info"></span>
                    <button id="next-page">Next</button>
                    <button id="refresh-data">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools"></div>
                    <table id="fee-table" class="wp-list-table widefat fixed striped">
                        <thead id="fee-table-head"></thead>
                        <tbody id="fee-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Fee Modal -->
    <div class="edu-modal" id="add-fee-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-fee-modal">×</span>
            <h3>Add New Fee</h3>
            <form id="add-fee-form">
                <div class="search-filters">
                    <label for="add-center-id">Educational Center</label>
                    <select id="add-center-id" name="educational_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-student-id">Student</label>
                    <select id="add-student-id" name="student_id" required>
                        <option value="">Select a Center First</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-template-id">Fee Template</label>
                    <select id="add-template-id" name="template_id" required>
                        <option value="">Select a Center First</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-month-year">Month/Year</label>
                    <input type="month" id="add-month-year" name="month_year" required>
                </div>
                <div class="search-filters">
                    <label for="add-amount">Amount</label>
                    <input type="number" id="add-amount" name="amount" step="0.01" min="0" required>
                </div>
                <div class="search-filters">
                    <label for="add-status">Status</label>
                    <select id="add-status" name="status" required>
                        <option value="pending">Pending</option>
                        <option value="paid">Paid</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_fees_nonce'); ?>">
                <button type="button" id="save-fee">Add Fee</button>
            </form>
            <div id="add-fee-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Fee Modal -->
    <div class="edu-modal" id="edit-fee-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-fee-modal">×</span>
            <h3>Edit Fee</h3>
            <form id="edit-fee-form">
                <input type="hidden" id="edit-fee-id" name="fee_id">
                <div class="search-filters">
                    <label for="edit-center-id">Educational Center</label>
                    <input type="text" id="edit-center-id" name="educational_center_id" readonly>
                </div>
                <div class="search-filters">
                    <label for="edit-student-id">Student ID</label>
                    <input type="text" id="edit-student-id" name="student_id" readonly>
                </div>
                <div class="search-filters">
                    <label for="edit-template-id">Fee Template</label>
                    <select id="edit-template-id" name="template_id" required>
                        <option value="">Select Template</option>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-month-year">Month/Year</label>
                    <input type="month" id="edit-month-year" name="month_year" required>
                </div>
                <div class="search-filters">
                    <label for="edit-amount">Amount</label>
                    <input type="number" id="edit-amount" name="amount" step="0.01" min="0" required>
                </div>
                <div class="search-filters">
                    <label for="edit-status">Status</label>
                    <select id="edit-status" name="status" required>
                        <option value="pending">Pending</option>
                        <option value="paid">Paid</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_fees_nonce'); ?>">
                <button type="button" id="update-fee">Update Fee</button>
            </form>
            <div id="edit-fee-message" class="message"></div>
        </div>
    </div>

    <!-- Add Fee Template Modal -->
    <div class="edu-modal" id="add-template-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-template-modal">×</span>
            <h3>Add Fee Template</h3>
            <form id="add-template-form">
                <div class="search-filters">
                    <label for="add-template-center-id">Educational Center</label>
                    <select id="add-template-center-id" name="educational_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-template-name">Name</label>
                    <input type="text" id="add-template-name" name="name" required>
                </div>
                <div class="search-filters">
                    <label for="add-template-amount">Amount</label>
                    <input type="number" id="add-template-amount" name="amount" step="0.01" min="0" required>
                </div>
                <div class="search-filters">
                    <label for="add-template-frequency">Frequency</label>
                    <select id="add-template-frequency" name="frequency" required>
                        <option value="monthly">Monthly</option>
                        <option value="quarterly">Quarterly</option>
                        <option value="annual">Annual</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_fees_nonce'); ?>">
                <button type="button" id="save-template">Add Template</button>
            </form>
            <div id="add-template-message" class="message"></div>
        </div>
    </div>

    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }
    function openModal(modalId) { 
        showLoader(); 
        jQuery(modalId).css('display', 'flex'); 
        setTimeout(hideLoader, 300); 
        clearMessages(modalId);
    }
    function closeModal(modalId) { 
        jQuery(modalId).css('display', 'none'); 
        clearMessages(modalId); 
        hideLoader(); 
    }
    function clearMessages(modalId) {
        jQuery(modalId + ' .message').css({'background': '', 'color': ''}).text('');
    }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        let currentPage = 1;
        let perPage = 10;
        let feeSearch = '';
        let centerFilter = '';

        $('.edu-modal-close').on('click', function() { closeModal('#' + $(this).data('modal')); });
        $(document).on('click', function(event) { if ($(event.target).hasClass('edu-modal')) closeModal('#' + event.target.id); });

        function loadFees(page, limit, search, center, showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_fees',
                    page: page,
                    per_page: limit,
                    search: search,
                    center_filter: center,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#fee-table-head').html(response.data.table_head);
                        $('#fee-table-body').html(response.data.fees);
                        const totalPages = Math.ceil(response.data.total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages} (Total Records: ${response.data.total})`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                        setupExportButtons(response.data.fee_data);
                    } else {
                        $('#fee-table-body').html('<tr><td colspan="8">No fees found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#fee-table-body').html('<tr><td colspan="8">Error loading fees: ' + error + '</td></tr>');
                }
            });
        }

        function setupExportButtons(feeData) {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
            `);
            tools.find('.export-csv').on('click', () => exportToCSV(feeData));
            tools.find('.export-pdf').on('click', () => generatePDF(feeData));
            tools.find('.export-excel').on('click', () => exportToExcel(feeData));
        }

        function exportToCSV(data) {
            const headers = ['ID', 'Student ID', 'Edu Center ID', 'Template', 'Amount', 'Month/Year', 'Status'];
            const csvRows = [headers.join(',')];
            data.forEach(row => {
                const values = [row.id, row.student_id, row.educational_center_id, row.template_name, row.amount, row.month_year, row.status].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const blob = new Blob([csvRows.join('\n')], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'fees.csv';
            link.click();
        }

        function generatePDF(data) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Fees Report', 10, 10);
            doc.setFontSize(12);
            const tableData = data.map(row => [row.id, row.student_id, row.educational_center_id, row.template_name, row.amount, row.month_year, row.status]);
            doc.autoTable({
                head: [['ID', 'Student ID', 'Edu Center ID', 'Template', 'Amount', 'Month/Year', 'Status']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('fees.pdf');
        }

        function exportToExcel(data) {
            const worksheetData = data.map(row => ({
                'ID': row.id,
                'Student ID': row.student_id,
                'Edu Center ID': row.educational_center_id,
                'Template': row.template_name,
                'Amount': row.amount,
                'Month/Year': row.month_year,
                'Status': row.status
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Fees');
            XLSX.writeFile(workbook, 'fees.xlsx');
        }

        loadFees(currentPage, perPage, feeSearch, centerFilter);

        $('#fee-search').on('input', debounce(function() {
            feeSearch = $(this).val();
            currentPage = 1;
            loadFees(currentPage, perPage, feeSearch, centerFilter);
        }, 500));

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadFees(currentPage, perPage, feeSearch, centerFilter);
        });

        $('#fees-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadFees(currentPage, perPage, feeSearch, centerFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadFees(currentPage, perPage, feeSearch, centerFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadFees(currentPage, perPage, feeSearch, centerFilter);
        });

        $('#refresh-data').on('click', function() {
            loadFees(currentPage, perPage, feeSearch, centerFilter);
        });

        $('#add-fee-btn').on('click', function() {
            $('#add-student-id, #add-template-id').html('<option value="">Select a Center First</option>');
            openModal('#add-fee-modal');
        });

        $('#add-center-id').on('change', function() {
            const centerId = $(this).val();
            if (!centerId) return;
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_get_students', center_id: centerId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) $('#add-student-id').html(response.data.options);
                },
                complete: hideLoader
            });
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_get_templates', center_id: centerId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) $('#add-template-id').html(response.data.options);
                },
                complete: hideLoader
            });
        });

        $('#save-fee').on('click', function() {
            enigma_add_fee();
        });

        $('#fee-table-body').on('click', '.edit-fee', function() {
            const feeId = $(this).data('fee-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_fee', fee_id: feeId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) {
                        $('#edit-fee-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.educational_center_id);
                        $('#edit-student-id').val(response.data.student_id);
                        $('#edit-month-year').val(response.data.month_year);
                        $('#edit-amount').val(response.data.amount);
                        $('#edit-status').val(response.data.status);
                        $.ajax({
                            url: ajaxUrl,
                            method: 'POST',
                            data: { action: 'enigma_get_templates', center_id: response.data.educational_center_id, nonce: ajaxNonce },
                            success: function(resp) {
                                if (resp.success) {
                                    $('#edit-template-id').html(resp.data.options);
                                    $('#edit-template-id').val(response.data.template_id);
                                    openModal('#edit-fee-modal');
                                }
                            },
                            complete: hideLoader
                        });
                    } else {
                        hideLoader();
                        alert('Error fetching fee: ' + response.data.message);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching fee data.');
                }
            });
        });

        $('#update-fee').on('click', function() {
            enigma_edit_fee();
        });

        $('#fee-table-body').on('click', '.delete-fee', function() {
            if (confirm('Are you sure you want to delete this fee?')) {
                enigma_delete_fee($(this).data('fee-id'));
            }
        });

        $('#add-template-btn').on('click', function() {
            openModal('#add-template-modal');
        });

        $('#save-template').on('click', function() {
            enigma_add_template();
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => { clearTimeout(timeout); func(...args); };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    });

    function enigma_add_fee() {
        const formData = new FormData(jQuery('#add-fee-form')[0]);
        formData.append('action', 'enigma_add_fee');
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideLoader();
                const $message = jQuery('#add-fee-message');
                if (response.success) {
                    $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                    setTimeout(() => {
                        closeModal('#add-fee-modal');
                        loadFees(currentPage, perPage, feeSearch, centerFilter, false);
                    }, 2000);
                } else {
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    setTimeout(() => clearMessages('#add-fee-modal'), 3000);
                }
            },
            error: function() {
                hideLoader();
                jQuery('#add-fee-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
            }
        });
    }

    function enigma_edit_fee() {
        const formData = new FormData(jQuery('#edit-fee-form')[0]);
        formData.append('action', 'enigma_edit_fee');
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideLoader();
                const $message = jQuery('#edit-fee-message');
                if (response.success) {
                    $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                    setTimeout(() => {
                        closeModal('#edit-fee-modal');
                        loadFees(currentPage, perPage, feeSearch, centerFilter, false);
                    }, 2000);
                } else {
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    setTimeout(() => clearMessages('#edit-fee-modal'), 3000);
                }
            },
            error: function() {
                hideLoader();
                jQuery('#edit-fee-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
            }
        });
    }

    function enigma_delete_fee(feeId) {
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: {
                action: 'enigma_delete_fee',
                fee_id: feeId,
                nonce: '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>'
            },
            success: function(response) {
                hideLoader();
                if (response.success) {
                    loadFees(currentPage, perPage, feeSearch, centerFilter, false);
                } else {
                    alert('Error deleting fee: ' + (response.data?.message || 'Unknown error'));
                }
            },
            error: function() {
                hideLoader();
                alert('Error: AJAX request failed.');
            }
        });
    }

    function enigma_add_template() {
        const formData = new FormData(jQuery('#add-template-form')[0]);
        formData.append('action', 'enigma_add_template');
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideLoader();
                const $message = jQuery('#add-template-message');
                if (response.success) {
                    $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                    setTimeout(() => closeModal('#add-template-modal'), 2000);
                } else {
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    setTimeout(() => clearMessages('#add-template-modal'), 3000);
                }
            },
            error: function() {
                hideLoader();
                jQuery('#add-template-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
            }
        });
    }
    </script>
    <?php
    wp_enqueue_style('enigma-fees-style', plugin_dir_url(__FILE__) . 'fees.css');
    wp_enqueue_script('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js', [], '5.15.4', true);
    wp_enqueue_script('jspdf', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js', [], '2.5.1', true);
    wp_enqueue_script('jspdf-autotable', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js', ['jspdf'], '3.5.23', true);
    wp_enqueue_script('xlsx', 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js', [], '0.18.5', true);
    return ob_get_clean();
}

// AJAX Handlers for Fees
add_action('wp_ajax_enigma_fetch_fees', 'enigma_fetch_fees');
function enigma_fetch_fees() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $search = sanitize_text_field($_POST['search'] ?? '');
    $center_filter = sanitize_text_field($_POST['center_filter'] ?? '');
    $offset = ($page - 1) * $per_page;

    $where = "WHERE 1=1";
    if ($search) {
        $where .= $wpdb->prepare(" AND (sf.student_id LIKE %s OR ft.name LIKE %s)", "%$search%", "%$search%");
    }
    if ($center_filter) {
        $where .= $wpdb->prepare(" AND sf.education_center_id = %s", $center_filter);
    }

    $fees = $wpdb->get_results(
        "SELECT sf.*, ft.name AS template_name 
         FROM {$wpdb->prefix}student_fees sf 
         LEFT JOIN {$wpdb->prefix}fee_templates ft ON sf.template_id = ft.id 
         $where ORDER BY sf.month_year DESC LIMIT $offset, $per_page",
        ARRAY_A
    );
    $total = $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}student_fees sf $where");

    $table_head = '<tr><th>ID</th><th>Student ID</th><th>Edu Center ID</th><th>Template</th><th>Amount</th><th>Month/Year</th><th>Status</th><th>Actions</th></tr>';
    $fees_html = '';
    $fee_data = [];
    foreach ($fees as $fee) {
        $fees_html .= "<tr>
            <td>" . esc_html($fee['id']) . "</td>
            <td>" . esc_html($fee['student_id']) . "</td>
            <td>" . esc_html($fee['education_center_id']) . "</td>
            <td>" . esc_html($fee['template_name'] ?? 'N/A') . "</td>
            <td>" . esc_html(number_format($fee['amount'], 2)) . "</td>
            <td>" . esc_html($fee['month_year']) . "</td>
            <td>" . esc_html($fee['status']) . "</td>
            <td>
                <button class='edit-fee' data-fee-id='" . esc_attr($fee['id']) . "'>Edit</button>
                <button class='delete-fee' data-fee-id='" . esc_attr($fee['id']) . "'>Delete</button>
            </td>
        </tr>";
        $fee_data[] = [
            'id' => $fee['id'],
            'student_id' => $fee['student_id'],
            'educational_center_id' => $fee['education_center_id'],
            'template_name' => $fee['template_name'] ?? 'N/A',
            'amount' => number_format($fee['amount'], 2),
            'month_year' => $fee['month_year'],
            'status' => $fee['status']
        ];
    }
    if (!$fees) $fees_html = '<tr><td colspan="8">No fees found.</td></tr>';

    wp_send_json_success([
        'table_head' => $table_head,
        'fees' => $fees_html,
        'fee_data' => $fee_data,
        'total' => $total ?: 0
    ]);
}

add_action('wp_ajax_enigma_fetch_fee', 'enigma_fetch_fee');
function enigma_fetch_fee() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $fee_id = intval($_POST['fee_id']);
    $fee = $wpdb->get_row($wpdb->prepare(
        "SELECT sf.*, ft.name AS template_name 
         FROM {$wpdb->prefix}student_fees sf 
         LEFT JOIN {$wpdb->prefix}fee_templates ft ON sf.template_id = ft.id 
         WHERE sf.id = %d",
        $fee_id
    ), ARRAY_A);

    if ($fee) {
        wp_send_json_success([
            'id' => $fee['id'],
            'student_id' => $fee['student_id'],
            'educational_center_id' => $fee['education_center_id'],
            'template_id' => $fee['template_id'],
            'template_name' => $fee['template_name'] ?? 'N/A',
            'amount' => number_format($fee['amount'], 2, '.', ''),
            'month_year' => $fee['month_year'],
            'status' => $fee['status']
        ]);
    } else {
        wp_send_json_error(['message' => 'Fee not found']);
    }
}

add_action('wp_ajax_enigma_add_fee', 'enigma_add_fee');
function enigma_add_fee() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $data = [
        'student_id' => sanitize_text_field($_POST['student_id']),
        'education_center_id' => sanitize_text_field($_POST['educational_center_id']),
        'template_id' => intval($_POST['template_id']),
        'amount' => floatval($_POST['amount']),
        'month_year' => sanitize_text_field($_POST['month_year']),
        'status' => sanitize_text_field($_POST['status'])
    ];

    if (empty($data['student_id']) || empty($data['education_center_id']) || empty($data['template_id'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    $result = $wpdb->insert($wpdb->prefix . 'student_fees', $data);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add fee: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Fee added successfully');
    }
}

add_action('wp_ajax_enigma_edit_fee', 'enigma_edit_fee');
function enigma_edit_fee() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $fee_id = intval($_POST['fee_id']);
    $data = [
        'template_id' => intval($_POST['template_id']),
        'amount' => floatval($_POST['amount']),
        'month_year' => sanitize_text_field($_POST['month_year']),
        'status' => sanitize_text_field($_POST['status'])
    ];

    if (empty($fee_id) || empty($data['template_id'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    $result = $wpdb->update($wpdb->prefix . 'student_fees', $data, ['id' => $fee_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update fee: ' + $wpdb->last_error]);
    } else {
        wp_send_json_success('Fee updated successfully');
    }
}

add_action('wp_ajax_enigma_delete_fee', 'enigma_delete_fee');
function enigma_delete_fee() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $fee_id = intval($_POST['fee_id']);
    if (empty($fee_id)) {
        wp_send_json_error(['message' => 'Invalid fee ID']);
        exit;
    }

    $result = $wpdb->delete($wpdb->prefix . 'student_fees', ['id' => $fee_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete fee: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Fee deleted successfully');
    }
}

// AJAX Handlers for Fee Templates
add_action('wp_ajax_enigma_fetch_templates', 'enigma_fetch_templates');
function enigma_fetch_templates() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $search = sanitize_text_field($_POST['search'] ?? '');
    $center_filter = sanitize_text_field($_POST['center_filter'] ?? '');
    $offset = ($page - 1) * $per_page;

    $where = "WHERE 1=1";
    if ($search) {
        $where .= $wpdb->prepare(" AND ft.name LIKE %s", "%$search%");
    }
    if ($center_filter) {
        $where .= $wpdb->prepare(" AND ft.education_center_id = %s", $center_filter);
    }

    $templates = $wpdb->get_results(
        "SELECT ft.* FROM {$wpdb->prefix}fee_templates ft $where ORDER BY ft.id DESC LIMIT $offset, $per_page",
        ARRAY_A
    );
    $total = $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}fee_templates ft $where");

    $table_head = '<tr><th>ID</th><th>Name</th><th>Amount</th><th>Frequency</th><th>Edu Center ID</th></tr>';
    $templates_html = '';
    $template_data = [];
    foreach ($templates as $template) {
        $templates_html .= "<tr>
            <td>" . esc_html($template['id']) . "</td>
            <td>" . esc_html($template['name']) . "</td>
            <td>" . esc_html(number_format($template['amount'], 2)) . "</td>
            <td>" . esc_html($template['frequency']) . "</td>
            <td>" . esc_html($template['education_center_id']) . "</td>
        </tr>";
        $template_data[] = [
            'id' => $template['id'],
            'name' => $template['name'],
            'amount' => number_format($template['amount'], 2),
            'frequency' => $template['frequency'],
            'education_center_id' => $template['education_center_id']
        ];
    }
    if (!$templates) $templates_html = '<tr><td colspan="5">No templates found.</td></tr>';

    wp_send_json_success([
        'table_head' => $table_head,
        'templates' => $templates_html,
        'template_data' => $template_data,
        'total' => $total ?: 0
    ]);
}

add_action('wp_ajax_enigma_fetch_template', 'enigma_fetch_template');
function enigma_fetch_template() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $template_id = intval($_POST['template_id']);
    $template = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}fee_templates WHERE id = %d",
        $template_id
    ), ARRAY_A);

    if ($template) {
        wp_send_json_success([
            'id' => $template['id'],
            'name' => $template['name'],
            'amount' => number_format($template['amount'], 2, '.', ''),
            'frequency' => $template['frequency'],
            'education_center_id' => $template['education_center_id']
        ]);
    } else {
        wp_send_json_error(['message' => 'Template not found']);
    }
}

add_action('wp_ajax_enigma_add_template', 'enigma_add_template');
function enigma_add_template() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $data = [
        'name' => sanitize_text_field($_POST['name']),
        'amount' => floatval($_POST['amount']),
        'frequency' => sanitize_text_field($_POST['frequency']),
        'education_center_id' => sanitize_text_field($_POST['educational_center_id'])
    ];

    if (empty($data['education_center_id']) || empty($data['name'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    $result = $wpdb->insert($wpdb->prefix . 'fee_templates', $data);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add template: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Template added successfully');
    }
}

add_action('wp_ajax_enigma_edit_template', 'enigma_edit_template');
function enigma_edit_template() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $template_id = intval($_POST['template_id']);
    $data = [
        'name' => sanitize_text_field($_POST['name']),
        'amount' => floatval($_POST['amount']),
        'frequency' => sanitize_text_field($_POST['frequency']),
        'education_center_id' => sanitize_text_field($_POST['educational_center_id'])
    ];

    if (empty($template_id) || empty($data['education_center_id']) || empty($data['name'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    $result = $wpdb->update($wpdb->prefix . 'fee_templates', $data, ['id' => $template_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update template: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Template updated successfully');
    }
}

add_action('wp_ajax_enigma_delete_template', 'enigma_delete_template');
function enigma_delete_template() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $template_id = intval($_POST['template_id']);
    if (empty($template_id)) {
        wp_send_json_error(['message' => 'Invalid template ID']);
        exit;
    }

    $result = $wpdb->delete($wpdb->prefix . 'fee_templates', ['id' => $template_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete template: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Template deleted successfully');
    }
}

add_action('wp_ajax_enigma_get_students', 'enigma_get_students');
function enigma_get_students() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $center_id = sanitize_text_field($_POST['center_id']);
    $students = get_posts([
        'post_type' => 'students',
        'posts_per_page' => -1,
        'meta_query' => [['key' => 'educational_center_id', 'value' => $center_id]]
    ]);

    $options = '<option value="">Select a Student</option>';
    foreach ($students as $student) {
        $student_id = get_post_meta($student->ID, 'student_id', true);
        $options .= "<option value='$student_id'>" . esc_html($student_id . ' - ' . $student->post_title) . "</option>";
    }
    wp_send_json_success(['options' => $options]);
}

add_action('wp_ajax_enigma_get_templates', 'enigma_get_templates');
function enigma_get_templates() {
    check_ajax_referer('enigma_fees_nonce', 'nonce');
    global $wpdb;
    $center_id = sanitize_text_field($_POST['center_id']);
    $templates = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}fee_templates WHERE education_center_id = %s",
        $center_id
    ));

    $options = '<option value="">Select a Template</option>';
    foreach ($templates as $template) {
        $options .= "<option value='{$template->id}'>" . esc_html($template->name . ' ($' . number_format($template->amount, 2) . ')') . "</option>";
    }
    wp_send_json_success(['options' => $options]);
}
// Standalone Functions for Fees
function render_enigma_add_fees_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Add New Fee</h2>
        <div id="add-fee-message" class="message"></div>
        <form id="standalone-add-fee-form">
            <table class="form-table">
                <tr>
                    <th><label for="add-center-id">Educational Center</label></th>
                    <td>
                        <select id="add-center-id" name="educational_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                            }
                            ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-student-id">Student</label></th>
                    <td><select id="add-student-id" name="student_id" class="regular-text" required><option value="">Select a Center First</option></select></td>
                </tr>
                <tr>
                    <th><label for="add-template-id">Fee Template</label></th>
                    <td><select id="add-template-id" name="template_id" class="regular-text" required><option value="">Select a Center First</option></select></td>
                </tr>
                <tr>
                    <th><label for="add-month-year">Month/Year</label></th>
                    <td><input type="month" id="add-month-year" name="month_year" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-amount">Amount</label></th>
                    <td><input type="number" id="add-amount" name="amount" step="0.01" min="0" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-status">Status</label></th>
                    <td>
                        <select id="add-status" name="status" class="regular-text" required>
                            <option value="pending">Pending</option>
                            <option value="paid">Paid</option>
                        </select>
                    </td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_fees_nonce'); ?>">
            <p class="submit"><button type="button" id="save-fee" class="button-primary">Add Fee</button></p>
        </form>
        <h3>Existing Fees</h3>
        <table class="wp-list-table widefat fixed striped" id="add-fee-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Template</th>
                    <th>Amount</th>
                    <th>Month/Year</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="add-fee-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        function loadFees() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_fees',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-fee-table-body').html(response.data.fees.replace(/<td>.*?(Edit|Delete).*?<\/td>/g, ''));
                    } else {
                        $('#add-fee-table-body').html('<tr><td colspan="7">No fees found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#add-fee-table-body').html('<tr><td colspan="7">Error loading fees.</td></tr>');
                }
            });
        }

        loadFees();

        $('#add-center-id').on('change', function() {
            const centerId = $(this).val();
            if (!centerId) return;
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_get_students', center_id: centerId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) $('#add-student-id').html(response.data.options);
                },
                complete: hideLoader
            });
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_get_templates', center_id: centerId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) $('#add-template-id').html(response.data.options);
                },
                complete: hideLoader
            });
        });

        $('#save-fee').on('click', function() {
            const formData = new FormData($('#standalone-add-fee-form')[0]);
            formData.append('action', 'enigma_add_fee');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-fee-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-fee-form')[0].reset();
                        loadFees();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-fees-style', plugin_dir_url(__FILE__) . 'fees.css');
    return ob_get_clean();
}

function render_enigma_edit_fees_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Edit Fees</h2>
        <div id="edit-fee-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-fee-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Template</th>
                    <th>Amount</th>
                    <th>Month/Year</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-fee-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Fee</h3>
            <form id="standalone-edit-fee-form">
                <input type="hidden" id="edit-fee-id" name="fee_id">
                <table class="form-table">
                    <tr>
                        <th><label for="edit-center-id">Educational Center</label></th>
                        <td><input type="text" id="edit-center-id" name="educational_center_id" class="regular-text" readonly></td>
                    </tr>
                    <tr>
                        <th><label for="edit-student-id">Student ID</label></th>
                        <td><input type="text" id="edit-student-id" name="student_id" class="regular-text" readonly></td>
                    </tr>
                    <tr>
                        <th><label for="edit-template-id">Fee Template</label></th>
                        <td><select id="edit-template-id" name="template_id" class="regular-text" required><option value="">Loading Templates...</option></select></td>
                    </tr>
                    <tr>
                        <th><label for="edit-month-year">Month/Year</label></th>
                        <td><input type="month" id="edit-month-year" name="month_year" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-amount">Amount</label></th>
                        <td><input type="number" id="edit-amount" name="amount" step="0.01" min="0" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-status">Status</label></th>
                        <td>
                            <select id="edit-status" name="status" class="regular-text" required>
                                <option value="pending">Pending</option>
                                <option value="paid">Paid</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_fees_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-fee" class="button-primary">Update Fee</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        function loadFees() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_fees',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-fee-table-body').html(response.data.fees);
                    } else {
                        $('#edit-fee-table-body').html('<tr><td colspan="8">No fees found.</td></tr>');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-fee-table-body').html('<tr><td colspan="8">Error loading fees: ' + error + '</td></tr>');
                }
            });
        }

        loadFees();

        $('#edit-fee-table-body').on('click', '.edit-fee', function() {
            const feeId = $(this).data('fee-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_fee', fee_id: feeId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) {
                        $('#edit-fee-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.educational_center_id);
                        $('#edit-student-id').val(response.data.student_id);
                        $('#edit-month-year').val(response.data.month_year);
                        $('#edit-amount').val(response.data.amount);
                        $('#edit-status').val(response.data.status);

                        // Fetch templates for the selected center
                        $.ajax({
                            url: ajaxUrl,
                            method: 'POST',
                            data: { 
                                action: 'enigma_get_templates', 
                                center_id: response.data.educational_center_id, 
                                nonce: ajaxNonce 
                            },
                            success: function(resp) {
                                if (resp.success && resp.data.options) {
                                    $('#edit-template-id').html(resp.data.options);
                                    $('#edit-template-id').val(response.data.template_id); // Set the current template
                                    $('#edit-form-container').show();
                                } else {
                                    $('#edit-template-id').html('<option value="">No templates available</option>');
                                    alert('No templates found for this center.');
                                }
                            },
                            error: function(xhr, status, error) {
                                $('#edit-template-id').html('<option value="">Error loading templates</option>');
                                alert('Error fetching templates: ' + error);
                            },
                            complete: function() {
                                hideLoader();
                            }
                        });
                    } else {
                        hideLoader();
                        alert('Error fetching fee: ' + (response.data?.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error fetching fee data: ' + error);
                }
            });
        });

        $('#update-fee').on('click', function() {
            const formData = new FormData($('#standalone-edit-fee-form')[0]);
            formData.append('action', 'enigma_edit_fee');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-fee-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadFees();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed - ' + error);
                }
            });
        });
    });
    </script>
    <?php
    return ob_get_clean();
}

function render_enigma_delete_fees_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Delete Fees</h2>
        <div id="delete-fee-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-fee-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Template</th>
                    <th>Amount</th>
                    <th>Month/Year</th>
                    <th>Status</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-fee-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        function loadFees() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_fees',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#delete-fee-table-body').html(response.data.fees);
                    } else {
                        $('#delete-fee-table-body').html('<tr><td colspan="8">No fees found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#delete-fee-table-body').html('<tr><td colspan="8">Error loading fees.</td></tr>');
                }
            });
        }

        loadFees();

        $('#delete-fee-table-body').on('click', '.delete-fee', function() {
            if (confirm('Are you sure you want to delete this fee?')) {
                const feeId = $(this).data('fee-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_fee', fee_id: feeId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        const $message = $('#delete-fee-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadFees();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function() {
                        hideLoader();
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                    }
                });
            }
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-fees-style', plugin_dir_url(__FILE__) . 'fees.css');
    return ob_get_clean();
}

// Standalone Functions for Fee Templates
function render_enigma_view_fee_templates_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>View Fee Templates</h2>
        <div class="search-filters">
            <label for="view-center-filter">Filter by Educational Center:</label>
            <select id="view-center-filter" class="regular-text">
                <option value="">All Centers</option>
                <?php
                foreach ($centers as $center) {
                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                    echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                }
                ?>
            </select>
        </div>
        <table class="wp-list-table widefat fixed striped" id="view-template-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Frequency</th>
                    <th>Edu Center ID</th>
                </tr>
            </thead>
            <tbody id="view-template-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        function loadTemplates(centerFilter = '') {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_templates',
                    page: 1,
                    per_page: 1000,
                    center_filter: centerFilter,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#view-template-table-body').html(response.data.templates);
                    } else {
                        $('#view-template-table-body').html('<tr><td colspan="5">No templates found.</td></tr>');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#view-template-table-body').html('<tr><td colspan="5">Error loading templates: ' + error + '</td></tr>');
                }
            });
        }

        loadTemplates();

        $('#view-center-filter').on('change', function() {
            const centerFilter = $(this).val();
            loadTemplates(centerFilter);
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-fees-style', plugin_dir_url(__FILE__) . 'fees.css');
    return ob_get_clean();
}

function render_enigma_add_fee_template_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Add New Fee Template</h2>
        <div id="add-template-message" class="message"></div>
        <form id="standalone-add-template-form">
            <table class="form-table">
                <tr>
                    <th><label for="add-template-center-id">Educational Center</label></th>
                    <td>
                        <select id="add-template-center-id" name="educational_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                            }
                            ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-template-name">Name</label></th>
                    <td><input type="text" id="add-template-name" name="name" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-template-amount">Amount</label></th>
                    <td><input type="number" id="add-template-amount" name="amount" step="0.01" min="0" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-template-frequency">Frequency</label></th>
                    <td>
                        <select id="add-template-frequency" name="frequency" class="regular-text" required>
                            <option value="monthly">Monthly</option>
                            <option value="quarterly">Quarterly</option>
                            <option value="annual">Annual</option>
                        </select>
                    </td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_fees_nonce'); ?>">
            <p class="submit"><button type="button" id="save-template" class="button-primary">Add Template</button></p>
        </form>
        <h3>Existing Fee Templates</h3>
        <table class="wp-list-table widefat fixed striped" id="add-template-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Frequency</th>
                    <th>Edu Center ID</th>
                </tr>
            </thead>
            <tbody id="add-template-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        function loadTemplates() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_templates',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-template-table-body').html(response.data.templates);
                    } else {
                        $('#add-template-table-body').html('<tr><td colspan="5">No templates found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#add-template-table-body').html('<tr><td colspan="5">Error loading templates.</td></tr>');
                }
            });
        }

        loadTemplates();

        $('#save-template').on('click', function() {
            const formData = new FormData($('#standalone-add-template-form')[0]);
            formData.append('action', 'enigma_add_template');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-template-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-template-form')[0].reset();
                        loadTemplates();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-fees-style', plugin_dir_url(__FILE__) . 'fees.css');
    return ob_get_clean();
}

function render_enigma_edit_fee_template_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Edit Fee Templates</h2>
        <div id="edit-template-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-template-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Frequency</th>
                    <th>Edu Center ID</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-template-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Fee Template</h3>
            <form id="standalone-edit-template-form">
                <input type="hidden" id="edit-template-id" name="template_id">
                <table class="form-table">
                    <tr>
                        <th><label for="edit-template-center-id">Educational Center</label></th>
                        <td>
                            <select id="edit-template-center-id" name="educational_center_id" class="regular-text" required>
                                <option value="">Select Center</option>
                                <?php
                                foreach ($centers as $center) {
                                    $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                    echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                                }
                                ?>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th><label for="edit-template-name">Name</label></th>
                        <td><input type="text" id="edit-template-name" name="name" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-template-amount">Amount</label></th>
                        <td><input type="number" id="edit-template-amount" name="amount" step="0.01" min="0" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-template-frequency">Frequency</label></th>
                        <td>
                            <select id="edit-template-frequency" name="frequency" class="regular-text" required>
                                <option value="monthly">Monthly</option>
                                <option value="quarterly">Quarterly</option>
                                <option value="annual">Annual</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_fees_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-template" class="button-primary">Update Template</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        function loadTemplates() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_templates',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        let html = '';
                        response.data.template_data.forEach(template => {
                            html += `<tr>
                                <td>${template.id}</td>
                                <td>${template.name}</td>
                                <td>${template.amount}</td>
                                <td>${template.frequency}</td>
                                <td>${template.education_center_id}</td>
                                <td><button class="edit-template" data-template-id="${template.id}">Edit</button></td>
                            </tr>`;
                        });
                        $('#edit-template-table-body').html(html);
                    } else {
                        $('#edit-template-table-body').html('<tr><td colspan="6">No templates found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#edit-template-table-body').html('<tr><td colspan="6">Error loading templates.</td></tr>');
                }
            });
        }

        loadTemplates();

        $('#edit-template-table-body').on('click', '.edit-template', function() {
            const templateId = $(this).data('template-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_template', template_id: templateId, nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-template-id').val(response.data.id);
                        $('#edit-template-center-id').val(response.data.education_center_id);
                        $('#edit-template-name').val(response.data.name);
                        $('#edit-template-amount').val(response.data.amount);
                        $('#edit-template-frequency').val(response.data.frequency);
                        $('#edit-form-container').show();
                    } else {
                        alert('Error fetching template: ' + response.data.message);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching template data.');
                }
            });
        });

        $('#update-template').on('click', function() {
            const formData = new FormData($('#standalone-edit-template-form')[0]);
            formData.append('action', 'enigma_edit_template');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-template-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadTemplates();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-fees-style', plugin_dir_url(__FILE__) . 'fees.css');
    return ob_get_clean();
}

function render_enigma_delete_fee_template_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Delete Fee Templates</h2>
        <div id="delete-template-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-template-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Frequency</th>
                    <th>Edu Center ID</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-template-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_fees_nonce'); ?>';

        function loadTemplates() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_templates',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        let html = '';
                        response.data.template_data.forEach(template => {
                            html += `<tr>
                                <td>${template.id}</td>
                                <td>${template.name}</td>
                                <td>${template.amount}</td>
                                <td>${template.frequency}</td>
                                <td>${template.education_center_id}</td>
                                <td><button class="delete-template" data-template-id="${template.id}">Delete</button></td>
                            </tr>`;
                        });
                        $('#delete-template-table-body').html(html);
                    } else {
                        $('#delete-template-table-body').html('<tr><td colspan="6">No templates found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#delete-template-table-body').html('<tr><td colspan="6">Error loading templates.</td></tr>');
                }
            });
        }

        loadTemplates();

        $('#delete-template-table-body').on('click', '.delete-template', function() {
            if (confirm('Are you sure you want to delete this template?')) {
                const templateId = $(this).data('template-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_template', template_id: templateId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        const $message = $('#delete-template-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadTemplates();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function() {
                        hideLoader();
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                    }
                });
            }
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-fees-style', plugin_dir_url(__FILE__) . 'fees.css');
    return ob_get_clean();
}

//transport
// function transport_fees_management_page() {
//     echo render_view_transport_fees();
// }

// Transport Fees AJAX Handlers
add_action('wp_ajax_enigma_fetch_transport_fees', 'enigma_fetch_transport_fees');
function enigma_fetch_transport_fees() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $fees = $wpdb->get_results("SELECT tf.*, ft.name AS template_name 
                                FROM {$wpdb->prefix}transport_fees tf 
                                LEFT JOIN {$wpdb->prefix}fee_templates ft ON tf.template_id = ft.id");
    ob_start();
    foreach ($fees as $fee) {
        ?>
        <tr>
            <td><?php echo esc_html($fee->id); ?></td>
            <td><?php echo esc_html($fee->student_id); ?></td>
            <td><?php echo esc_html($fee->education_center_id); ?></td>
            <td><?php echo esc_html($fee->template_name ?: 'N/A'); ?></td>
            <td><?php echo esc_html(number_format($fee->amount, 2)); ?></td>
            <td><?php echo esc_html($fee->month_year); ?></td>
            <td><?php echo esc_html($fee->status); ?></td>
            <td><button class="edit-fee" data-fee-id="<?php echo esc_attr($fee->id); ?>">Edit</button></td>
        </tr>
        <?php
    }
    $html = ob_get_clean();
    wp_send_json_success(['fees' => $html]);
}

add_action('wp_ajax_enigma_fetch_transport_fee', 'enigma_fetch_transport_fee');
function enigma_fetch_transport_fee() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $fee_id = intval($_POST['fee_id']);
    $fee = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}transport_fees WHERE id = %d", $fee_id));
    wp_send_json_success($fee ? (array)$fee : []);
}

add_action('wp_ajax_enigma_edit_transport_fee', 'enigma_edit_transport_fee');
function enigma_edit_transport_fee() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $data = [
        'template_id' => sanitize_text_field($_POST['template_id']),
        'amount' => floatval($_POST['amount']),
        'month_year' => sanitize_text_field($_POST['month_year']),
        'status' => sanitize_text_field($_POST['status']),
        'payment_method' => sanitize_text_field($_POST['payment_method']),
        'cheque_number' => sanitize_text_field($_POST['cheque_number'] ?: ''),
        'paid_date' => sanitize_text_field($_POST['paid_date'] ?: '')
    ];
    $updated = $wpdb->update($wpdb->prefix . 'transport_fees', $data, ['id' => intval($_POST['fee_id'])]);
    wp_send_json($updated !== false ? ['success' => true, 'data' => 'Fee updated successfully'] : ['success' => false, 'data' => ['message' => 'Failed to update fee']]);
}

add_action('wp_ajax_enigma_add_transport_fee', 'enigma_add_transport_fee');
function enigma_add_transport_fee() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $data = [
        'student_id' => sanitize_text_field($_POST['student_id']),
        'education_center_id' => sanitize_text_field($_POST['educational_center_id']),
        'template_id' => sanitize_text_field($_POST['template_id']),
        'amount' => floatval($_POST['amount']),
        'month_year' => sanitize_text_field($_POST['month_year']),
        'status' => sanitize_text_field($_POST['status']),
        'payment_method' => sanitize_text_field($_POST['payment_method']),
        'cheque_number' => sanitize_text_field($_POST['cheque_number'] ?: ''),
        'paid_date' => sanitize_text_field($_POST['paid_date'] ?: '')
    ];
    $inserted = $wpdb->insert($wpdb->prefix . 'transport_fees', $data);
    wp_send_json($inserted ? ['success' => true, 'data' => 'Fee added successfully'] : ['success' => false, 'data' => ['message' => 'Failed to add fee']]);
}

add_action('wp_ajax_enigma_delete_transport_fee', 'enigma_delete_transport_fee');
function enigma_delete_transport_fee() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $fee_id = intval($_POST['fee_id']);
    $deleted = $wpdb->delete($wpdb->prefix . 'transport_fees', ['id' => $fee_id]);
    wp_send_json($deleted ? ['success' => true, 'data' => 'Fee deleted successfully'] : ['success' => false, 'data' => ['message' => 'Failed to delete fee']]);
}

add_action('wp_ajax_enigma_get_transport_templates', 'enigma_get_transport_templates');
function enigma_get_transport_templates() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $center_id = sanitize_text_field($_POST['center_id']);
    $templates = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}fee_templates WHERE education_center_id = %s AND name LIKE 'transport_%'",
        $center_id
    ));
    $options = '<option value="">Select a Template</option>';
    foreach ($templates as $template) {
        $options .= "<option value='{$template->id}'>" . esc_html($template->name . ' ($' . number_format($template->amount, 2) . ')') . "</option>";
    }
    wp_send_json_success(['options' => $options]);
}

// Transport Enrollments AJAX Handlers
add_action('wp_ajax_enigma_fetch_transport_enrollments', 'enigma_fetch_transport_enrollments');
function enigma_fetch_transport_enrollments() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $enrollments = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}transport_enrollments");
    ob_start();
    foreach ($enrollments as $enrollment) {
        ?>
        <tr>
            <td><?php echo esc_html($enrollment->id); ?></td>
            <td><?php echo esc_html($enrollment->student_id); ?></td>
            <td><?php echo esc_html($enrollment->education_center_id); ?></td>
            <td><?php echo esc_html($enrollment->enrollment_date); ?></td>
            <td><?php echo $enrollment->active ? 'Active' : 'Inactive'; ?></td>
            <td><button class="edit-enrollment" data-enrollment-id="<?php echo esc_attr($enrollment->id); ?>">Edit</button></td>
        </tr>
        <?php
    }
    $html = ob_get_clean();
    wp_send_json_success(['enrollments' => $html]);
}

add_action('wp_ajax_enigma_fetch_transport_enrollment', 'enigma_fetch_transport_enrollment');
function enigma_fetch_transport_enrollment() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $enrollment_id = intval($_POST['enrollment_id']);
    $enrollment = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}transport_enrollments WHERE id = %d", $enrollment_id));
    wp_send_json_success($enrollment ? (array)$enrollment : []);
}

add_action('wp_ajax_enigma_edit_transport_enrollment', 'enigma_edit_transport_enrollment');
function enigma_edit_transport_enrollment() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $data = [
        'enrollment_date' => sanitize_text_field($_POST['enrollment_date']),
        'active' => intval($_POST['active'])
    ];
    $updated = $wpdb->update($wpdb->prefix . 'transport_enrollments', $data, ['id' => intval($_POST['enrollment_id'])]);
    wp_send_json($updated !== false ? ['success' => true, 'data' => 'Enrollment updated successfully'] : ['success' => false, 'data' => ['message' => 'Failed to update enrollment']]);
}

add_action('wp_ajax_enigma_add_transport_enrollment', 'enigma_add_transport_enrollment');
function enigma_add_transport_enrollment() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $data = [
        'student_id' => sanitize_text_field($_POST['student_id']),
        'education_center_id' => sanitize_text_field($_POST['educational_center_id']),
        'enrollment_date' => sanitize_text_field($_POST['enrollment_date']),
        'active' => intval($_POST['active'])
    ];
    $inserted = $wpdb->insert($wpdb->prefix . 'transport_enrollments', $data);
    wp_send_json($inserted ? ['success' => true, 'data' => 'Enrollment added successfully'] : ['success' => false, 'data' => ['message' => 'Failed to add enrollment']]);
}

add_action('wp_ajax_enigma_delete_transport_enrollment', 'enigma_delete_transport_enrollment');
function enigma_delete_transport_enrollment() {
    check_ajax_referer('enigma_transport_nonce', 'nonce');
    global $wpdb;
    $enrollment_id = intval($_POST['enrollment_id']);
    $deleted = $wpdb->delete($wpdb->prefix . 'transport_enrollments', ['id' => $enrollment_id]);
    wp_send_json($deleted ? ['success' => true, 'data' => 'Enrollment deleted successfully'] : ['success' => false, 'data' => ['message' => 'Failed to delete enrollment']]);
}

// Render Functions for Transport Fees
function render_view_transport_fees() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>View Transport Fees</h2>
        <div id="view-fee-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="view-fee-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Template</th>
                    <th>Amount</th>
                    <th>Month/Year</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="view-fee-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        function loadFees() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_transport_fees',
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#view-fee-table-body').html(response.data.fees);
                    } else {
                        $('#view-fee-table-body').html('<tr><td colspan="8">No fees found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#view-fee-table-body').html('<tr><td colspan="8">Error loading fees.</td></tr>');
                }
            });
        }

        loadFees();
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

function render_add_transport_fees() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Add Transport Fees</h2>
        <div id="add-fee-message" class="message"></div>
        <form id="standalone-add-fee-form">
            <table class="form-table">
                <tr>
                    <th><label for="add-student-id">Student ID</label></th>
                    <td><input type="text" id="add-student-id" name="student_id" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-center-id">Educational Center</label></th>
                    <td>
                        <select id="add-center-id" name="educational_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php foreach ($centers as $center) : ?>
                                <option value="<?php echo esc_attr($center->ID); ?>"><?php echo esc_html($center->post_title); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-template-id">Fee Template</label></th>
                    <td><select id="add-template-id" name="template_id" class="regular-text" required><option value="">Select Template</option></select></td>
                </tr>
                <tr>
                    <th><label for="add-month-year">Month/Year</label></th>
                    <td><input type="month" id="add-month-year" name="month_year" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-amount">Amount</label></th>
                    <td><input type="number" id="add-amount" name="amount" step="0.01" min="0" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-status">Status</label></th>
                    <td>
                        <select id="add-status" name="status" class="regular-text" required>
                            <option value="pending">Pending</option>
                            <option value="paid">Paid</option>
                            <option value="overdue">Overdue</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-payment-method">Payment Method</label></th>
                    <td>
                        <select id="add-payment-method" name="payment_method" class="regular-text">
                            <option value="">Select</option>
                            <option value="cod">COD</option>
                            <option value="cheque">Cheque</option>
                            <option value="cash">Cash</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-cheque-number">Cheque Number</label></th>
                    <td><input type="text" id="add-cheque-number" name="cheque_number" class="regular-text"></td>
                </tr>
                <tr>
                    <th><label for="add-paid-date">Paid Date</label></th>
                    <td><input type="date" id="add-paid-date" name="paid_date" class="regular-text"></td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_transport_nonce'); ?>">
            <p class="submit">
                <button type="button" id="add-fee" class="button-primary">Add Fee</button>
            </p>
        </form>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        $('#add-center-id').on('change', function() {
            const centerId = $(this).val();
            if (centerId) {
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_get_transport_templates', center_id: centerId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            $('#add-template-id').html(response.data.options);
                        } else {
                            $('#add-template-id').html('<option value="">No templates available</option>');
                        }
                    },
                    error: function() {
                        hideLoader();
                        $('#add-template-id').html('<option value="">Error loading templates</option>');
                    }
                });
            }
        });

        $('#add-fee').on('click', function() {
            const formData = new FormData($('#standalone-add-fee-form')[0]);
            formData.append('action', 'enigma_add_transport_fee');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-fee-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-fee-form')[0].reset();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

function render_edit_transport_fees() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Edit Transport Fees</h2>
        <div id="edit-fee-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-fee-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Template</th>
                    <th>Amount</th>
                    <th>Month/Year</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-fee-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Transport Fee</h3>
            <form id="standalone-edit-fee-form">
                <input type="hidden" id="edit-fee-id" name="fee_id">
                <table class="form-table">
                    <tr>
                        <th><label for="edit-student-id">Student ID</label></th>
                        <td><input type="text" id="edit-student-id" name="student_id" class="regular-text" readonly></td>
                    </tr>
                    <tr>
                        <th><label for="edit-center-id">Educational Center</label></th>
                        <td><input type="text" id="edit-center-id" name="educational_center_id" class="regular-text" readonly></td>
                    </tr>
                    <tr>
                        <th><label for="edit-template-id">Fee Template</label></th>
                        <td><select id="edit-template-id" name="template_id" class="regular-text" required><option value="">Select Template</option></select></td>
                    </tr>
                    <tr>
                        <th><label for="edit-month-year">Month/Year</label></th>
                        <td><input type="month" id="edit-month-year" name="month_year" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-amount">Amount</label></th>
                        <td><input type="number" id="edit-amount" name="amount" step="0.01" min="0" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-status">Status</label></th>
                        <td>
                            <select id="edit-status" name="status" class="regular-text" required>
                                <option value="pending">Pending</option>
                                <option value="paid">Paid</option>
                                <option value="overdue">Overdue</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th><label for="edit-payment-method">Payment Method</label></th>
                        <td>
                            <select id="edit-payment-method" name="payment_method" class="regular-text">
                                <option value="">Select</option>
                                <option value="cod">COD</option>
                                <option value="cheque">Cheque</option>
                                <option value="cash">Cash</option>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th><label for="edit-cheque-number">Cheque Number</label></th>
                        <td><input type="text" id="edit-cheque-number" name="cheque_number" class="regular-text"></td>
                    </tr>
                    <tr>
                        <th><label for="edit-paid-date">Paid Date</label></th>
                        <td><input type="date" id="edit-paid-date" name="paid_date" class="regular-text"></td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_transport_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-fee" class="button-primary">Update Fee</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        function loadFees() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_transport_fees',
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-fee-table-body').html(response.data.fees);
                    } else {
                        $('#edit-fee-table-body').html('<tr><td colspan="8">No fees found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#edit-fee-table-body').html('<tr><td colspan="8">Error loading fees.</td></tr>');
                }
            });
        }

        loadFees();

        $('#edit-fee-table-body').on('click', '.edit-fee', function() {
            const feeId = $(this).data('fee-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_transport_fee', fee_id: feeId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) {
                        $('#edit-fee-id').val(response.data.id);
                        $('#edit-student-id').val(response.data.student_id);
                        $('#edit-center-id').val(response.data.education_center_id);
                        $('#edit-month-year').val(response.data.month_year);
                        $('#edit-amount').val(response.data.amount);
                        $('#edit-status').val(response.data.status);
                        $('#edit-payment-method').val(response.data.payment_method);
                        $('#edit-cheque-number').val(response.data.cheque_number);
                        $('#edit-paid-date').val(response.data.paid_date);
                        $.ajax({
                            url: ajaxUrl,
                            method: 'POST',
                            data: { action: 'enigma_get_transport_templates', center_id: response.data.education_center_id, nonce: ajaxNonce },
                            success: function(resp) {
                                if (resp.success) {
                                    $('#edit-template-id').html(resp.data.options);
                                    $('#edit-template-id').val(response.data.template_id);
                                    $('#edit-form-container').show();
                                }
                            },
                            complete: hideLoader
                        });
                    } else {
                        hideLoader();
                        alert('Error fetching fee: ' + response.data.message);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching fee data.');
                }
            });
        });

        $('#update-fee').on('click', function() {
            const formData = new FormData($('#standalone-edit-fee-form')[0]);
            formData.append('action', 'enigma_edit_transport_fee');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-fee-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadFees();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

function render_delete_transport_fees() {
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Delete Transport Fees</h2>
        <div id="delete-fee-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-fee-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Template</th>
                    <th>Amount</th>
                    <th>Month/Year</th>
                    <th>Status</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-fee-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        function loadFees() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_transport_fees',
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#delete-fee-table-body').html(response.data.fees);
                    } else {
                        $('#delete-fee-table-body').html('<tr><td colspan="8">No fees found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#delete-fee-table-body').html('<tr><td colspan="8">Error loading fees.</td></tr>');
                }
            });
        }

        loadFees();

        $('#delete-fee-table-body').on('click', '.delete-fee', function() {
            if (confirm('Are you sure you want to delete this fee?')) {
                const feeId = $(this).data('fee-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_transport_fee', fee_id: feeId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        const $message = $('#delete-fee-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadFees();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function() {
                        hideLoader();
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                    }
                });
            }
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

// Render Functions for Transport Enrollments
function render_view_transport_enrollments() {
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>View Transport Enrollments</h2>
        <div id="view-enrollment-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="view-enrollment-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Enrollment Date</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="view-enrollment-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        function loadEnrollments() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_transport_enrollments',
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#view-enrollment-table-body').html(response.data.enrollments);
                    } else {
                        $('#view-enrollment-table-body').html('<tr><td colspan="6">No enrollments found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#view-enrollment-table-body').html('<tr><td colspan="6">Error loading enrollments.</td></tr>');
                }
            });
        }

        loadEnrollments();
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

function render_add_transport_enrollments() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Add Transport Enrollments</h2>
        <div id="add-enrollment-message" class="message"></div>
        <form id="standalone-add-enrollment-form">
            <table class="form-table">
                <tr>
                    <th><label for="add-student-id">Student ID</label></th>
                    <td><input type="text" id="add-student-id" name="student_id" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-center-id">Educational Center</label></th>
                    <td>
                        <select id="add-center-id" name="educational_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php foreach ($centers as $center) : ?>
                                <option value="<?php echo esc_attr($center->ID); ?>"><?php echo esc_html($center->post_title); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-enrollment-date">Enrollment Date</label></th>
                    <td><input type="date" id="add-enrollment-date" name="enrollment_date" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-active">Active</label></th>
                    <td><input type="checkbox" id="add-active" name="active" value="1" checked></td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_transport_nonce'); ?>">
            <p class="submit">
                <button type="button" id="add-enrollment" class="button-primary">Add Enrollment</button>
            </p>
        </form>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        $('#add-enrollment').on('click', function() {
            const formData = new FormData($('#standalone-add-enrollment-form')[0]);
            formData.append('action', 'enigma_add_transport_enrollment');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-enrollment-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-enrollment-form')[0].reset();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

function render_edit_transport_enrollments() {
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Edit Transport Enrollments</h2>
        <div id="edit-enrollment-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-enrollment-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Enrollment Date</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-enrollment-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Transport Enrollment</h3>
            <form id="standalone-edit-enrollment-form">
                <input type="hidden" id="edit-enrollment-id" name="enrollment_id">
                <table class="form-table">
                    <tr>
                        <th><label for="edit-student-id">Student ID</label></th>
                        <td><input type="text" id="edit-student-id" name="student_id" class="regular-text" readonly></td>
                    </tr>
                    <tr>
                        <th><label for="edit-center-id">Educational Center</label></th>
                        <td><input type="text" id="edit-center-id" name="educational_center_id" class="regular-text" readonly></td>
                    </tr>
                    <tr>
                        <th><label for="edit-enrollment-date">Enrollment Date</label></th>
                        <td><input type="date" id="edit-enrollment-date" name="enrollment_date" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-active">Active</label></th>
                        <td><input type="checkbox" id="edit-active" name="active" value="1"></td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_transport_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-enrollment" class="button-primary">Update Enrollment</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        function loadEnrollments() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_transport_enrollments',
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-enrollment-table-body').html(response.data.enrollments);
                    } else {
                        $('#edit-enrollment-table-body').html('<tr><td colspan="6">No enrollments found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#edit-enrollment-table-body').html('<tr><td colspan="6">Error loading enrollments.</td></tr>');
                }
            });
        }

        loadEnrollments();

        $('#edit-enrollment-table-body').on('click', '.edit-enrollment', function() {
            const enrollmentId = $(this).data('enrollment-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_transport_enrollment', enrollment_id: enrollmentId, nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-enrollment-id').val(response.data.id);
                        $('#edit-student-id').val(response.data.student_id);
                        $('#edit-center-id').val(response.data.education_center_id);
                        $('#edit-enrollment-date').val(response.data.enrollment_date);
                        $('#edit-active').prop('checked', response.data.active == 1);
                        $('#edit-form-container').show();
                    } else {
                        alert('Error fetching enrollment: ' + response.data.message);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching enrollment data.');
                }
            });
        });

        $('#update-enrollment').on('click', function() {
            const formData = new FormData($('#standalone-edit-enrollment-form')[0]);
            formData.append('action', 'enigma_edit_transport_enrollment');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-enrollment-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadEnrollments();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

function render_delete_transport_enrollments() {
    ob_start();
    ?>
    <div class="wrap">
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Delete Transport Enrollments</h2>
        <div id="delete-enrollment-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-enrollment-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Student ID</th>
                    <th>Edu Center ID</th>
                    <th>Enrollment Date</th>
                    <th>Status</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-enrollment-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_transport_nonce'); ?>';

        function loadEnrollments() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_transport_enrollments',
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#delete-enrollment-table-body').html(response.data.enrollments);
                    } else {
                        $('#delete-enrollment-table-body').html('<tr><td colspan="6">No enrollments found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#delete-enrollment-table-body').html('<tr><td colspan="6">Error loading enrollments.</td></tr>');
                }
            });
        }

        loadEnrollments();

        $('#delete-enrollment-table-body').on('click', '.delete-enrollment', function() {
            if (confirm('Are you sure you want to delete this enrollment?')) {
                const enrollmentId = $(this).data('enrollment-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_transport_enrollment', enrollment_id: enrollmentId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        const $message = $('#delete-enrollment-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadEnrollments();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function() {
                        hideLoader();
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                    }
                });
            }
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-transport-fees-style', plugin_dir_url(__FILE__) . 'transport_fees.css');
    return ob_get_clean();
}

//subscription
// Main Render Function (Dashboard with Modals)
function render_subscription_management() {
    if (!current_user_can('manage_options')) {
        wp_die('You do not have permission to access this page.');
    }
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <!-- Loader SVG -->
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Subscription Management</h2>
                <div class="search-filters">
                    <input type="text" id="subscription-search" placeholder="Search by Center ID or Plan...">
                    <select id="center-filter">
                        <option value="">All Educational Centers</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="actions">
                    <button id="add-subscription-btn">Add Subscription</button>
                    <label for="subscriptions-per-page">Show:</label>
                    <select id="subscriptions-per-page">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <button id="prev-page" disabled>Previous</button>
                    <span id="page-info"></span>
                    <button id="next-page">Next</button>
                    <button id="refresh-data">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <div class="actions" id="export-tools"></div>
                    <table id="subscription-table" class="wp-list-table widefat fixed striped">
                        <thead id="subscription-table-head"></thead>
                        <tbody id="subscription-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Subscription Modal -->
    <div class="edu-modal" id="add-subscription-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-subscription-modal">×</span>
            <h3>Add New Subscription</h3>
            <form id="add-subscription-form">
                <div class="search-filters">
                    <label for="add-new-center">Add New Center?</label>
                    <select id="add-new-center" name="new_center" onchange="toggleCenterFields(this.value)">
                        <option value="no">No, select existing</option>
                        <option value="yes">Yes, create new</option>
                    </select>
                </div>
                <div class="search-filters" id="existing_center_row">
                    <label for="add-center-id">Educational Center</label>
                    <select id="add-center-id" name="educational_center_id" required>
                        <option value="">Select Center</option>
                        <?php
                        foreach ($centers as $center) {
                            $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                            echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                        }
                        ?>
                    </select>
                </div>
                <div class="search-filters new_center_field" style="display:none;">
                    <label for="add-institute-logo">Institute Logo</label>
                    <input type="file" id="add-institute-logo" name="institute_logo">
                </div>
                <div class="search-filters new_center_field" style="display:none;">
                    <label for="add-location">Location</label>
                    <input type="text" id="add-location" name="location">
                </div>
                <div class="search-filters new_center_field" style="display:none;">
                    <label for="add-admin-id">Admin ID</label>
                    <input type="text" id="add-admin-id" name="admin_id">
                </div>
                <div class="search-filters new_center_field" style="display:none;">
                    <label for="add-mobile-number">Mobile Number</label>
                    <input type="tel" id="add-mobile-number" name="mobile_number">
                </div>
                <div class="search-filters new_center_field" style="display:none;">
                    <label for="add-email-id">Email ID</label>
                    <input type="email" id="add-email-id" name="email_id">
                </div>
                <div class="search-filters new_center_field" style="display:none;">
                    <label for="add-center-name">Center Name</label>
                    <input type="text" id="add-center-name" name="educational_center_name">
                </div>
                <div class="search-filters">
                    <label for="add-plan-type">Plan Type</label>
                    <select id="add-plan-type" name="plan_type" required>
                        <option value="">Select Plan</option>
                        <?php foreach (get_subscription_plans() as $plan) : ?>
                            <option value="<?php echo esc_attr($plan->plan_name); ?>">
                                <?php echo esc_html("{$plan->plan_name} ({$plan->plan_duration}, \${$plan->plan_price})"); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-payment-method">Payment Method</label>
                    <select id="add-payment-method" name="payment_method" required>
                        <option value="">Select Method</option>
                        <?php foreach (get_payment_methods() as $method) : ?>
                            <option value="<?php echo esc_attr($method->method_name); ?>"><?php echo esc_html($method->method_name); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="add-transaction-id">Transaction ID</label>
                    <input type="text" id="add-transaction-id" name="transaction_id" value="MANUAL-" required>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <button type="button" id="save-subscription">Add Subscription</button>
            </form>
            <div id="add-subscription-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Subscription Modal -->
    <div class="edu-modal" id="edit-subscription-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-subscription-modal">×</span>
            <h3>Edit Subscription</h3>
            <form id="edit-subscription-form">
                <input type="hidden" id="edit-subscription-id" name="subscription_id">
                <div class="search-filters">
                    <label for="edit-center-id">Educational Center</label>
                    <input type="text" id="edit-center-id" name="educational_center_id" readonly>
                </div>
                <div class="search-filters">
                    <label for="edit-plan-type">Plan Type</label>
                    <select id="edit-plan-type" name="plan_type" required>
                        <option value="">Select Plan</option>
                        <?php foreach (get_subscription_plans() as $plan) : ?>
                            <option value="<?php echo esc_attr($plan->plan_name); ?>">
                                <?php echo esc_html("{$plan->plan_name} ({$plan->plan_duration}, \${$plan->plan_price})"); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-payment-method">Payment Method</label>
                    <select id="edit-payment-method" name="payment_method" required>
                        <option value="">Select Method</option>
                        <?php foreach (get_payment_methods() as $method) : ?>
                            <option value="<?php echo esc_attr($method->method_name); ?>"><?php echo esc_html($method->method_name); ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="search-filters">
                    <label for="edit-transaction-id">Transaction ID</label>
                    <input type="text" id="edit-transaction-id" name="transaction_id" required>
                </div>
                <div class="search-filters">
                    <label for="edit-status">Status</label>
                    <select id="edit-status" name="subscription_status" required>
                        <option value="pending">Pending</option>
                        <option value="active">Active</option>
                        <option value="expired">Expired</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <button type="button" id="update-subscription">Update Subscription</button>
            </form>
            <div id="edit-subscription-message" class="message"></div>
        </div>
    </div>

    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }
    function openModal(modalId) { 
        showLoader(); 
        jQuery(modalId).css('display', 'flex'); 
        setTimeout(hideLoader, 300); 
        clearMessages(modalId);
    }
    function closeModal(modalId) { 
        jQuery(modalId).css('display', 'none'); 
        clearMessages(modalId); 
        hideLoader(); 
    }
    function clearMessages(modalId) {
        jQuery(modalId + ' .message').css({'background': '', 'color': ''}).text('');
    }
    function toggleCenterFields(value) {
        const existingRow = document.getElementById('existing_center_row');
        const newFields = document.querySelectorAll('.new_center_field');
        existingRow.style.display = value === 'no' ? '' : 'none';
        newFields.forEach(el => el.style.display = value === 'yes' ? '' : 'none');
        document.getElementById('add-center-id').required = value === 'no';
        newFields.forEach(el => el.querySelector('input').required = value === 'yes');
    }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        let currentPage = 1;
        let perPage = 10;
        let subscriptionSearch = '';
        let centerFilter = '';

        $('.edu-modal-close').on('click', function() { closeModal('#' + $(this).data('modal')); });
        $(document).on('click', function(event) { if ($(event.target).hasClass('edu-modal')) closeModal('#' + event.target.id); });

        function loadSubscriptions(page, limit, search, center, showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_subscriptions',
                    page: page,
                    per_page: limit,
                    search: search,
                    center_filter: center,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#subscription-table-head').html(response.data.table_head);
                        $('#subscription-table-body').html(response.data.subscriptions);
                        const totalPages = Math.ceil(response.data.total / limit);
                        $('#page-info').text(`Page ${page} of ${totalPages} (Total Records: ${response.data.total})`);
                        $('#prev-page').prop('disabled', page === 1);
                        $('#next-page').prop('disabled', page === totalPages);
                        setupExportButtons(response.data.subscription_data);
                    } else {
                        $('#subscription-table-body').html('<tr><td colspan="8">No subscriptions found.</td></tr>');
                        $('#export-tools').html('');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#subscription-table-body').html('<tr><td colspan="8">Error loading subscriptions: ' + error + '</td></tr>');
                }
            });
        }

        function setupExportButtons(subscriptionData) {
            const tools = $('#export-tools');
            tools.html(`
                <button class="export-btn export-csv"><i class="fas fa-file-csv"></i><span class="tooltip">Export to CSV</span></button>
                <button class="export-btn export-pdf"><i class="fas fa-file-pdf"></i><span class="tooltip">Export to PDF</span></button>
                <button class="export-btn export-excel"><i class="fas fa-file-excel"></i><span class="tooltip">Export to Excel</span></button>
            `);
            tools.find('.export-csv').on('click', () => exportToCSV(subscriptionData));
            tools.find('.export-pdf').on('click', () => generatePDF(subscriptionData));
            tools.find('.export-excel').on('click', () => exportToExcel(subscriptionData));
        }

        function exportToCSV(data) {
            const headers = ['ID', 'Center ID', 'Plan Type', 'Status', 'Start Date', 'End Date', 'Payment Method', 'Transaction ID'];
            const csvRows = [headers.join(',')];
            data.forEach(row => {
                const values = [row.id, row.educational_center_id, row.plan_type, row.subscription_status, row.subscription_start, row.subscription_end, row.payment_method, row.transaction_id].map(value => `"${value}"`);
                csvRows.push(values.join(','));
            });
            const blob = new Blob([csvRows.join('\n')], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'subscriptions.csv';
            link.click();
        }

        function generatePDF(data) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.setFontSize(16);
            doc.text('Subscriptions Report', 10, 10);
            doc.setFontSize(12);
            const tableData = data.map(row => [row.id, row.educational_center_id, row.plan_type, row.subscription_status, row.subscription_start, row.subscription_end, row.payment_method, row.transaction_id]);
            doc.autoTable({
                head: [['ID', 'Center ID', 'Plan Type', 'Status', 'Start Date', 'End Date', 'Payment Method', 'Transaction ID']],
                body: tableData,
                startY: 20,
                styles: { fontSize: 10, cellPadding: 2 },
                headStyles: { fillColor: [44, 109, 251] }
            });
            doc.save('subscriptions.pdf');
        }

        function exportToExcel(data) {
            const worksheetData = data.map(row => ({
                'ID': row.id,
                'Center ID': row.educational_center_id,
                'Plan Type': row.plan_type,
                'Status': row.subscription_status,
                'Start Date': row.subscription_start,
                'End Date': row.subscription_end,
                'Payment Method': row.payment_method,
                'Transaction ID': row.transaction_id
            }));
            const worksheet = XLSX.utils.json_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Subscriptions');
            XLSX.writeFile(workbook, 'subscriptions.xlsx');
        }

        loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter);

        $('#subscription-search').on('input', debounce(function() {
            subscriptionSearch = $(this).val();
            currentPage = 1;
            loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter);
        }, 500));

        $('#center-filter').on('change', function() {
            centerFilter = $(this).val();
            currentPage = 1;
            loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter);
        });

        $('#subscriptions-per-page').on('change', function() {
            perPage = parseInt($(this).val());
            currentPage = 1;
            loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter);
        });

        $('#next-page').on('click', function() {
            currentPage++;
            loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter);
        });

        $('#prev-page').on('click', function() {
            currentPage--;
            loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter);
        });

        $('#refresh-data').on('click', function() {
            loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter);
        });

        $('#add-subscription-btn').on('click', function() {
            openModal('#add-subscription-modal');
        });

        $('#save-subscription').on('click', function() {
            enigma_add_subscription();
        });

        $('#subscription-table-body').on('click', '.edit-subscription', function() {
            const subscriptionId = $(this).data('subscription-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription', subscription_id: subscriptionId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) {
                        $('#edit-subscription-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.educational_center_id);
                        $('#edit-plan-type').val(response.data.plan_type);
                        $('#edit-payment-method').val(response.data.payment_method);
                        $('#edit-transaction-id').val(response.data.transaction_id);
                        $('#edit-status').val(response.data.subscription_status);
                        openModal('#edit-subscription-modal');
                    } else {
                        hideLoader();
                        alert('Error fetching subscription: ' + response.data.message);
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching subscription data.');
                },
                complete: hideLoader
            });
        });

        $('#update-subscription').on('click', function() {
            enigma_edit_subscription();
        });

        $('#subscription-table-body').on('click', '.delete-subscription', function() {
            if (confirm('Are you sure you want to delete this subscription?')) {
                enigma_delete_subscription($(this).data('subscription-id'));
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => { clearTimeout(timeout); func(...args); };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    });

    function enigma_add_subscription() {
        const formData = new FormData(jQuery('#add-subscription-form')[0]);
        formData.append('action', 'enigma_add_subscription');
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideLoader();
                const $message = jQuery('#add-subscription-message');
                if (response.success) {
                    $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                    setTimeout(() => {
                        closeModal('#add-subscription-modal');
                        loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter, false);
                    }, 2000);
                } else {
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    setTimeout(() => clearMessages('#add-subscription-modal'), 3000);
                }
            },
            error: function() {
                hideLoader();
                jQuery('#add-subscription-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
            }
        });
    }

    function enigma_edit_subscription() {
        const formData = new FormData(jQuery('#edit-subscription-form')[0]);
        formData.append('action', 'enigma_edit_subscription');
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                hideLoader();
                const $message = jQuery('#edit-subscription-message');
                if (response.success) {
                    $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                    setTimeout(() => {
                        closeModal('#edit-subscription-modal');
                        loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter, false);
                    }, 2000);
                } else {
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                    setTimeout(() => clearMessages('#edit-subscription-modal'), 3000);
                }
            },
            error: function() {
                hideLoader();
                jQuery('#edit-subscription-message').css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
            }
        });
    }

    function enigma_delete_subscription(subscriptionId) {
        showLoader();
        jQuery.ajax({
            url: '<?php echo esc_js(admin_url('admin-ajax.php')); ?>',
            method: 'POST',
            data: {
                action: 'enigma_delete_subscription',
                subscription_id: subscriptionId,
                nonce: '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>'
            },
            success: function(response) {
                hideLoader();
                if (response.success) {
                    loadSubscriptions(currentPage, perPage, subscriptionSearch, centerFilter, false);
                } else {
                    alert('Error deleting subscription: ' + (response.data?.message || 'Unknown error'));
                }
            },
            error: function() {
                hideLoader();
                alert('Error: AJAX request failed.');
            }
        });
    }
    </script>
    <?php
    // wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    // wp_enqueue_script('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js', [], '5.15.4', true);
    // wp_enqueue_script('jspdf', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js', [], '2.5.1', true);
    // wp_enqueue_script('jspdf-autotable', 'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js', ['jspdf'], '3.5.23', true);
    // wp_enqueue_script('xlsx', 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js', [], '0.18.5', true);
    return ob_get_clean();
}

// AJAX Handlers for Subscriptions
add_action('wp_ajax_enigma_fetch_subscriptions', 'enigma_fetch_subscriptions');
function enigma_fetch_subscriptions() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $page = max(1, intval($_POST['page'] ?? 1));
    $per_page = intval($_POST['per_page'] ?? 10);
    $search = sanitize_text_field($_POST['search'] ?? '');
    $center_filter = sanitize_text_field($_POST['center_filter'] ?? '');
    $offset = ($page - 1) * $per_page;

    $where = "WHERE 1=1";
    if ($search) {
        $where .= $wpdb->prepare(" AND (es.educational_center_id LIKE %s OR es.plan_type LIKE %s)", "%$search%", "%$search%");
    }
    if ($center_filter) {
        $where .= $wpdb->prepare(" AND es.educational_center_id = %s", $center_filter);
    }

    $subscriptions = $wpdb->get_results(
        "SELECT es.* 
         FROM {$wpdb->prefix}edu_subscriptions es 
         $where ORDER BY es.subscription_start DESC LIMIT $offset, $per_page",
        ARRAY_A
    );
    $total = $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}edu_subscriptions es $where");

    $table_head = '<tr><th>ID</th><th>Center ID</th><th>Plan Type</th><th>Status</th><th>Start Date</th><th>End Date</th><th>Payment Method</th><th>Transaction ID</th><th>Actions</th></tr>';
    $subscriptions_html = '';
    $subscription_data = [];
    foreach ($subscriptions as $subscription) {
        $subscriptions_html .= "<tr>
            <td>" . esc_html($subscription['id']) . "</td>
            <td>" . esc_html($subscription['educational_center_id']) . "</td>
            <td>" . esc_html($subscription['plan_type']) . "</td>
            <td>" . esc_html($subscription['subscription_status']) . "</td>
            <td>" . esc_html($subscription['subscription_start'] ?: 'N/A') . "</td>
            <td>" . esc_html($subscription['subscription_end'] ?: 'N/A') . "</td>
            <td>" . esc_html($subscription['payment_method']) . "</td>
            <td>" . esc_html($subscription['transaction_id']) . "</td>
            <td>
                <button class='edit-subscription' data-subscription-id='" . esc_attr($subscription['id']) . "'>Edit</button>
                <button class='delete-subscription' data-subscription-id='" . esc_attr($subscription['id']) . "'>Delete</button>
            </td>
        </tr>";
        $subscription_data[] = [
            'id' => $subscription['id'],
            'educational_center_id' => $subscription['educational_center_id'],
            'plan_type' => $subscription['plan_type'],
            'subscription_status' => $subscription['subscription_status'],
            'subscription_start' => $subscription['subscription_start'] ?: 'N/A',
            'subscription_end' => $subscription['subscription_end'] ?: 'N/A',
            'payment_method' => $subscription['payment_method'],
            'transaction_id' => $subscription['transaction_id']
        ];
    }
    if (!$subscriptions) $subscriptions_html = '<tr><td colspan="9">No subscriptions found.</td></tr>';

    wp_send_json_success([
        'table_head' => $table_head,
        'subscriptions' => $subscriptions_html,
        'subscription_data' => $subscription_data,
        'total' => $total ?: 0
    ]);
}

add_action('wp_ajax_enigma_fetch_subscription', 'enigma_fetch_subscription');
function enigma_fetch_subscription() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $subscription_id = intval($_POST['subscription_id']);
    $subscription = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}edu_subscriptions WHERE id = %d",
        $subscription_id
    ), ARRAY_A);

    if ($subscription) {
        wp_send_json_success([
            'id' => $subscription['id'],
            'educational_center_id' => $subscription['educational_center_id'],
            'plan_type' => $subscription['plan_type'],
            'subscription_status' => $subscription['subscription_status'],
            'subscription_start' => $subscription['subscription_start'],
            'subscription_end' => $subscription['subscription_end'],
            'payment_method' => $subscription['payment_method'],
            'transaction_id' => $subscription['transaction_id']
        ]);
    } else {
        wp_send_json_error(['message' => 'Subscription not found']);
    }
}

add_action('wp_ajax_enigma_add_subscription', 'enigma_add_subscription');
function enigma_add_subscription() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;

    $new_center = sanitize_text_field($_POST['new_center']) === 'yes';
    $educational_center_id = sanitize_text_field($_POST['educational_center_id'] ?? '');

    if ($new_center) {
        $educational_center_id = get_unique_id_for_role('educational-center');
        $center_id = wp_insert_post([
            'post_title' => sanitize_text_field($_POST['educational_center_name'] ?? 'New Center'),
            'post_type' => 'educational-center',
            'post_status' => 'publish'
        ]);
        if (is_wp_error($center_id)) {
            wp_send_json_error(['message' => 'Failed to create center: ' . $center_id->get_error_message()]);
            exit;
        }
        if (!empty($_FILES['institute_logo']['name'])) {
            require_once(ABSPATH . 'wp-admin/includes/file.php');
            $uploaded = wp_handle_upload($_FILES['institute_logo'], ['test_form' => false]);
            if ($uploaded && !isset($uploaded['error'])) {
                update_post_meta($center_id, 'institute_logo', $uploaded['url']);
            }
        }
        update_post_meta($center_id, 'location', sanitize_text_field($_POST['location'] ?? ''));
        update_post_meta($center_id, 'educational_center_id', $educational_center_id);
        update_post_meta($center_id, 'admin_id', sanitize_text_field($_POST['admin_id'] ?? ''));
        update_post_meta($center_id, 'mobile_number', sanitize_text_field($_POST['mobile_number'] ?? ''));
        update_post_meta($center_id, 'email_id', sanitize_email($_POST['email_id'] ?? ''));
        update_post_meta($center_id, 'educational_center_name', sanitize_text_field($_POST['educational_center_name'] ?? ''));
    }

    $data = [
        'educational_center_id' => $educational_center_id,
        'plan_type' => sanitize_text_field($_POST['plan_type'] ?? ''),
        'payment_method' => sanitize_text_field($_POST['payment_method'] ?? ''),
        'transaction_id' => sanitize_text_field($_POST['transaction_id'] ?? '')
    ];

    if (empty($data['educational_center_id']) || empty($data['plan_type']) || empty($data['payment_method']) || empty($data['transaction_id'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    $center_exists = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM {$wpdb->postmeta} WHERE meta_key = 'educational_center_id' AND meta_value = %s",
        $educational_center_id
    ));
    if (!$center_exists) {
        wp_send_json_error(['message' => 'Invalid Educational Center ID']);
        exit;
    }
    if (is_center_subscribed($educational_center_id)) {
        wp_send_json_error(['message' => 'This center already has an active subscription']);
        exit;
    }

    $start_date = current_time('mysql');
    $duration = get_subscription_duration($data['plan_type']);
    $end_date = date('Y-m-d H:i:s', strtotime($duration, strtotime($start_date)));
    $status = in_array($data['payment_method'], ['WooCommerce', 'Razorpay']) ? 'pending' : 'active';
    $data['subscription_status'] = $status;
    $data['subscription_start'] = $status === 'active' ? $start_date : null;
    $data['subscription_end'] = $status === 'active' ? $end_date : null;

    $result = $wpdb->insert($wpdb->prefix . 'edu_subscriptions', $data);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add subscription: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Subscription added successfully');
    }
}

add_action('wp_ajax_enigma_edit_subscription', 'enigma_edit_subscription');
function enigma_edit_subscription() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $subscription_id = intval($_POST['subscription_id']);
    $data = [
        'plan_type' => sanitize_text_field($_POST['plan_type'] ?? ''),
        'payment_method' => sanitize_text_field($_POST['payment_method'] ?? ''),
        'transaction_id' => sanitize_text_field($_POST['transaction_id'] ?? ''),
        'subscription_status' => sanitize_text_field($_POST['subscription_status'] ?? '')
    ];

    if (empty($subscription_id) || empty($data['plan_type']) || empty($data['payment_method']) || empty($data['transaction_id'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }

    if ($data['subscription_status'] === 'active') {
        $start_date = current_time('mysql');
        $duration = get_subscription_duration($data['plan_type']);
        $data['subscription_start'] = $start_date;
        $data['subscription_end'] = date('Y-m-d H:i:s', strtotime($duration, strtotime($start_date)));
    } elseif ($data['subscription_status'] === 'expired') {
        $data['subscription_end'] = current_time('mysql');
    }

    $result = $wpdb->update($wpdb->prefix . 'edu_subscriptions', $data, ['id' => $subscription_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update subscription: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Subscription updated successfully');
    }
}

add_action('wp_ajax_enigma_delete_subscription', 'enigma_delete_subscription');
function enigma_delete_subscription() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $subscription_id = intval($_POST['subscription_id']);
    if (empty($subscription_id)) {
        wp_send_json_error(['message' => 'Invalid subscription ID']);
        exit;
    }

    $result = $wpdb->delete($wpdb->prefix . 'edu_subscriptions', ['id' => $subscription_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete subscription: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Subscription deleted successfully');
    }
}

// Standalone Functions for Subscriptions
function render_enigma_add_subscription_form() {
    global $wpdb;
    $centers = get_posts(['post_type' => 'educational-center', 'posts_per_page' => -1]);
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Add New Subscription</h2>
        <div id="add-subscription-message" class="message"></div>
        <form id="standalone-add-subscription-form">
            <table class="form-table">
                <tr>
                    <th><label for="add-new-center">Add New Center?</label></th>
                    <td>
                        <select id="add-new-center" name="new_center" class="regular-text" onchange="toggleCenterFields(this.value)">
                            <option value="no">No, select existing</option>
                            <option value="yes">Yes, create new</option>
                        </select>
                    </td>
                </tr>
                <tr id="existing_center_row">
                    <th><label for="add-center-id">Educational Center</label></th>
                    <td>
                        <select id="add-center-id" name="educational_center_id" class="regular-text" required>
                            <option value="">Select Center</option>
                            <?php
                            foreach ($centers as $center) {
                                $center_id = get_post_meta($center->ID, 'educational_center_id', true);
                                echo "<option value='$center_id'>" . esc_html($center->post_title) . " ($center_id)</option>";
                            }
                            ?>
                        </select>
                    </td>
                </tr>
                <tr class="new_center_field" style="display:none;">
                    <th><label for="add-institute-logo">Institute Logo</label></th>
                    <td><input type="file" id="add-institute-logo" name="institute_logo" class="regular-text"></td>
                </tr>
                <tr class="new_center_field" style="display:none;">
                    <th><label for="add-location">Location</label></th>
                    <td><input type="text" id="add-location" name="location" class="regular-text"></td>
                </tr>
                <tr class="new_center_field" style="display:none;">
                    <th><label for="add-admin-id">Admin ID</label></th>
                    <td><input type="text" id="add-admin-id" name="admin_id" class="regular-text"></td>
                </tr>
                <tr class="new_center_field" style="display:none;">
                    <th><label for="add-mobile-number">Mobile Number</label></th>
                    <td><input type="tel" id="add-mobile-number" name="mobile_number" class="regular-text"></td>
                </tr>
                <tr class="new_center_field" style="display:none;">
                    <th><label for="add-email-id">Email ID</label></th>
                    <td><input type="email" id="add-email-id" name="email_id" class="regular-text"></td>
                </tr>
                <tr class="new_center_field" style="display:none;">
                    <th><label for="add-center-name">Center Name</label></th>
                    <td><input type="text" id="add-center-name" name="educational_center_name" class="regular-text"></td>
                </tr>
                <tr>
                    <th><label for="add-plan-type">Plan Type</label></th>
                    <td>
                        <select id="add-plan-type" name="plan_type" class="regular-text" required>
                            <option value="">Select Plan</option>
                            <?php foreach (get_subscription_plans() as $plan) : ?>
                                <option value="<?php echo esc_attr($plan->plan_name); ?>">
                                    <?php echo esc_html("{$plan->plan_name} ({$plan->plan_duration}, \${$plan->plan_price})"); ?>
                                </option>
                            <?php endforeach; ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-payment-method">Payment Method</label></th>
                    <td>
                        <select id="add-payment-method" name="payment_method" class="regular-text" required>
                            <option value="">Select Method</option>
                            <?php foreach (get_payment_methods() as $method) : ?>
                                <option value="<?php echo esc_attr($method->method_name); ?>"><?php echo esc_html($method->method_name); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </td>
                </tr>
                <tr>
                    <th><label for="add-transaction-id">Transaction ID</label></th>
                    <td><input type="text" id="add-transaction-id" name="transaction_id" value="MANUAL-" class="regular-text" required></td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
            <p class="submit"><button type="button" id="save-subscription" class="button-primary">Add Subscription</button></p>
        </form>
        <h3>Existing Subscriptions</h3>
        <table class="wp-list-table widefat fixed striped" id="add-subscription-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Center ID</th>
                    <th>Plan Type</th>
                    <th>Status</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Payment Method</th>
                    <th>Transaction ID</th>
                </tr>
            </thead>
            <tbody id="add-subscription-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }
    function toggleCenterFields(value) {
        const existingRow = document.getElementById('existing_center_row');
        const newFields = document.querySelectorAll('.new_center_field');
        existingRow.style.display = value === 'no' ? '' : 'none';
        newFields.forEach(el => el.style.display = value === 'yes' ? '' : 'none');
        document.getElementById('add-center-id').required = value === 'no';
        newFields.forEach(el => el.querySelector('input').required = value === 'yes');
    }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadSubscriptions() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_subscriptions',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-subscription-table-body').html(response.data.subscriptions.replace(/<td>.*?(Edit|Delete).*?<\/td>/g, ''));
                    } else {
                        $('#add-subscription-table-body').html('<tr><td colspan="8">No subscriptions found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#add-subscription-table-body').html('<tr><td colspan="8">Error loading subscriptions.</td></tr>');
                }
            });
        }

        loadSubscriptions();

        $('#save-subscription').on('click', function() {
            const formData = new FormData($('#standalone-add-subscription-form')[0]);
            formData.append('action', 'enigma_add_subscription');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-subscription-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-subscription-form')[0].reset();
                        loadSubscriptions();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    // wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

function render_enigma_edit_subscription_form() {
    global $wpdb;
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Edit Subscriptions</h2>
        <div id="edit-subscription-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-subscription-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Center ID</th>
                    <th>Plan Type</th>
                    <th>Status</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Payment Method</th>
                    <th>Transaction ID</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-subscription-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Subscription</h3>
            <form id="standalone-edit-subscription-form">
                <input type="hidden" id="edit-subscription-id" name="subscription_id">
                <table class="form-table">
                    <tr>
                        <th><label for="edit-center-id">Educational Center</label></th>
                        <td><input type="text" id="edit-center-id" name="educational_center_id" class="regular-text" readonly></td>
                    </tr>
                    <tr>
                        <th><label for="edit-plan-type">Plan Type</label></th>
                        <td>
                            <select id="edit-plan-type" name="plan_type" class="regular-text" required>
                                <option value="">Select Plan</option>
                                <?php foreach (get_subscription_plans() as $plan) : ?>
                                    <option value="<?php echo esc_attr($plan->plan_name); ?>">
                                        <?php echo esc_html("{$plan->plan_name} ({$plan->plan_duration}, \${$plan->plan_price})"); ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th><label for="edit-payment-method">Payment Method</label></th>
                        <td>
                            <select id="edit-payment-method" name="payment_method" class="regular-text" required>
                                <option value="">Select Method</option>
                                <?php foreach (get_payment_methods() as $method) : ?>
                                    <option value="<?php echo esc_attr($method->method_name); ?>"><?php echo esc_html($method->method_name); ?></option>
                                <?php endforeach; ?>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <th><label for="edit-transaction-id">Transaction ID</label></th>
                        <td><input type="text" id="edit-transaction-id" name="transaction_id" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-status">Status</label></th>
                        <td>
                            <select id="edit-status" name="subscription_status" class="regular-text" required>
                                <option value="pending">Pending</option>
                                <option value="active">Active</option>
                                <option value="expired">Expired</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-subscription" class="button-primary">Update Subscription</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadSubscriptions() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_subscriptions',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-subscription-table-body').html(response.data.subscriptions);
                    } else {
                        $('#edit-subscription-table-body').html('<tr><td colspan="9">No subscriptions found.</td></tr>');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $('#edit-subscription-table-body').html('<tr><td colspan="9">Error loading subscriptions: ' + error + '</td></tr>');
                }
            });
        }

        loadSubscriptions();

        $('#edit-subscription-table-body').on('click', '.edit-subscription', function() {
            const subscriptionId = $(this).data('subscription-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription', subscription_id: subscriptionId, nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-subscription-id').val(response.data.id);
                        $('#edit-center-id').val(response.data.educational_center_id);
                        $('#edit-plan-type').val(response.data.plan_type);
                        $('#edit-payment-method').val(response.data.payment_method);
                        $('#edit-transaction-id').val(response.data.transaction_id);
                        $('#edit-status').val(response.data.subscription_status);
                        $('#edit-form-container').show();
                    } else {
                        alert('Error fetching subscription: ' + (response.data?.message || 'Unknown error'));
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    alert('Error fetching subscription data: ' + error);
                }
            });
        });

        $('#update-subscription').on('click', function() {
            const formData = new FormData($('#standalone-edit-subscription-form')[0]);
            formData.append('action', 'enigma_edit_subscription');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-subscription-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadSubscriptions();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed - ' + error);
                }
            });
        });
    });
    </script>
    <?php
    // wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

function render_enigma_delete_subscription_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Delete Subscriptions</h2>
        <div id="delete-subscription-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-subscription-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Center ID</th>
                    <th>Plan Type</th>
                    <th>Status</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Payment Method</th>
                    <th>Transaction ID</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-subscription-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadSubscriptions() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: {
                    action: 'enigma_fetch_subscriptions',
                    page: 1,
                    per_page: 1000,
                    nonce: ajaxNonce
                },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#delete-subscription-table-body').html(response.data.subscriptions);
                    } else {
                        $('#delete-subscription-table-body').html('<tr><td colspan="9">No subscriptions found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#delete-subscription-table-body').html('<tr><td colspan="9">Error loading subscriptions.</td></tr>');
                }
            });
        }

        loadSubscriptions();

        $('#delete-subscription-table-body').on('click', '.delete-subscription', function() {
            if (confirm('Are you sure you want to delete this subscription?')) {
                const subscriptionId = $(this).data('subscription-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_subscription', subscription_id: subscriptionId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        const $message = $('#delete-subscription-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadSubscriptions();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function() {
                        hideLoader();
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                    }
                });
            }
        });
    });
    </script>
    <?php
    // wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}
//
function render_payment_methods_page() {
    if (!current_user_can('manage_options')) {
        wp_die('You do not have permission to access this page.');
    }
    global $wpdb;
    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <!-- Loader SVG -->
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Payment Methods Management</h2>
                <div class="actions">
                    <button id="add-payment-method-btn">Add Payment Method</button>
                    <button id="refresh-payment-methods">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <table id="payment-methods-table" class="wp-list-table widefat fixed striped">
                        <thead id="payment-methods-table-head"></thead>
                        <tbody id="payment-methods-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Payment Method Modal -->
    <div class="edu-modal" id="add-payment-method-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-payment-method-modal">×</span>
            <h3>Add New Payment Method</h3>
            <form id="add-payment-method-form">
                <div class="search-filters">
                    <label for="add-method-name">Method Name</label>
                    <input type="text" id="add-method-name" name="method_name" required>
                </div>
                <div class="search-filters">
                    <label for="add-method-status">Status</label>
                    <select id="add-method-status" name="is_active" required>
                        <option value="1">Active</option>
                        <option value="0">Inactive</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <button type="button" id="save-payment-method">Add Payment Method</button>
            </form>
            <div id="add-payment-method-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Payment Method Modal -->
    <div class="edu-modal" id="edit-payment-method-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-payment-method-modal">×</span>
            <h3>Edit Payment Method</h3>
            <form id="edit-payment-method-form">
                <input type="hidden" id="edit-method-id" name="method_id">
                <div class="search-filters">
                    <label for="edit-method-name">Method Name</label>
                    <input type="text" id="edit-method-name" name="method_name" required>
                </div>
                <div class="search-filters">
                    <label for="edit-method-status">Status</label>
                    <select id="edit-method-status" name="is_active" required>
                        <option value="1">Active</option>
                        <option value="0">Inactive</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <button type="button" id="update-payment-method">Update Payment Method</button>
            </form>
            <div id="edit-payment-method-message" class="message"></div>
        </div>
    </div>

    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }
    function openModal(modalId) { 
        showLoader(); 
        jQuery(modalId).css('display', 'flex'); 
        setTimeout(hideLoader, 300); 
        clearMessages(modalId);
    }
    function closeModal(modalId) { 
        jQuery(modalId).css('display', 'none'); 
        clearMessages(modalId); 
        hideLoader(); 
    }
    function clearMessages(modalId) {
        jQuery(modalId + ' .message').css({'background': '', 'color': ''}).text('');
    }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadPaymentMethods(showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_payment_methods', nonce: ajaxNonce },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#payment-methods-table-head').html('<tr><th>ID</th><th>Method Name</th><th>Status</th><th>Actions</th></tr>');
                        $('#payment-methods-table-body').html(response.data.methods);
                    } else {
                        $('#payment-methods-table-body').html('<tr><td colspan="4">No payment methods found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#payment-methods-table-body').html('<tr><td colspan="4">Error loading payment methods.</td></tr>');
                }
            });
        }

        loadPaymentMethods();

        $('.edu-modal-close').on('click', function() { closeModal('#' + $(this).data('modal')); });
        $(document).on('click', function(event) { if ($(event.target).hasClass('edu-modal')) closeModal('#' + event.target.id); });

        $('#add-payment-method-btn').on('click', function() {
            openModal('#add-payment-method-modal');
        });

        $('#save-payment-method').on('click', function() {
            const formData = new FormData($('#add-payment-method-form')[0]);
            formData.append('action', 'enigma_add_payment_method');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-payment-method-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#add-payment-method-form')[0].reset();
                        setTimeout(() => {
                            closeModal('#add-payment-method-modal');
                            loadPaymentMethods(false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#add-payment-method-modal'), 3000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });

        $('#payment-methods-table-body').on('click', '.edit-payment-method', function() {
            const methodId = $(this).data('method-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_payment_method', method_id: methodId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) {
                        $('#edit-method-id').val(response.data.id);
                        $('#edit-method-name').val(response.data.method_name);
                        $('#edit-method-status').val(response.data.is_active);
                        openModal('#edit-payment-method-modal');
                    } else {
                        hideLoader();
                        alert('Error fetching payment method: ' + (response.data?.message || 'Unknown error'));
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching payment method data.');
                }
            });
        });

        $('#update-payment-method').on('click', function() {
            const formData = new FormData($('#edit-payment-method-form')[0]);
            formData.append('action', 'enigma_edit_payment_method');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-payment-method-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#edit-payment-method-modal');
                            loadPaymentMethods(false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#edit-payment-method-modal'), 3000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });

        $('#payment-methods-table-body').on('click', '.delete-payment-method', function() {
            if (confirm('Are you sure you want to delete this payment method?')) {
                const methodId = $(this).data('method-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_payment_method', method_id: methodId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            loadPaymentMethods(false);
                        } else {
                            alert('Error deleting payment method: ' + (response.data?.message || 'Unknown error'));
                        }
                    },
                    error: function() {
                        hideLoader();
                        alert('Error: AJAX request failed.');
                    }
                });
            }
        });

        $('#refresh-payment-methods').on('click', function() {
            loadPaymentMethods();
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

// Standalone Functions for Payment Methods
function render_enigma_add_payment_method_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Add New Payment Method</h2>
        <div id="add-payment-method-message" class="message"></div>
        <form id="standalone-add-payment-method-form">
            <table class="form-table">
                <tr>
                    <th><label for="add-method-name">Method Name</label></th>
                    <td><input type="text" id="add-method-name" name="method_name" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-method-status">Status</label></th>
                    <td>
                        <select id="add-method-status" name="is_active" class="regular-text" required>
                            <option value="1">Active</option>
                            <option value="0">Inactive</option>
                        </select>
                    </td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
            <p class="submit"><button type="button" id="save-payment-method" class="button-primary">Add Payment Method</button></p>
        </form>
        <h3>Existing Payment Methods</h3>
        <table class="wp-list-table widefat fixed striped" id="add-payment-methods-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Method Name</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="add-payment-methods-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadPaymentMethods() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_payment_methods', nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-payment-methods-table-body').html(response.data.methods.replace(/<td>.*?(Edit|Delete).*?<\/td>/g, ''));
                    } else {
                        $('#add-payment-methods-table-body').html('<tr><td colspan="3">No payment methods found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#add-payment-methods-table-body').html('<tr><td colspan="3">Error loading payment methods.</td></tr>');
                }
            });
        }

        loadPaymentMethods();

        $('#save-payment-method').on('click', function() {
            const formData = new FormData($('#standalone-add-payment-method-form')[0]);
            formData.append('action', 'enigma_add_payment_method');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-payment-method-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-payment-method-form')[0].reset();
                        loadPaymentMethods();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

function render_enigma_edit_payment_method_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Edit Payment Methods</h2>
        <div id="edit-payment-method-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-payment-methods-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Method Name</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-payment-methods-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Payment Method</h3>
            <form id="standalone-edit-payment-method-form">
                <input type="hidden" id="edit-method-id" name="method_id">
                <table class="form-table">
                    <tr>
                        <th><label for="edit-method-name">Method Name</label></th>
                        <td><input type="text" id="edit-method-name" name="method_name" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-method-status">Status</label></th>
                        <td>
                            <select id="edit-method-status" name="is_active" class="regular-text" required>
                                <option value="1">Active</option>
                                <option value="0">Inactive</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-payment-method" class="button-primary">Update Payment Method</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadPaymentMethods() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_payment_methods', nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-payment-methods-table-body').html(response.data.methods);
                    } else {
                        $('#edit-payment-methods-table-body').html('<tr><td colspan="4">No payment methods found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#edit-payment-methods-table-body').html('<tr><td colspan="4">Error loading payment methods.</td></tr>');
                }
            });
        }

        loadPaymentMethods();

        $('#edit-payment-methods-table-body').on('click', '.edit-payment-method', function() {
            const methodId = $(this).data('method-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_payment_method', method_id: methodId, nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-method-id').val(response.data.id);
                        $('#edit-method-name').val(response.data.method_name);
                        $('#edit-method-status').val(response.data.is_active);
                        $('#edit-form-container').show();
                    } else {
                        alert('Error fetching payment method: ' + (response.data?.message || 'Unknown error'));
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching payment method data.');
                }
            });
        });

        $('#update-payment-method').on('click', function() {
            const formData = new FormData($('#standalone-edit-payment-method-form')[0]);
            formData.append('action', 'enigma_edit_payment_method');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-payment-method-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadPaymentMethods();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

function render_enigma_delete_payment_method_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Delete Payment Methods</h2>
        <div id="delete-payment-method-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-payment-methods-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Method Name</th>
                    <th>Status</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-payment-methods-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadPaymentMethods() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_payment_methods', nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#delete-payment-methods-table-body').html(response.data.methods);
                    } else {
                        $('#delete-payment-methods-table-body').html('<tr><td colspan="4">No payment methods found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#delete-payment-methods-table-body').html('<tr><td colspan="4">Error loading payment methods.</td></tr>');
                }
            });
        }

        loadPaymentMethods();

        $('#delete-payment-methods-table-body').on('click', '.delete-payment-method', function() {
            if (confirm('Are you sure you want to delete this payment method?')) {
                const methodId = $(this).data('method-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_payment_method', method_id: methodId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        const $message = $('#delete-payment-method-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadPaymentMethods();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function() {
                        hideLoader();
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                    }
                });
            }
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

// AJAX Handlers for Payment Methods (unchanged from previous)
add_action('wp_ajax_enigma_fetch_payment_methods', 'enigma_fetch_payment_methods');
function enigma_fetch_payment_methods() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $methods = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}edu_payment_methods ORDER BY id DESC", ARRAY_A);
    $methods_html = '';
    foreach ($methods as $method) {
        $status = $method['is_active'] ? 'Active' : 'Inactive';
        $methods_html .= "<tr>
            <td>" . esc_html($method['id']) . "</td>
            <td>" . esc_html($method['method_name']) . "</td>
            <td>" . esc_html($status) . "</td>
            <td>
                <button class='edit-payment-method' data-method-id='" . esc_attr($method['id']) . "'>Edit</button>
                <button class='delete-payment-method' data-method-id='" . esc_attr($method['id']) . "'>Delete</button>
            </td>
        </tr>";
    }
    if (!$methods) $methods_html = '<tr><td colspan="4">No payment methods found.</td></tr>';
    wp_send_json_success(['methods' => $methods_html]);
}

add_action('wp_ajax_enigma_fetch_payment_method', 'enigma_fetch_payment_method');
function enigma_fetch_payment_method() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $method_id = intval($_POST['method_id']);
    $method = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}edu_payment_methods WHERE id = %d",
        $method_id
    ), ARRAY_A);
    if ($method) {
        wp_send_json_success($method);
    } else {
        wp_send_json_error(['message' => 'Payment method not found']);
    }
}

add_action('wp_ajax_enigma_add_payment_method', 'enigma_add_payment_method');
function enigma_add_payment_method() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $data = [
        'method_name' => sanitize_text_field($_POST['method_name']),
        'is_active' => intval($_POST['is_active'])
    ];
    if (empty($data['method_name'])) {
        wp_send_json_error(['message' => 'Method name is required']);
        exit;
    }
    $result = $wpdb->insert($wpdb->prefix . 'edu_payment_methods', $data);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add payment method: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Payment method added successfully');
    }
}

add_action('wp_ajax_enigma_edit_payment_method', 'enigma_edit_payment_method');
function enigma_edit_payment_method() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $method_id = intval($_POST['method_id']);
    $data = [
        'method_name' => sanitize_text_field($_POST['method_name']),
        'is_active' => intval($_POST['is_active'])
    ];
    if (empty($method_id) || empty($data['method_name'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }
    $result = $wpdb->update($wpdb->prefix . 'edu_payment_methods', $data, ['id' => $method_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update payment method: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Payment method updated successfully');
    }
}

add_action('wp_ajax_enigma_delete_payment_method', 'enigma_delete_payment_method');
function enigma_delete_payment_method() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $method_id = intval($_POST['method_id']);
    if (empty($method_id)) {
        wp_send_json_error(['message' => 'Invalid payment method ID']);
        exit;
    }
    $result = $wpdb->delete($wpdb->prefix . 'edu_payment_methods', ['id' => $method_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete payment method: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Payment method deleted successfully');
    }
}
//
function render_subscription_plans_page() {
    if (!current_user_can('manage_options')) {
        wp_die('You do not have permission to access this page.');
    }
    global $wpdb;
    ob_start();
    ?>
    <div class="management-main-wrapper">
        <div class="management-content-wrapper">
            <!-- Loader SVG -->
            <div id="edu-loader" class="edu-loader" style="display: none;">
                <div class="edu-loader-container">
                    <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
                </div>
            </div>
            <div class="management-section">
                <h2>Subscription Plans Management</h2>
                <div class="actions">
                    <button id="add-subscription-plan-btn">Add Subscription Plan</button>
                    <button id="refresh-subscription-plans">Refresh</button>
                </div>
                <div class="management-table-wrapper">
                    <table id="subscription-plans-table" class="wp-list-table widefat fixed striped">
                        <thead id="subscription-plans-table-head"></thead>
                        <tbody id="subscription-plans-table-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Subscription Plan Modal -->
    <div class="edu-modal" id="add-subscription-plan-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="add-subscription-plan-modal">×</span>
            <h3>Add New Subscription Plan</h3>
            <form id="add-subscription-plan-form">
                <div class="search-filters">
                    <label for="add-plan-name">Plan Name</label>
                    <input type="text" id="add-plan-name" name="plan_name" required>
                </div>
                <div class="search-filters">
                    <label for="add-plan-duration">Duration</label>
                    <input type="text" id="add-plan-duration" name="plan_duration" placeholder="e.g., +1 month" required>
                </div>
                <div class="search-filters">
                    <label for="add-plan-price">Price ($)</label>
                    <input type="number" id="add-plan-price" name="plan_price" step="0.01" required>
                </div>
                <div class="search-filters">
                    <label for="add-plan-status">Status</label>
                    <select id="add-plan-status" name="is_active" required>
                        <option value="1">Active</option>
                        <option value="0">Inactive</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <button type="button" id="save-subscription-plan">Add Subscription Plan</button>
            </form>
            <div id="add-subscription-plan-message" class="message"></div>
        </div>
    </div>

    <!-- Edit Subscription Plan Modal -->
    <div class="edu-modal" id="edit-subscription-plan-modal" style="display: none;">
        <div class="edu-modal-content">
            <span class="edu-modal-close" data-modal="edit-subscription-plan-modal">×</span>
            <h3>Edit Subscription Plan</h3>
            <form id="edit-subscription-plan-form">
                <input type="hidden" id="edit-plan-id" name="plan_id">
                <div class="search-filters">
                    <label for="edit-plan-name">Plan Name</label>
                    <input type="text" id="edit-plan-name" name="plan_name" required>
                </div>
                <div class="search-filters">
                    <label for="edit-plan-duration">Duration</label>
                    <input type="text" id="edit-plan-duration" name="plan_duration" placeholder="e.g., +1 month" required>
                </div>
                <div class="search-filters">
                    <label for="edit-plan-price">Price ($)</label>
                    <input type="number" id="edit-plan-price" name="plan_price" step="0.01" required>
                </div>
                <div class="search-filters">
                    <label for="edit-plan-status">Status</label>
                    <select id="edit-plan-status" name="is_active" required>
                        <option value="1">Active</option>
                        <option value="0">Inactive</option>
                    </select>
                </div>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <button type="button" id="update-subscription-plan">Update Subscription Plan</button>
            </form>
            <div id="edit-subscription-plan-message" class="message"></div>
        </div>
    </div>

    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }
    function openModal(modalId) { 
        showLoader(); 
        jQuery(modalId).css('display', 'flex'); 
        setTimeout(hideLoader, 300); 
        clearMessages(modalId);
    }
    function closeModal(modalId) { 
        jQuery(modalId).css('display', 'none'); 
        clearMessages(modalId); 
        hideLoader(); 
    }
    function clearMessages(modalId) {
        jQuery(modalId + ' .message').css({'background': '', 'color': ''}).text('');
    }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadSubscriptionPlans(showLoading = true) {
            if (showLoading) showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription_plans', nonce: ajaxNonce },
                success: function(response) {
                    if (showLoading) hideLoader();
                    if (response.success) {
                        $('#subscription-plans-table-head').html('<tr><th>ID</th><th>Plan Name</th><th>Duration</th><th>Price</th><th>Status</th><th>Actions</th></tr>');
                        $('#subscription-plans-table-body').html(response.data.plans);
                    } else {
                        $('#subscription-plans-table-body').html('<tr><td colspan="6">No subscription plans found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#subscription-plans-table-body').html('<tr><td colspan="6">Error loading subscription plans.</td></tr>');
                }
            });
        }

        loadSubscriptionPlans();

        $('.edu-modal-close').on('click', function() { closeModal('#' + $(this).data('modal')); });
        $(document).on('click', function(event) { if ($(event.target).hasClass('edu-modal')) closeModal('#' + event.target.id); });

        $('#add-subscription-plan-btn').on('click', function() {
            openModal('#add-subscription-plan-modal');
        });

        $('#save-subscription-plan').on('click', function() {
            const formData = new FormData($('#add-subscription-plan-form')[0]);
            formData.append('action', 'enigma_add_subscription_plan');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-subscription-plan-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#add-subscription-plan-form')[0].reset();
                        setTimeout(() => {
                            closeModal('#add-subscription-plan-modal');
                            loadSubscriptionPlans(false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#add-subscription-plan-modal'), 3000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });

        $('#subscription-plans-table-body').on('click', '.edit-subscription-plan', function() {
            const planId = $(this).data('plan-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription_plan', plan_id: planId, nonce: ajaxNonce },
                success: function(response) {
                    if (response.success) {
                        $('#edit-plan-id').val(response.data.id);
                        $('#edit-plan-name').val(response.data.plan_name);
                        $('#edit-plan-duration').val(response.data.plan_duration);
                        $('#edit-plan-price').val(response.data.plan_price);
                        $('#edit-plan-status').val(response.data.is_active);
                        openModal('#edit-subscription-plan-modal');
                    } else {
                        hideLoader();
                        alert('Error fetching subscription plan: ' + (response.data?.message || 'Unknown error'));
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching subscription plan data.');
                }
            });
        });

        $('#update-subscription-plan').on('click', function() {
            const formData = new FormData($('#edit-subscription-plan-form')[0]);
            formData.append('action', 'enigma_edit_subscription_plan');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-subscription-plan-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        setTimeout(() => {
                            closeModal('#edit-subscription-plan-modal');
                            loadSubscriptionPlans(false);
                        }, 2000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => clearMessages('#edit-subscription-plan-modal'), 3000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });

        $('#subscription-plans-table-body').on('click', '.delete-subscription-plan', function() {
            if (confirm('Are you sure you want to delete this subscription plan?')) {
                const planId = $(this).data('plan-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_subscription_plan', plan_id: planId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        if (response.success) {
                            loadSubscriptionPlans(false);
                        } else {
                            alert('Error deleting subscription plan: ' + (response.data?.message || 'Unknown error'));
                        }
                    },
                    error: function() {
                        hideLoader();
                        alert('Error: AJAX request failed.');
                    }
                });
            }
        });

        $('#refresh-subscription-plans').on('click', function() {
            loadSubscriptionPlans();
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

// Standalone Functions for Subscription Plans
function render_enigma_add_subscription_plan_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Add New Subscription Plan</h2>
        <div id="add-subscription-plan-message" class="message"></div>
        <form id="standalone-add-subscription-plan-form">
            <table class="form-table">
                <tr>
                    <th><label for="add-plan-name">Plan Name</label></th>
                    <td><input type="text" id="add-plan-name" name="plan_name" class="regular-text" required></td>
                </tr>
                <tr>
                    <th><label for="add-plan-duration">Duration</label></th>
                    <td><input type="text" id="add-plan-duration" name="plan_duration" class="regular-text" placeholder="e.g., +1 month" required></td>
                </tr>
                <tr>
                    <th><label for="add-plan-price">Price ($)</label></th>
                    <td><input type="number" id="add-plan-price" name="plan_price" class="regular-text" step="0.01" required></td>
                </tr>
                <tr>
                    <th><label for="add-plan-status">Status</label></th>
                    <td>
                        <select id="add-plan-status" name="is_active" class="regular-text" required>
                            <option value="1">Active</option>
                            <option value="0">Inactive</option>
                        </select>
                    </td>
                </tr>
            </table>
            <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
            <p class="submit"><button type="button" id="save-subscription-plan" class="button-primary">Add Subscription Plan</button></p>
        </form>
        <h3>Existing Subscription Plans</h3>
        <table class="wp-list-table widefat fixed striped" id="add-subscription-plans-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Plan Name</th>
                    <th>Duration</th>
                    <th>Price</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="add-subscription-plans-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadSubscriptionPlans() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription_plans', nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#add-subscription-plans-table-body').html(response.data.plans.replace(/<td>.*?(Edit|Delete).*?<\/td>/g, ''));
                    } else {
                        $('#add-subscription-plans-table-body').html('<tr><td colspan="5">No subscription plans found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#add-subscription-plans-table-body').html('<tr><td colspan="5">Error loading subscription plans.</td></tr>');
                }
            });
        }

        loadSubscriptionPlans();

        $('#save-subscription-plan').on('click', function() {
            const formData = new FormData($('#standalone-add-subscription-plan-form')[0]);
            formData.append('action', 'enigma_add_subscription_plan');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#add-subscription-plan-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#standalone-add-subscription-plan-form')[0].reset();
                        loadSubscriptionPlans();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

function render_enigma_edit_subscription_plan_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Edit Subscription Plans</h2>
        <div id="edit-subscription-plan-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="edit-subscription-plans-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Plan Name</th>
                    <th>Duration</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody id="edit-subscription-plans-table-body"></tbody>
        </table>
        <div id="edit-form-container" style="display: none; margin-top: 20px;">
            <h3>Edit Subscription Plan</h3>
            <form id="standalone-edit-subscription-plan-form">
                <input type="hidden" id="edit-plan-id" name="plan_id">
                <table class="form-table">
                    <tr>
                        <th><label for="edit-plan-name">Plan Name</label></th>
                        <td><input type="text" id="edit-plan-name" name="plan_name" class="regular-text" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-plan-duration">Duration</label></th>
                        <td><input type="text" id="edit-plan-duration" name="plan_duration" class="regular-text" placeholder="e.g., +1 month" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-plan-price">Price ($)</label></th>
                        <td><input type="number" id="edit-plan-price" name="plan_price" class="regular-text" step="0.01" required></td>
                    </tr>
                    <tr>
                        <th><label for="edit-plan-status">Status</label></th>
                        <td>
                            <select id="edit-plan-status" name="is_active" class="regular-text" required>
                                <option value="1">Active</option>
                                <option value="0">Inactive</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <input type="hidden" name="nonce" value="<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>">
                <p class="submit">
                    <button type="button" id="update-subscription-plan" class="button-primary">Update Subscription Plan</button>
                    <button type="button" class="button" onclick="jQuery('#edit-form-container').hide()">Cancel</button>
                </p>
            </form>
        </div>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadSubscriptionPlans() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription_plans', nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-subscription-plans-table-body').html(response.data.plans);
                    } else {
                        $('#edit-subscription-plans-table-body').html('<tr><td colspan="6">No subscription plans found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#edit-subscription-plans-table-body').html('<tr><td colspan="6">Error loading subscription plans.</td></tr>');
                }
            });
        }

        loadSubscriptionPlans();

        $('#edit-subscription-plans-table-body').on('click', '.edit-subscription-plan', function() {
            const planId = $(this).data('plan-id');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription_plan', plan_id: planId, nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#edit-plan-id').val(response.data.id);
                        $('#edit-plan-name').val(response.data.plan_name);
                        $('#edit-plan-duration').val(response.data.plan_duration);
                        $('#edit-plan-price').val(response.data.plan_price);
                        $('#edit-plan-status').val(response.data.is_active);
                        $('#edit-form-container').show();
                    } else {
                        alert('Error fetching subscription plan: ' + (response.data?.message || 'Unknown error'));
                    }
                },
                error: function() {
                    hideLoader();
                    alert('Error fetching subscription plan data.');
                }
            });
        });

        $('#update-subscription-plan').on('click', function() {
            const formData = new FormData($('#standalone-edit-subscription-plan-form')[0]);
            formData.append('action', 'enigma_edit_subscription_plan');
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    hideLoader();
                    const $message = $('#edit-subscription-plan-message');
                    if (response.success) {
                        $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                        $('#edit-form-container').hide();
                        loadSubscriptionPlans();
                        setTimeout(() => $message.text(''), 4000);
                    } else {
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                        setTimeout(() => $message.text(''), 4000);
                    }
                },
                error: function() {
                    hideLoader();
                    $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                }
            });
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

function render_enigma_delete_subscription_plan_form() {
    ob_start();
    ?>
    <div class="wrap">
        <!-- Loader SVG -->
        <div id="edu-loader" class="edu-loader" style="display: none;">
            <div class="edu-loader-container">
                <img src="<?php echo plugin_dir_url(__FILE__) . '../custom-loader.png'; ?>" alt="Loading..." class="edu-loader-png">
            </div>
        </div>
        <h2>Delete Subscription Plans</h2>
        <div id="delete-subscription-plan-message" class="message"></div>
        <table class="wp-list-table widefat fixed striped" id="delete-subscription-plans-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Plan Name</th>
                    <th>Duration</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="delete-subscription-plans-table-body"></tbody>
        </table>
    </div>
    <script>
    function showLoader() { jQuery('#edu-loader').show(); }
    function hideLoader() { jQuery('#edu-loader').hide(); }

    jQuery(document).ready(function($) {
        const ajaxUrl = '<?php echo esc_js(admin_url('admin-ajax.php')); ?>';
        const ajaxNonce = '<?php echo wp_create_nonce('enigma_subscriptions_nonce'); ?>';

        function loadSubscriptionPlans() {
            showLoader();
            $.ajax({
                url: ajaxUrl,
                method: 'POST',
                data: { action: 'enigma_fetch_subscription_plans', nonce: ajaxNonce },
                success: function(response) {
                    hideLoader();
                    if (response.success) {
                        $('#delete-subscription-plans-table-body').html(response.data.plans);
                    } else {
                        $('#delete-subscription-plans-table-body').html('<tr><td colspan="6">No subscription plans found.</td></tr>');
                    }
                },
                error: function() {
                    hideLoader();
                    $('#delete-subscription-plans-table-body').html('<tr><td colspan="6">Error loading subscription plans.</td></tr>');
                }
            });
        }

        loadSubscriptionPlans();

        $('#delete-subscription-plans-table-body').on('click', '.delete-subscription-plan', function() {
            if (confirm('Are you sure you want to delete this subscription plan?')) {
                const planId = $(this).data('plan-id');
                showLoader();
                $.ajax({
                    url: ajaxUrl,
                    method: 'POST',
                    data: { action: 'enigma_delete_subscription_plan', plan_id: planId, nonce: ajaxNonce },
                    success: function(response) {
                        hideLoader();
                        const $message = $('#delete-subscription-plan-message');
                        if (response.success) {
                            $message.css({'background': 'var(--success-bg)', 'color': 'var(--success-text)'}).text(response.data);
                            loadSubscriptionPlans();
                            setTimeout(() => $message.text(''), 4000);
                        } else {
                            $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: ' + (response.data?.message || 'Unknown error'));
                            setTimeout(() => $message.text(''), 4000);
                        }
                    },
                    error: function() {
                        hideLoader();
                        $message.css({'background': 'var(--error-bg)', 'color': 'var(--error-text)'}).text('Error: AJAX request failed.');
                    }
                });
            }
        });
    });
    </script>
    <?php
    wp_enqueue_style('enigma-subscriptions-style', plugin_dir_url(__FILE__) . 'subscriptions.css');
    return ob_get_clean();
}

// AJAX Handlers for Subscription Plans (unchanged from previous)
add_action('wp_ajax_enigma_fetch_subscription_plans', 'enigma_fetch_subscription_plans');
function enigma_fetch_subscription_plans() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $plans = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}edu_subscription_plans ORDER BY id DESC", ARRAY_A);
    $plans_html = '';
    foreach ($plans as $plan) {
        $status = $plan['is_active'] ? 'Active' : 'Inactive';
        $plans_html .= "<tr>
            <td>" . esc_html($plan['id']) . "</td>
            <td>" . esc_html($plan['plan_name']) . "</td>
            <td>" . esc_html($plan['plan_duration']) . "</td>
            <td>" . esc_html($plan['plan_price']) . "</td>
            <td>" . esc_html($status) . "</td>
            <td>
                <button class='edit-subscription-plan' data-plan-id='" . esc_attr($plan['id']) . "'>Edit</button>
                <button class='delete-subscription-plan' data-plan-id='" . esc_attr($plan['id']) . "'>Delete</button>
            </td>
        </tr>";
    }
    if (!$plans) $plans_html = '<tr><td colspan="6">No subscription plans found.</td></tr>';
    wp_send_json_success(['plans' => $plans_html]);
}

add_action('wp_ajax_enigma_fetch_subscription_plan', 'enigma_fetch_subscription_plan');
function enigma_fetch_subscription_plan() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $plan_id = intval($_POST['plan_id']);
    $plan = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}edu_subscription_plans WHERE id = %d",
        $plan_id
    ), ARRAY_A);
    if ($plan) {
        wp_send_json_success($plan);
    } else {
        wp_send_json_error(['message' => 'Subscription plan not found']);
    }
}

add_action('wp_ajax_enigma_add_subscription_plan', 'enigma_add_subscription_plan');
function enigma_add_subscription_plan() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $data = [
        'plan_name' => sanitize_text_field($_POST['plan_name']),
        'plan_duration' => sanitize_text_field($_POST['plan_duration']),
        'plan_price' => floatval($_POST['plan_price']),
        'is_active' => intval($_POST['is_active'])
    ];
    if (empty($data['plan_name']) || empty($data['plan_duration']) || empty($data['plan_price'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }
    $result = $wpdb->insert($wpdb->prefix . 'edu_subscription_plans', $data);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to add subscription plan: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Subscription plan added successfully');
    }
}

add_action('wp_ajax_enigma_edit_subscription_plan', 'enigma_edit_subscription_plan');
function enigma_edit_subscription_plan() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $plan_id = intval($_POST['plan_id']);
    $data = [
        'plan_name' => sanitize_text_field($_POST['plan_name']),
        'plan_duration' => sanitize_text_field($_POST['plan_duration']),
        'plan_price' => floatval($_POST['plan_price']),
        'is_active' => intval($_POST['is_active'])
    ];
    if (empty($plan_id) || empty($data['plan_name']) || empty($data['plan_duration']) || empty($data['plan_price'])) {
        wp_send_json_error(['message' => 'All fields are required']);
        exit;
    }
    $result = $wpdb->update($wpdb->prefix . 'edu_subscription_plans', $data, ['id' => $plan_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to update subscription plan: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Subscription plan updated successfully');
    }
}

add_action('wp_ajax_enigma_delete_subscription_plan', 'enigma_delete_subscription_plan');
function enigma_delete_subscription_plan() {
    check_ajax_referer('enigma_subscriptions_nonce', 'nonce');
    global $wpdb;
    $plan_id = intval($_POST['plan_id']);
    if (empty($plan_id)) {
        wp_send_json_error(['message' => 'Invalid subscription plan ID']);
        exit;
    }
    $result = $wpdb->delete($wpdb->prefix . 'edu_subscription_plans', ['id' => $plan_id]);
    if ($result === false) {
        wp_send_json_error(['message' => 'Failed to delete subscription plan: ' . $wpdb->last_error]);
    } else {
        wp_send_json_success('Subscription plan deleted successfully');
    }
}







// Role & Permissions Management (Stub)
function render_su_p_roles() {
    ob_start();
    ?>
    <div class="card shadow-sm" style="margin-top: 80px;">
        <div class="card-header bg-primary text-white">Role & Permissions</div>
        <div class="card-body">
            <p>Role and permissions management to be implemented.</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// Notifications Management (Stub)
function render_su_p_notifications() {
    ob_start();
    ?>
    <div class="card shadow-sm" style="margin-top: 80px;">
        <div class="card-header bg-primary text-white">Notifications</div>
        <div class="card-body">
            <p>Notification broadcasting to be implemented.</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// System Settings (Stub)
function render_su_p_settings() {
    ob_start();
    ?>
    <div class="card shadow-sm" style="margin-top: 80px;">
        <div class="card-header bg-primary text-white">System Settings</div>
        <div class="card-body">
            <p>Global system settings to be implemented.</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// Audit Logs (Stub)
function render_su_p_audit_logs() {
    ob_start();
    ?>
    <div class="card shadow-sm" style="margin-top: 80px;">
        <div class="card-header bg-primary text-white">Audit Logs</div>
        <div class="card-body">
            <p>Audit log tracking to be implemented.</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// Support & Troubleshooting (Stub)
function render_su_p_support() {
    ob_start();
    ?>
    <div class="card shadow-sm" style="margin-top: 80px;">
        <div class="card-header bg-primary text-white">Support & Troubleshooting</div>
        <div class="card-body">
            <p>Support ticket management to be implemented.</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// Add su_p Capability
add_action('init', function() {
    $role = get_role('administrator');
    if ($role) {
        $role->add_cap('super_admin');
    }
});

// Enqueue Bootstrap and Font Awesome
add_action('wp_enqueue_scripts', function() {
    wp_enqueue_style('bootstrap', 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');
    wp_enqueue_script('bootstrap', 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js', ['jquery'], null, true);
    wp_enqueue_style('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css');
});